// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// lag_vec
arma::vec lag_vec(arma::vec& t_series, arma::sword lagg, bool pad_zeros);
RcppExport SEXP _HighFreq_lag_vec(SEXP t_seriesSEXP, SEXP laggSEXP, SEXP pad_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::sword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_zeros(pad_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(lag_vec(t_series, lagg, pad_zeros));
    return rcpp_result_gen;
END_RCPP
}
// lag_it
arma::mat lag_it(arma::mat& t_series, arma::sword lagg, bool pad_zeros);
RcppExport SEXP _HighFreq_lag_it(SEXP t_seriesSEXP, SEXP laggSEXP, SEXP pad_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::sword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_zeros(pad_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(lag_it(t_series, lagg, pad_zeros));
    return rcpp_result_gen;
END_RCPP
}
// diff_vec
arma::vec diff_vec(arma::vec& t_series, int lagg, bool padd);
RcppExport SEXP _HighFreq_diff_vec(SEXP t_seriesSEXP, SEXP laggSEXP, SEXP paddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< int >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type padd(paddSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_vec(t_series, lagg, padd));
    return rcpp_result_gen;
END_RCPP
}
// diff_it
arma::mat diff_it(arma::mat& t_series, arma::uword lagg, bool padd);
RcppExport SEXP _HighFreq_diff_it(SEXP t_seriesSEXP, SEXP laggSEXP, SEXP paddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type padd(paddSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_it(t_series, lagg, padd));
    return rcpp_result_gen;
END_RCPP
}
// calc_endpoints
arma::uvec calc_endpoints(arma::uword len_gth, arma::uword ste_p, bool front);
RcppExport SEXP _HighFreq_calc_endpoints(SEXP len_gthSEXP, SEXP ste_pSEXP, SEXP frontSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type len_gth(len_gthSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ste_p(ste_pSEXP);
    Rcpp::traits::input_parameter< bool >::type front(frontSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_endpoints(len_gth, ste_p, front));
    return rcpp_result_gen;
END_RCPP
}
// calc_startpoints
arma::uvec calc_startpoints(arma::uvec end_points, arma::uword look_back);
RcppExport SEXP _HighFreq_calc_startpoints(SEXP end_pointsSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type end_points(end_pointsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_startpoints(end_points, look_back));
    return rcpp_result_gen;
END_RCPP
}
// mult_vec_mat
arma::uword mult_vec_mat(const arma::vec& vec_tor, arma::mat& mat_rix, const bool& by_col);
RcppExport SEXP _HighFreq_mult_vec_mat(SEXP vec_torSEXP, SEXP mat_rixSEXP, SEXP by_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vec_tor(vec_torSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mat_rix(mat_rixSEXP);
    Rcpp::traits::input_parameter< const bool& >::type by_col(by_colSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_vec_mat(vec_tor, mat_rix, by_col));
    return rcpp_result_gen;
END_RCPP
}
// calc_eigen
List calc_eigen(const arma::mat& re_turns);
RcppExport SEXP _HighFreq_calc_eigen(SEXP re_turnsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type re_turns(re_turnsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_eigen(re_turns));
    return rcpp_result_gen;
END_RCPP
}
// calc_inv
arma::mat calc_inv(const arma::mat& re_turns, double to_l, int max_eigen);
RcppExport SEXP _HighFreq_calc_inv(SEXP re_turnsSEXP, SEXP to_lSEXP, SEXP max_eigenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type re_turns(re_turnsSEXP);
    Rcpp::traits::input_parameter< double >::type to_l(to_lSEXP);
    Rcpp::traits::input_parameter< int >::type max_eigen(max_eigenSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_inv(re_turns, to_l, max_eigen));
    return rcpp_result_gen;
END_RCPP
}
// calc_scaled
arma::mat calc_scaled(const arma::mat& mat_rix, const bool use_median);
RcppExport SEXP _HighFreq_calc_scaled(SEXP mat_rixSEXP, SEXP use_medianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_rix(mat_rixSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_median(use_medianSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_scaled(mat_rix, use_median));
    return rcpp_result_gen;
END_RCPP
}
// calc_var_vec
double calc_var_vec(arma::vec& t_series);
RcppExport SEXP _HighFreq_calc_var_vec(SEXP t_seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type t_series(t_seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var_vec(t_series));
    return rcpp_result_gen;
END_RCPP
}
// calc_var
arma::rowvec calc_var(arma::mat& t_series);
RcppExport SEXP _HighFreq_calc_var(SEXP t_seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var(t_series));
    return rcpp_result_gen;
END_RCPP
}
// calc_var_ohlc
double calc_var_ohlc(arma::mat& oh_lc, const std::string& calc_method, arma::colvec lag_close, const bool& scal_e, arma::colvec in_dex);
RcppExport SEXP _HighFreq_calc_var_ohlc(SEXP oh_lcSEXP, SEXP calc_methodSEXP, SEXP lag_closeSEXP, SEXP scal_eSEXP, SEXP in_dexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type oh_lc(oh_lcSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type calc_method(calc_methodSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type lag_close(lag_closeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scal_e(scal_eSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type in_dex(in_dexSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var_ohlc(oh_lc, calc_method, lag_close, scal_e, in_dex));
    return rcpp_result_gen;
END_RCPP
}
// calc_ranks
arma::uvec calc_ranks(const arma::vec& vec_tor);
RcppExport SEXP _HighFreq_calc_ranks(SEXP vec_torSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type vec_tor(vec_torSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ranks(vec_tor));
    return rcpp_result_gen;
END_RCPP
}
// calc_mad
arma::mat calc_mad(arma::mat& t_series);
RcppExport SEXP _HighFreq_calc_mad(SEXP t_seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mad(t_series));
    return rcpp_result_gen;
END_RCPP
}
// calc_skew
arma::mat calc_skew(arma::mat t_series, std::string typ_e, double al_pha);
RcppExport SEXP _HighFreq_calc_skew(SEXP t_seriesSEXP, SEXP typ_eSEXP, SEXP al_phaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< std::string >::type typ_e(typ_eSEXP);
    Rcpp::traits::input_parameter< double >::type al_pha(al_phaSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_skew(t_series, typ_e, al_pha));
    return rcpp_result_gen;
END_RCPP
}
// calc_skew_pearson
arma::mat calc_skew_pearson(arma::mat& t_series);
RcppExport SEXP _HighFreq_calc_skew_pearson(SEXP t_seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_skew_pearson(t_series));
    return rcpp_result_gen;
END_RCPP
}
// calc_skew_quant
arma::mat calc_skew_quant(arma::mat& t_series, double al_pha);
RcppExport SEXP _HighFreq_calc_skew_quant(SEXP t_seriesSEXP, SEXP al_phaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< double >::type al_pha(al_phaSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_skew_quant(t_series, al_pha));
    return rcpp_result_gen;
END_RCPP
}
// calc_skew_nonp
arma::mat calc_skew_nonp(arma::mat& t_series);
RcppExport SEXP _HighFreq_calc_skew_nonp(SEXP t_seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_skew_nonp(t_series));
    return rcpp_result_gen;
END_RCPP
}
// calc_lm
Rcpp::List calc_lm(const arma::vec& res_ponse, const arma::mat& de_sign);
RcppExport SEXP _HighFreq_calc_lm(SEXP res_ponseSEXP, SEXP de_signSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type res_ponse(res_ponseSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type de_sign(de_signSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lm(res_ponse, de_sign));
    return rcpp_result_gen;
END_RCPP
}
// agg_ohlc
arma::mat agg_ohlc(const arma::mat& t_series);
RcppExport SEXP _HighFreq_agg_ohlc(SEXP t_seriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type t_series(t_seriesSEXP);
    rcpp_result_gen = Rcpp::wrap(agg_ohlc(t_series));
    return rcpp_result_gen;
END_RCPP
}
// roll_count
arma::uvec roll_count(arma::uvec& vec_tor);
RcppExport SEXP _HighFreq_roll_count(SEXP vec_torSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type vec_tor(vec_torSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_count(vec_tor));
    return rcpp_result_gen;
END_RCPP
}
// roll_ohlc
arma::mat roll_ohlc(arma::mat& t_series, arma::uvec& end_points);
RcppExport SEXP _HighFreq_roll_ohlc(SEXP t_seriesSEXP, SEXP end_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type end_points(end_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_ohlc(t_series, end_points));
    return rcpp_result_gen;
END_RCPP
}
// roll_vec
NumericVector roll_vec(NumericVector t_series, int look_back);
RcppExport SEXP _HighFreq_roll_vec(SEXP t_seriesSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< int >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_vec(t_series, look_back));
    return rcpp_result_gen;
END_RCPP
}
// roll_vecw
arma::vec roll_vecw(const arma::vec& t_series, const arma::vec& weight_s);
RcppExport SEXP _HighFreq_roll_vecw(SEXP t_seriesSEXP, SEXP weight_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_s(weight_sSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_vecw(t_series, weight_s));
    return rcpp_result_gen;
END_RCPP
}
// roll_conv
arma::mat roll_conv(arma::mat& mat_rix, arma::mat& weight_s);
RcppExport SEXP _HighFreq_roll_conv(SEXP mat_rixSEXP, SEXP weight_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mat_rix(mat_rixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type weight_s(weight_sSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_conv(mat_rix, weight_s));
    return rcpp_result_gen;
END_RCPP
}
// roll_conv_ref
arma::mat roll_conv_ref(arma::mat& mat_rix, arma::mat& weight_s);
RcppExport SEXP _HighFreq_roll_conv_ref(SEXP mat_rixSEXP, SEXP weight_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mat_rix(mat_rixSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type weight_s(weight_sSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_conv_ref(mat_rix, weight_s));
    return rcpp_result_gen;
END_RCPP
}
// roll_sum
arma::mat roll_sum(arma::mat& t_series, arma::uword look_back, Rcpp::Nullable<int> stu_b, Rcpp::Nullable<Rcpp::IntegerVector> end_points, Rcpp::Nullable<Rcpp::NumericVector> weight_s);
RcppExport SEXP _HighFreq_roll_sum(SEXP t_seriesSEXP, SEXP look_backSEXP, SEXP stu_bSEXP, SEXP end_pointsSEXP, SEXP weight_sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type look_back(look_backSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type stu_b(stu_bSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type end_points(end_pointsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type weight_s(weight_sSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sum(t_series, look_back, stu_b, end_points, weight_s));
    return rcpp_result_gen;
END_RCPP
}
// roll_var_vec
arma::vec roll_var_vec(arma::vec& t_series, arma::uword look_back);
RcppExport SEXP _HighFreq_roll_var_vec(SEXP t_seriesSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var_vec(t_series, look_back));
    return rcpp_result_gen;
END_RCPP
}
// roll_var
arma::mat roll_var(arma::mat& t_series, arma::uword ste_p, arma::uword look_back);
RcppExport SEXP _HighFreq_roll_var(SEXP t_seriesSEXP, SEXP ste_pSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type t_series(t_seriesSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ste_p(ste_pSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var(t_series, ste_p, look_back));
    return rcpp_result_gen;
END_RCPP
}
// roll_var_ohlc
arma::vec roll_var_ohlc(arma::mat& oh_lc, arma::uword ste_p, arma::uword look_back, const std::string& calc_method, const bool& scal_e, arma::colvec in_dex);
RcppExport SEXP _HighFreq_roll_var_ohlc(SEXP oh_lcSEXP, SEXP ste_pSEXP, SEXP look_backSEXP, SEXP calc_methodSEXP, SEXP scal_eSEXP, SEXP in_dexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type oh_lc(oh_lcSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type ste_p(ste_pSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type look_back(look_backSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type calc_method(calc_methodSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scal_e(scal_eSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type in_dex(in_dexSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var_ohlc(oh_lc, ste_p, look_back, calc_method, scal_e, in_dex));
    return rcpp_result_gen;
END_RCPP
}
// roll_scale
arma::mat roll_scale(const arma::mat& mat_rix, const arma::uword& look_back, const bool use_median);
RcppExport SEXP _HighFreq_roll_scale(SEXP mat_rixSEXP, SEXP look_backSEXP, SEXP use_medianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mat_rix(mat_rixSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type look_back(look_backSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_median(use_medianSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_scale(mat_rix, look_back, use_median));
    return rcpp_result_gen;
END_RCPP
}
// roll_zscores
arma::vec roll_zscores(const arma::vec& res_ponse, const arma::mat& de_sign, const arma::uword& look_back);
RcppExport SEXP _HighFreq_roll_zscores(SEXP res_ponseSEXP, SEXP de_signSEXP, SEXP look_backSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type res_ponse(res_ponseSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type de_sign(de_signSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type look_back(look_backSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_zscores(res_ponse, de_sign, look_back));
    return rcpp_result_gen;
END_RCPP
}
// sim_garch
NumericMatrix sim_garch(double om_ega, double al_pha, double be_ta, NumericVector in_nov);
RcppExport SEXP _HighFreq_sim_garch(SEXP om_egaSEXP, SEXP al_phaSEXP, SEXP be_taSEXP, SEXP in_novSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type om_ega(om_egaSEXP);
    Rcpp::traits::input_parameter< double >::type al_pha(al_phaSEXP);
    Rcpp::traits::input_parameter< double >::type be_ta(be_taSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type in_nov(in_novSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_garch(om_ega, al_pha, be_ta, in_nov));
    return rcpp_result_gen;
END_RCPP
}
// sim_ou
NumericVector sim_ou(double eq_price, double vol_at, double the_ta, NumericVector in_nov);
RcppExport SEXP _HighFreq_sim_ou(SEXP eq_priceSEXP, SEXP vol_atSEXP, SEXP the_taSEXP, SEXP in_novSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type eq_price(eq_priceSEXP);
    Rcpp::traits::input_parameter< double >::type vol_at(vol_atSEXP);
    Rcpp::traits::input_parameter< double >::type the_ta(the_taSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type in_nov(in_novSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ou(eq_price, vol_at, the_ta, in_nov));
    return rcpp_result_gen;
END_RCPP
}
// sim_arima
arma::vec sim_arima(const arma::vec& in_nov, const arma::vec& co_eff);
RcppExport SEXP _HighFreq_sim_arima(SEXP in_novSEXP, SEXP co_effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type in_nov(in_novSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type co_eff(co_effSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_arima(in_nov, co_eff));
    return rcpp_result_gen;
END_RCPP
}
// calc_weights
arma::vec calc_weights(const arma::mat& re_turns, const std::string& typ_e, double to_l, int max_eigen, const double& pro_b, const double& al_pha, const bool scal_e, double vo_l);
RcppExport SEXP _HighFreq_calc_weights(SEXP re_turnsSEXP, SEXP typ_eSEXP, SEXP to_lSEXP, SEXP max_eigenSEXP, SEXP pro_bSEXP, SEXP al_phaSEXP, SEXP scal_eSEXP, SEXP vo_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type re_turns(re_turnsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type typ_e(typ_eSEXP);
    Rcpp::traits::input_parameter< double >::type to_l(to_lSEXP);
    Rcpp::traits::input_parameter< int >::type max_eigen(max_eigenSEXP);
    Rcpp::traits::input_parameter< const double& >::type pro_b(pro_bSEXP);
    Rcpp::traits::input_parameter< const double& >::type al_pha(al_phaSEXP);
    Rcpp::traits::input_parameter< const bool >::type scal_e(scal_eSEXP);
    Rcpp::traits::input_parameter< double >::type vo_l(vo_lSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_weights(re_turns, typ_e, to_l, max_eigen, pro_b, al_pha, scal_e, vo_l));
    return rcpp_result_gen;
END_RCPP
}
// back_test
arma::mat back_test(const arma::mat& ex_cess, const arma::mat& re_turns, const arma::uvec& start_points, const arma::uvec& end_points, const std::string& typ_e, double to_l, int max_eigen, const double& pro_b, const double& al_pha, const bool& scal_e, double vo_l, const double& co_eff, const double& bid_offer);
RcppExport SEXP _HighFreq_back_test(SEXP ex_cessSEXP, SEXP re_turnsSEXP, SEXP start_pointsSEXP, SEXP end_pointsSEXP, SEXP typ_eSEXP, SEXP to_lSEXP, SEXP max_eigenSEXP, SEXP pro_bSEXP, SEXP al_phaSEXP, SEXP scal_eSEXP, SEXP vo_lSEXP, SEXP co_effSEXP, SEXP bid_offerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ex_cess(ex_cessSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type re_turns(re_turnsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type start_points(start_pointsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type end_points(end_pointsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type typ_e(typ_eSEXP);
    Rcpp::traits::input_parameter< double >::type to_l(to_lSEXP);
    Rcpp::traits::input_parameter< int >::type max_eigen(max_eigenSEXP);
    Rcpp::traits::input_parameter< const double& >::type pro_b(pro_bSEXP);
    Rcpp::traits::input_parameter< const double& >::type al_pha(al_phaSEXP);
    Rcpp::traits::input_parameter< const bool& >::type scal_e(scal_eSEXP);
    Rcpp::traits::input_parameter< double >::type vo_l(vo_lSEXP);
    Rcpp::traits::input_parameter< const double& >::type co_eff(co_effSEXP);
    Rcpp::traits::input_parameter< const double& >::type bid_offer(bid_offerSEXP);
    rcpp_result_gen = Rcpp::wrap(back_test(ex_cess, re_turns, start_points, end_points, typ_e, to_l, max_eigen, pro_b, al_pha, scal_e, vo_l, co_eff, bid_offer));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HighFreq_lag_vec", (DL_FUNC) &_HighFreq_lag_vec, 3},
    {"_HighFreq_lag_it", (DL_FUNC) &_HighFreq_lag_it, 3},
    {"_HighFreq_diff_vec", (DL_FUNC) &_HighFreq_diff_vec, 3},
    {"_HighFreq_diff_it", (DL_FUNC) &_HighFreq_diff_it, 3},
    {"_HighFreq_calc_endpoints", (DL_FUNC) &_HighFreq_calc_endpoints, 3},
    {"_HighFreq_calc_startpoints", (DL_FUNC) &_HighFreq_calc_startpoints, 2},
    {"_HighFreq_mult_vec_mat", (DL_FUNC) &_HighFreq_mult_vec_mat, 3},
    {"_HighFreq_calc_eigen", (DL_FUNC) &_HighFreq_calc_eigen, 1},
    {"_HighFreq_calc_inv", (DL_FUNC) &_HighFreq_calc_inv, 3},
    {"_HighFreq_calc_scaled", (DL_FUNC) &_HighFreq_calc_scaled, 2},
    {"_HighFreq_calc_var_vec", (DL_FUNC) &_HighFreq_calc_var_vec, 1},
    {"_HighFreq_calc_var", (DL_FUNC) &_HighFreq_calc_var, 1},
    {"_HighFreq_calc_var_ohlc", (DL_FUNC) &_HighFreq_calc_var_ohlc, 5},
    {"_HighFreq_calc_ranks", (DL_FUNC) &_HighFreq_calc_ranks, 1},
    {"_HighFreq_calc_mad", (DL_FUNC) &_HighFreq_calc_mad, 1},
    {"_HighFreq_calc_skew", (DL_FUNC) &_HighFreq_calc_skew, 3},
    {"_HighFreq_calc_skew_pearson", (DL_FUNC) &_HighFreq_calc_skew_pearson, 1},
    {"_HighFreq_calc_skew_quant", (DL_FUNC) &_HighFreq_calc_skew_quant, 2},
    {"_HighFreq_calc_skew_nonp", (DL_FUNC) &_HighFreq_calc_skew_nonp, 1},
    {"_HighFreq_calc_lm", (DL_FUNC) &_HighFreq_calc_lm, 2},
    {"_HighFreq_agg_ohlc", (DL_FUNC) &_HighFreq_agg_ohlc, 1},
    {"_HighFreq_roll_count", (DL_FUNC) &_HighFreq_roll_count, 1},
    {"_HighFreq_roll_ohlc", (DL_FUNC) &_HighFreq_roll_ohlc, 2},
    {"_HighFreq_roll_vec", (DL_FUNC) &_HighFreq_roll_vec, 2},
    {"_HighFreq_roll_vecw", (DL_FUNC) &_HighFreq_roll_vecw, 2},
    {"_HighFreq_roll_conv", (DL_FUNC) &_HighFreq_roll_conv, 2},
    {"_HighFreq_roll_conv_ref", (DL_FUNC) &_HighFreq_roll_conv_ref, 2},
    {"_HighFreq_roll_sum", (DL_FUNC) &_HighFreq_roll_sum, 5},
    {"_HighFreq_roll_var_vec", (DL_FUNC) &_HighFreq_roll_var_vec, 2},
    {"_HighFreq_roll_var", (DL_FUNC) &_HighFreq_roll_var, 3},
    {"_HighFreq_roll_var_ohlc", (DL_FUNC) &_HighFreq_roll_var_ohlc, 6},
    {"_HighFreq_roll_scale", (DL_FUNC) &_HighFreq_roll_scale, 3},
    {"_HighFreq_roll_zscores", (DL_FUNC) &_HighFreq_roll_zscores, 3},
    {"_HighFreq_sim_garch", (DL_FUNC) &_HighFreq_sim_garch, 4},
    {"_HighFreq_sim_ou", (DL_FUNC) &_HighFreq_sim_ou, 4},
    {"_HighFreq_sim_arima", (DL_FUNC) &_HighFreq_sim_arima, 2},
    {"_HighFreq_calc_weights", (DL_FUNC) &_HighFreq_calc_weights, 8},
    {"_HighFreq_back_test", (DL_FUNC) &_HighFreq_back_test, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_HighFreq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
