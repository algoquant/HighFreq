// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// param_reg
Rcpp::List param_reg(std::string regmod, bool intercept, double singmin, arma::uword dimax, std::string residscale, double confl, double alphac);
RcppExport SEXP _HighFreq_param_reg(SEXP regmodSEXP, SEXP interceptSEXP, SEXP singminSEXP, SEXP dimaxSEXP, SEXP residscaleSEXP, SEXP conflSEXP, SEXP alphacSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type regmod(regmodSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type singmin(singminSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type dimax(dimaxSEXP);
    Rcpp::traits::input_parameter< std::string >::type residscale(residscaleSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    Rcpp::traits::input_parameter< double >::type alphac(alphacSEXP);
    rcpp_result_gen = Rcpp::wrap(param_reg(regmod, intercept, singmin, dimax, residscale, confl, alphac));
    return rcpp_result_gen;
END_RCPP
}
// param_portf
Rcpp::List param_portf(std::string method, double singmin, arma::uword dimax, double confl, double alphac, bool rankw, bool centerw, std::string scalew, double voltarget);
RcppExport SEXP _HighFreq_param_portf(SEXP methodSEXP, SEXP singminSEXP, SEXP dimaxSEXP, SEXP conflSEXP, SEXP alphacSEXP, SEXP rankwSEXP, SEXP centerwSEXP, SEXP scalewSEXP, SEXP voltargetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type singmin(singminSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type dimax(dimaxSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    Rcpp::traits::input_parameter< double >::type alphac(alphacSEXP);
    Rcpp::traits::input_parameter< bool >::type rankw(rankwSEXP);
    Rcpp::traits::input_parameter< bool >::type centerw(centerwSEXP);
    Rcpp::traits::input_parameter< std::string >::type scalew(scalewSEXP);
    Rcpp::traits::input_parameter< double >::type voltarget(voltargetSEXP);
    rcpp_result_gen = Rcpp::wrap(param_portf(method, singmin, dimax, confl, alphac, rankw, centerw, scalew, voltarget));
    return rcpp_result_gen;
END_RCPP
}
// lag_vec
arma::vec lag_vec(const arma::vec& timeser, arma::sword lagg, bool pad_zeros);
RcppExport SEXP _HighFreq_lag_vec(SEXP timeserSEXP, SEXP laggSEXP, SEXP pad_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::sword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_zeros(pad_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(lag_vec(timeser, lagg, pad_zeros));
    return rcpp_result_gen;
END_RCPP
}
// lagit
arma::mat lagit(const arma::mat& timeser, arma::sword lagg, bool pad_zeros);
RcppExport SEXP _HighFreq_lagit(SEXP timeserSEXP, SEXP laggSEXP, SEXP pad_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::sword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_zeros(pad_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(lagit(timeser, lagg, pad_zeros));
    return rcpp_result_gen;
END_RCPP
}
// diff_vec
arma::vec diff_vec(const arma::vec& timeser, arma::uword lagg, bool pad_zeros);
RcppExport SEXP _HighFreq_diff_vec(SEXP timeserSEXP, SEXP laggSEXP, SEXP pad_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_zeros(pad_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_vec(timeser, lagg, pad_zeros));
    return rcpp_result_gen;
END_RCPP
}
// diffit
arma::mat diffit(const arma::mat& timeser, arma::sword lagg, bool pad_zeros);
RcppExport SEXP _HighFreq_diffit(SEXP timeserSEXP, SEXP laggSEXP, SEXP pad_zerosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::sword >::type lagg(laggSEXP);
    Rcpp::traits::input_parameter< bool >::type pad_zeros(pad_zerosSEXP);
    rcpp_result_gen = Rcpp::wrap(diffit(timeser, lagg, pad_zeros));
    return rcpp_result_gen;
END_RCPP
}
// calc_endpoints
arma::uvec calc_endpoints(arma::uword length, arma::uword step, arma::uword stub, bool stubs);
RcppExport SEXP _HighFreq_calc_endpoints(SEXP lengthSEXP, SEXP stepSEXP, SEXP stubSEXP, SEXP stubsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< bool >::type stubs(stubsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_endpoints(length, step, stub, stubs));
    return rcpp_result_gen;
END_RCPP
}
// calc_startpoints
arma::uvec calc_startpoints(arma::uvec endd, arma::uword lookb);
RcppExport SEXP _HighFreq_calc_startpoints(SEXP enddSEXP, SEXP lookbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_startpoints(endd, lookb));
    return rcpp_result_gen;
END_RCPP
}
// roll_count
arma::uvec roll_count(const arma::uvec& timeser);
RcppExport SEXP _HighFreq_roll_count(SEXP timeserSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type timeser(timeserSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_count(timeser));
    return rcpp_result_gen;
END_RCPP
}
// encode_it
Rcpp::List encode_it(arma::vec timeser);
RcppExport SEXP _HighFreq_encode_it(SEXP timeserSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type timeser(timeserSEXP);
    rcpp_result_gen = Rcpp::wrap(encode_it(timeser));
    return rcpp_result_gen;
END_RCPP
}
// decode_it
std::vector<double> decode_it(Rcpp::List encodel);
RcppExport SEXP _HighFreq_decode_it(SEXP encodelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type encodel(encodelSEXP);
    rcpp_result_gen = Rcpp::wrap(decode_it(encodel));
    return rcpp_result_gen;
END_RCPP
}
// calc_ranks
arma::uvec calc_ranks(arma::vec timeser);
RcppExport SEXP _HighFreq_calc_ranks(SEXP timeserSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type timeser(timeserSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ranks(timeser));
    return rcpp_result_gen;
END_RCPP
}
// calc_ranks_stl
arma::uvec calc_ranks_stl(arma::vec timeser);
RcppExport SEXP _HighFreq_calc_ranks_stl(SEXP timeserSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type timeser(timeserSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_ranks_stl(timeser));
    return rcpp_result_gen;
END_RCPP
}
// remove_dup
std::vector<std::string> remove_dup(std::vector<std::string> stringv);
RcppExport SEXP _HighFreq_remove_dup(SEXP stringvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type stringv(stringvSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_dup(stringv));
    return rcpp_result_gen;
END_RCPP
}
// mult_mat
arma::mat mult_mat(arma::vec vectorv, arma::mat matrixv, bool byrow);
RcppExport SEXP _HighFreq_mult_mat(SEXP vectorvSEXP, SEXP matrixvSEXP, SEXP byrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vectorv(vectorvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< bool >::type byrow(byrowSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_mat(vectorv, matrixv, byrow));
    return rcpp_result_gen;
END_RCPP
}
// mult_mat_ref
void mult_mat_ref(arma::vec vectorv, arma::mat matrixv, bool byrow);
RcppExport SEXP _HighFreq_mult_mat_ref(SEXP vectorvSEXP, SEXP matrixvSEXP, SEXP byrowSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type vectorv(vectorvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< bool >::type byrow(byrowSEXP);
    mult_mat_ref(vectorv, matrixv, byrow);
    return R_NilValue;
END_RCPP
}
// calc_eigen
void calc_eigen(const arma::mat& matrixv, arma::vec& eigenval, arma::mat& eigenvec);
RcppExport SEXP _HighFreq_calc_eigen(SEXP matrixvSEXP, SEXP eigenvalSEXP, SEXP eigenvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eigenvec(eigenvecSEXP);
    calc_eigen(matrixv, eigenval, eigenvec);
    return R_NilValue;
END_RCPP
}
// calc_eigenp
Rcpp::List calc_eigenp(arma::mat& matrixv, const arma::uword& neigen);
RcppExport SEXP _HighFreq_calc_eigenp(SEXP matrixvSEXP, SEXP neigenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type neigen(neigenSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_eigenp(matrixv, neigen));
    return rcpp_result_gen;
END_RCPP
}
// calc_inv
arma::mat calc_inv(const arma::mat& matrixv, arma::uword dimax, double singmin);
RcppExport SEXP _HighFreq_calc_inv(SEXP matrixvSEXP, SEXP dimaxSEXP, SEXP singminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type dimax(dimaxSEXP);
    Rcpp::traits::input_parameter< double >::type singmin(singminSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_inv(matrixv, dimax, singmin));
    return rcpp_result_gen;
END_RCPP
}
// calc_invsvd
arma::mat calc_invsvd(const arma::mat& matrixv, arma::uword dimax, double singmin);
RcppExport SEXP _HighFreq_calc_invsvd(SEXP matrixvSEXP, SEXP dimaxSEXP, SEXP singminSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type dimax(dimaxSEXP);
    Rcpp::traits::input_parameter< double >::type singmin(singminSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_invsvd(matrixv, dimax, singmin));
    return rcpp_result_gen;
END_RCPP
}
// calc_invrec
void calc_invrec(const arma::mat& matrixv, arma::mat& invmat, arma::uword niter);
RcppExport SEXP _HighFreq_calc_invrec(SEXP matrixvSEXP, SEXP invmatSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrixv(matrixvSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type invmat(invmatSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    calc_invrec(matrixv, invmat, niter);
    return R_NilValue;
END_RCPP
}
// calc_invref
void calc_invref(arma::mat& matrixv);
RcppExport SEXP _HighFreq_calc_invref(SEXP matrixvSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type matrixv(matrixvSEXP);
    calc_invref(matrixv);
    return R_NilValue;
END_RCPP
}
// calc_scale
void calc_scale(arma::mat& timeser, bool center, bool scale, bool use_median);
RcppExport SEXP _HighFreq_calc_scale(SEXP timeserSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP use_medianSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_median(use_medianSEXP);
    calc_scale(timeser, center, scale, use_median);
    return R_NilValue;
END_RCPP
}
// agg_ohlc
arma::mat agg_ohlc(const arma::mat& timeser);
RcppExport SEXP _HighFreq_agg_ohlc(SEXP timeserSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    rcpp_result_gen = Rcpp::wrap(agg_ohlc(timeser));
    return rcpp_result_gen;
END_RCPP
}
// roll_ohlc
arma::mat roll_ohlc(const arma::mat& timeser, arma::uvec endd);
RcppExport SEXP _HighFreq_roll_ohlc(SEXP timeserSEXP, SEXP enddSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_ohlc(timeser, endd));
    return rcpp_result_gen;
END_RCPP
}
// roll_conv
arma::mat roll_conv(const arma::mat& timeser, const arma::colvec& weightv);
RcppExport SEXP _HighFreq_roll_conv(SEXP timeserSEXP, SEXP weightvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weightv(weightvSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_conv(timeser, weightv));
    return rcpp_result_gen;
END_RCPP
}
// roll_sum
arma::mat roll_sum(const arma::mat& timeser, arma::uword lookb, const arma::colvec& weightv);
RcppExport SEXP _HighFreq_roll_sum(SEXP timeserSEXP, SEXP lookbSEXP, SEXP weightvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weightv(weightvSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sum(timeser, lookb, weightv));
    return rcpp_result_gen;
END_RCPP
}
// roll_sumep
arma::mat roll_sumep(const arma::mat& timeser, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub);
RcppExport SEXP _HighFreq_roll_sumep(SEXP timeserSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sumep(timeser, startp, endd, step, lookb, stub));
    return rcpp_result_gen;
END_RCPP
}
// roll_sumw
arma::mat roll_sumw(const arma::mat& timeser, Rcpp::Nullable<Rcpp::IntegerVector> endd, arma::uword lookb, Rcpp::Nullable<int> stub, Rcpp::Nullable<Rcpp::NumericVector> weightv);
RcppExport SEXP _HighFreq_roll_sumw(SEXP timeserSEXP, SEXP enddSEXP, SEXP lookbSEXP, SEXP stubSEXP, SEXP weightvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerVector> >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type weightv(weightvSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_sumw(timeser, endd, lookb, stub, weightv));
    return rcpp_result_gen;
END_RCPP
}
// run_mean
arma::mat run_mean(const arma::mat& timeser, double lambdaf, const arma::colvec& weightv);
RcppExport SEXP _HighFreq_run_mean(SEXP timeserSEXP, SEXP lambdafSEXP, SEXP weightvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weightv(weightvSEXP);
    rcpp_result_gen = Rcpp::wrap(run_mean(timeser, lambdaf, weightv));
    return rcpp_result_gen;
END_RCPP
}
// run_max
arma::mat run_max(const arma::mat& timeser, double lambdaf);
RcppExport SEXP _HighFreq_run_max(SEXP timeserSEXP, SEXP lambdafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    rcpp_result_gen = Rcpp::wrap(run_max(timeser, lambdaf));
    return rcpp_result_gen;
END_RCPP
}
// run_min
arma::mat run_min(const arma::mat& timeser, double lambdaf);
RcppExport SEXP _HighFreq_run_min(SEXP timeserSEXP, SEXP lambdafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    rcpp_result_gen = Rcpp::wrap(run_min(timeser, lambdaf));
    return rcpp_result_gen;
END_RCPP
}
// run_var
arma::mat run_var(const arma::mat& timeser, double lambdaf);
RcppExport SEXP _HighFreq_run_var(SEXP timeserSEXP, SEXP lambdafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    rcpp_result_gen = Rcpp::wrap(run_var(timeser, lambdaf));
    return rcpp_result_gen;
END_RCPP
}
// run_zscores
arma::mat run_zscores(const arma::mat& timeser, double lambdaf);
RcppExport SEXP _HighFreq_run_zscores(SEXP timeserSEXP, SEXP lambdafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    rcpp_result_gen = Rcpp::wrap(run_zscores(timeser, lambdaf));
    return rcpp_result_gen;
END_RCPP
}
// run_var_ohlc
arma::mat run_var_ohlc(const arma::mat& ohlc, double lambdaf);
RcppExport SEXP _HighFreq_run_var_ohlc(SEXP ohlcSEXP, SEXP lambdafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ohlc(ohlcSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    rcpp_result_gen = Rcpp::wrap(run_var_ohlc(ohlc, lambdaf));
    return rcpp_result_gen;
END_RCPP
}
// push_cov2cor
void push_cov2cor(arma::mat& covmat);
RcppExport SEXP _HighFreq_push_cov2cor(SEXP covmatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type covmat(covmatSEXP);
    push_cov2cor(covmat);
    return R_NilValue;
END_RCPP
}
// push_covar
void push_covar(const arma::rowvec& retsn, arma::mat& covmat, arma::rowvec& meanv, const double& lambdacov);
RcppExport SEXP _HighFreq_push_covar(SEXP retsnSEXP, SEXP covmatSEXP, SEXP meanvSEXP, SEXP lambdacovSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type retsn(retsnSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type meanv(meanvSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdacov(lambdacovSEXP);
    push_covar(retsn, covmat, meanv, lambdacov);
    return R_NilValue;
END_RCPP
}
// push_eigen
void push_eigen(const arma::rowvec& retsn, arma::mat& covmat, arma::vec& eigenval, arma::mat& eigenvec, arma::rowvec& eigenret, arma::rowvec& meanv, const double& lambdacov);
RcppExport SEXP _HighFreq_push_eigen(SEXP retsnSEXP, SEXP covmatSEXP, SEXP eigenvalSEXP, SEXP eigenvecSEXP, SEXP eigenretSEXP, SEXP meanvSEXP, SEXP lambdacovSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type retsn(retsnSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eigenvec(eigenvecSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type eigenret(eigenretSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type meanv(meanvSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdacov(lambdacovSEXP);
    push_eigen(retsn, covmat, eigenval, eigenvec, eigenret, meanv, lambdacov);
    return R_NilValue;
END_RCPP
}
// push_sga
void push_sga(const arma::rowvec& retsn, arma::rowvec& eigenval, arma::mat& eigenvec, arma::rowvec& eigenret, arma::rowvec& meanv, arma::rowvec& varv, const double& lambdaf, const double& gamma);
RcppExport SEXP _HighFreq_push_sga(SEXP retsnSEXP, SEXP eigenvalSEXP, SEXP eigenvecSEXP, SEXP eigenretSEXP, SEXP meanvSEXP, SEXP varvSEXP, SEXP lambdafSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type retsn(retsnSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type eigenvec(eigenvecSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type eigenret(eigenretSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type meanv(meanvSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type varv(varvSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma(gammaSEXP);
    push_sga(retsn, eigenval, eigenvec, eigenret, meanv, varv, lambdaf, gamma);
    return R_NilValue;
END_RCPP
}
// run_covar
arma::mat run_covar(const arma::mat& timeser, double lambdaf);
RcppExport SEXP _HighFreq_run_covar(SEXP timeserSEXP, SEXP lambdafSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    rcpp_result_gen = Rcpp::wrap(run_covar(timeser, lambdaf));
    return rcpp_result_gen;
END_RCPP
}
// run_autocovar
arma::mat run_autocovar(const arma::mat& timeser, double lambdaf, arma::uword lagg);
RcppExport SEXP _HighFreq_run_autocovar(SEXP timeserSEXP, SEXP lambdafSEXP, SEXP laggSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lagg(laggSEXP);
    rcpp_result_gen = Rcpp::wrap(run_autocovar(timeser, lambdaf, lagg));
    return rcpp_result_gen;
END_RCPP
}
// run_reg
arma::mat run_reg(const arma::mat& respv, const arma::mat& predm, double lambdaf, Rcpp::List controll);
RcppExport SEXP _HighFreq_run_reg(SEXP respvSEXP, SEXP predmSEXP, SEXP lambdafSEXP, SEXP controllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type respv(respvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type predm(predmSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type controll(controllSEXP);
    rcpp_result_gen = Rcpp::wrap(run_reg(respv, predm, lambdaf, controll));
    return rcpp_result_gen;
END_RCPP
}
// calc_mean
arma::mat calc_mean(const arma::mat& timeser, std::string method, double confl);
RcppExport SEXP _HighFreq_calc_mean(SEXP timeserSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_mean(timeser, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// calc_varvec
double calc_varvec(const arma::vec& timeser);
RcppExport SEXP _HighFreq_calc_varvec(SEXP timeserSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type timeser(timeserSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_varvec(timeser));
    return rcpp_result_gen;
END_RCPP
}
// calc_var
arma::mat calc_var(const arma::mat& timeser, std::string method, double confl);
RcppExport SEXP _HighFreq_calc_var(SEXP timeserSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var(timeser, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// calc_covar
arma::mat calc_covar(const arma::mat& timeser, std::string method, double confl);
RcppExport SEXP _HighFreq_calc_covar(SEXP timeserSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_covar(timeser, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// calc_var_ag
arma::mat calc_var_ag(const arma::mat& pricev, arma::uword step);
RcppExport SEXP _HighFreq_calc_var_ag(SEXP pricevSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pricev(pricevSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var_ag(pricev, step));
    return rcpp_result_gen;
END_RCPP
}
// calc_var_ohlc
double calc_var_ohlc(const arma::mat& ohlc, std::string method, arma::colvec closel, bool scale, arma::colvec index);
RcppExport SEXP _HighFreq_calc_var_ohlc(SEXP ohlcSEXP, SEXP methodSEXP, SEXP closelSEXP, SEXP scaleSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ohlc(ohlcSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type closel(closelSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var_ohlc(ohlc, method, closel, scale, index));
    return rcpp_result_gen;
END_RCPP
}
// calc_var_ohlc_ag
double calc_var_ohlc_ag(const arma::mat& ohlc, arma::uword step, std::string method, arma::colvec closel, bool scale, arma::colvec index);
RcppExport SEXP _HighFreq_calc_var_ohlc_ag(SEXP ohlcSEXP, SEXP stepSEXP, SEXP methodSEXP, SEXP closelSEXP, SEXP scaleSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ohlc(ohlcSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type closel(closelSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_var_ohlc_ag(ohlc, step, method, closel, scale, index));
    return rcpp_result_gen;
END_RCPP
}
// calc_skew
arma::mat calc_skew(const arma::mat& timeser, std::string method, double confl);
RcppExport SEXP _HighFreq_calc_skew(SEXP timeserSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_skew(timeser, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// calc_kurtosis
arma::mat calc_kurtosis(const arma::mat& timeser, std::string method, double confl);
RcppExport SEXP _HighFreq_calc_kurtosis(SEXP timeserSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_kurtosis(timeser, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// calc_hurst
arma::mat calc_hurst(const arma::mat& timeser, const arma::vec& aggv);
RcppExport SEXP _HighFreq_calc_hurst(SEXP timeserSEXP, SEXP aggvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type aggv(aggvSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_hurst(timeser, aggv));
    return rcpp_result_gen;
END_RCPP
}
// calc_hurst_ohlc
double calc_hurst_ohlc(const arma::mat& ohlc, arma::uword step, std::string method, arma::colvec closel, bool scale, arma::colvec index);
RcppExport SEXP _HighFreq_calc_hurst_ohlc(SEXP ohlcSEXP, SEXP stepSEXP, SEXP methodSEXP, SEXP closelSEXP, SEXP scaleSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ohlc(ohlcSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type closel(closelSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_hurst_ohlc(ohlc, step, method, closel, scale, index));
    return rcpp_result_gen;
END_RCPP
}
// calc_lm
Rcpp::List calc_lm(const arma::vec& respv, const arma::mat& predm);
RcppExport SEXP _HighFreq_calc_lm(SEXP respvSEXP, SEXP predmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type respv(respvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type predm(predmSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lm(respv, predm));
    return rcpp_result_gen;
END_RCPP
}
// calc_reg
arma::mat calc_reg(const arma::mat& respv, const arma::mat& predm, Rcpp::List controll);
RcppExport SEXP _HighFreq_calc_reg(SEXP respvSEXP, SEXP predmSEXP, SEXP controllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type respv(respvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type predm(predmSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type controll(controllSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_reg(respv, predm, controll));
    return rcpp_result_gen;
END_RCPP
}
// roll_mean
arma::mat roll_mean(const arma::mat& timeser, arma::uword lookb, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword stub, std::string method, double confl);
RcppExport SEXP _HighFreq_roll_mean(SEXP timeserSEXP, SEXP lookbSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP stubSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_mean(timeser, lookb, startp, endd, step, stub, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// roll_varvec
arma::vec roll_varvec(const arma::vec& timeser, arma::uword lookb);
RcppExport SEXP _HighFreq_roll_varvec(SEXP timeserSEXP, SEXP lookbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_varvec(timeser, lookb));
    return rcpp_result_gen;
END_RCPP
}
// roll_var
arma::mat roll_var(const arma::mat& timeser, arma::uword lookb, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword stub, std::string method, double confl);
RcppExport SEXP _HighFreq_roll_var(SEXP timeserSEXP, SEXP lookbSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP stubSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var(timeser, lookb, startp, endd, step, stub, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// roll_var_ohlc
arma::vec roll_var_ohlc(const arma::mat& ohlc, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub, std::string method, bool scale, arma::colvec index);
RcppExport SEXP _HighFreq_roll_var_ohlc(SEXP ohlcSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP, SEXP methodSEXP, SEXP scaleSEXP, SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ohlc(ohlcSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_var_ohlc(ohlc, startp, endd, step, lookb, stub, method, scale, index));
    return rcpp_result_gen;
END_RCPP
}
// roll_skew
arma::mat roll_skew(const arma::mat& timeser, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub, std::string method, double confl);
RcppExport SEXP _HighFreq_roll_skew(SEXP timeserSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_skew(timeser, startp, endd, step, lookb, stub, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// roll_kurtosis
arma::mat roll_kurtosis(const arma::mat& timeser, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub, std::string method, double confl);
RcppExport SEXP _HighFreq_roll_kurtosis(SEXP timeserSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP, SEXP methodSEXP, SEXP conflSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_kurtosis(timeser, startp, endd, step, lookb, stub, method, confl));
    return rcpp_result_gen;
END_RCPP
}
// roll_reg
arma::mat roll_reg(const arma::mat& respv, const arma::mat& predm, Rcpp::List controll, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub);
RcppExport SEXP _HighFreq_roll_reg(SEXP respvSEXP, SEXP predmSEXP, SEXP controllSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type respv(respvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type predm(predmSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type controll(controllSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_reg(respv, predm, controll, startp, endd, step, lookb, stub));
    return rcpp_result_gen;
END_RCPP
}
// roll_scale
arma::mat roll_scale(const arma::mat& matrix, arma::uword lookb, bool center, bool scale, bool use_median);
RcppExport SEXP _HighFreq_roll_scale(SEXP matrixSEXP, SEXP lookbSEXP, SEXP centerSEXP, SEXP scaleSEXP, SEXP use_medianSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_median(use_medianSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_scale(matrix, lookb, center, scale, use_median));
    return rcpp_result_gen;
END_RCPP
}
// run_scale
void run_scale(arma::mat& timeser, double lambdaf, bool center, bool scale);
RcppExport SEXP _HighFreq_run_scale(SEXP timeserSEXP, SEXP lambdafSEXP, SEXP centerSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< bool >::type center(centerSEXP);
    Rcpp::traits::input_parameter< bool >::type scale(scaleSEXP);
    run_scale(timeser, lambdaf, center, scale);
    return R_NilValue;
END_RCPP
}
// roll_zscores
arma::vec roll_zscores(const arma::mat& respv, const arma::mat& predm, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub);
RcppExport SEXP _HighFreq_roll_zscores(SEXP respvSEXP, SEXP predmSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type respv(respvSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type predm(predmSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_zscores(respv, predm, startp, endd, step, lookb, stub));
    return rcpp_result_gen;
END_RCPP
}
// roll_moment
arma::mat roll_moment(const arma::mat& timeser, std::string funame, std::string method, double confl, arma::uvec startp, arma::uvec endd, arma::uword step, arma::uword lookb, arma::uword stub);
RcppExport SEXP _HighFreq_roll_moment(SEXP timeserSEXP, SEXP funameSEXP, SEXP methodSEXP, SEXP conflSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP stepSEXP, SEXP lookbSEXP, SEXP stubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type timeser(timeserSEXP);
    Rcpp::traits::input_parameter< std::string >::type funame(funameSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type confl(conflSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type step(stepSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type lookb(lookbSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type stub(stubSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_moment(timeser, funame, method, confl, startp, endd, step, lookb, stub));
    return rcpp_result_gen;
END_RCPP
}
// sim_garch
arma::mat sim_garch(double omegac, double alphac, double betac, arma::mat& innov, bool is_random);
RcppExport SEXP _HighFreq_sim_garch(SEXP omegacSEXP, SEXP alphacSEXP, SEXP betacSEXP, SEXP innovSEXP, SEXP is_randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omegac(omegacSEXP);
    Rcpp::traits::input_parameter< double >::type alphac(alphacSEXP);
    Rcpp::traits::input_parameter< double >::type betac(betacSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type innov(innovSEXP);
    Rcpp::traits::input_parameter< bool >::type is_random(is_randomSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_garch(omegac, alphac, betac, innov, is_random));
    return rcpp_result_gen;
END_RCPP
}
// sim_ou
arma::mat sim_ou(double prici, double priceq, double theta, arma::mat& innov);
RcppExport SEXP _HighFreq_sim_ou(SEXP priciSEXP, SEXP priceqSEXP, SEXP thetaSEXP, SEXP innovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type prici(priciSEXP);
    Rcpp::traits::input_parameter< double >::type priceq(priceqSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type innov(innovSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ou(prici, priceq, theta, innov));
    return rcpp_result_gen;
END_RCPP
}
// sim_schwartz
arma::mat sim_schwartz(double prici, double priceq, double theta, arma::mat& innov);
RcppExport SEXP _HighFreq_sim_schwartz(SEXP priciSEXP, SEXP priceqSEXP, SEXP thetaSEXP, SEXP innovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type prici(priciSEXP);
    Rcpp::traits::input_parameter< double >::type priceq(priceqSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type innov(innovSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_schwartz(prici, priceq, theta, innov));
    return rcpp_result_gen;
END_RCPP
}
// sim_ar
arma::mat sim_ar(arma::mat& coeff, const arma::mat& innov);
RcppExport SEXP _HighFreq_sim_ar(SEXP coeffSEXP, SEXP innovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type innov(innovSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_ar(coeff, innov));
    return rcpp_result_gen;
END_RCPP
}
// sim_df
arma::mat sim_df(double prici, double priceq, double theta, arma::mat& coeff, arma::mat& innov);
RcppExport SEXP _HighFreq_sim_df(SEXP priciSEXP, SEXP priceqSEXP, SEXP thetaSEXP, SEXP coeffSEXP, SEXP innovSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type prici(priciSEXP);
    Rcpp::traits::input_parameter< double >::type priceq(priceqSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type innov(innovSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_df(prici, priceq, theta, coeff, innov));
    return rcpp_result_gen;
END_RCPP
}
// lik_garch
double lik_garch(double omegac, double alphac, double betac, arma::mat& returns, double minval);
RcppExport SEXP _HighFreq_lik_garch(SEXP omegacSEXP, SEXP alphacSEXP, SEXP betacSEXP, SEXP returnsSEXP, SEXP minvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type omegac(omegacSEXP);
    Rcpp::traits::input_parameter< double >::type alphac(alphacSEXP);
    Rcpp::traits::input_parameter< double >::type betac(betacSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< double >::type minval(minvalSEXP);
    rcpp_result_gen = Rcpp::wrap(lik_garch(omegac, alphac, betac, returns, minval));
    return rcpp_result_gen;
END_RCPP
}
// sim_portfoptim
arma::mat sim_portfoptim(const arma::mat& rets, const arma::uword& dimax, const double& lambdaf, const double& lambdacov, const double& lambdaw);
RcppExport SEXP _HighFreq_sim_portfoptim(SEXP retsSEXP, SEXP dimaxSEXP, SEXP lambdafSEXP, SEXP lambdacovSEXP, SEXP lambdawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type rets(retsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type dimax(dimaxSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdacov(lambdacovSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambdaw(lambdawSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_portfoptim(rets, dimax, lambdaf, lambdacov, lambdaw));
    return rcpp_result_gen;
END_RCPP
}
// calc_weights
arma::vec calc_weights(const arma::mat& returns, Rcpp::List controll);
RcppExport SEXP _HighFreq_calc_weights(SEXP returnsSEXP, SEXP controllSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type returns(returnsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type controll(controllSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_weights(returns, controll));
    return rcpp_result_gen;
END_RCPP
}
// roll_portf
arma::mat roll_portf(const arma::mat& retx, const arma::mat& retp, Rcpp::List controll, arma::uvec startp, arma::uvec endd, double lambdaf, double coeff, double bidask);
RcppExport SEXP _HighFreq_roll_portf(SEXP retxSEXP, SEXP retpSEXP, SEXP controllSEXP, SEXP startpSEXP, SEXP enddSEXP, SEXP lambdafSEXP, SEXP coeffSEXP, SEXP bidaskSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type retx(retxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type retp(retpSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type controll(controllSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type startp(startpSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type endd(enddSEXP);
    Rcpp::traits::input_parameter< double >::type lambdaf(lambdafSEXP);
    Rcpp::traits::input_parameter< double >::type coeff(coeffSEXP);
    Rcpp::traits::input_parameter< double >::type bidask(bidaskSEXP);
    rcpp_result_gen = Rcpp::wrap(roll_portf(retx, retp, controll, startp, endd, lambdaf, coeff, bidask));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HighFreq_param_reg", (DL_FUNC) &_HighFreq_param_reg, 7},
    {"_HighFreq_param_portf", (DL_FUNC) &_HighFreq_param_portf, 9},
    {"_HighFreq_lag_vec", (DL_FUNC) &_HighFreq_lag_vec, 3},
    {"_HighFreq_lagit", (DL_FUNC) &_HighFreq_lagit, 3},
    {"_HighFreq_diff_vec", (DL_FUNC) &_HighFreq_diff_vec, 3},
    {"_HighFreq_diffit", (DL_FUNC) &_HighFreq_diffit, 3},
    {"_HighFreq_calc_endpoints", (DL_FUNC) &_HighFreq_calc_endpoints, 4},
    {"_HighFreq_calc_startpoints", (DL_FUNC) &_HighFreq_calc_startpoints, 2},
    {"_HighFreq_roll_count", (DL_FUNC) &_HighFreq_roll_count, 1},
    {"_HighFreq_encode_it", (DL_FUNC) &_HighFreq_encode_it, 1},
    {"_HighFreq_decode_it", (DL_FUNC) &_HighFreq_decode_it, 1},
    {"_HighFreq_calc_ranks", (DL_FUNC) &_HighFreq_calc_ranks, 1},
    {"_HighFreq_calc_ranks_stl", (DL_FUNC) &_HighFreq_calc_ranks_stl, 1},
    {"_HighFreq_remove_dup", (DL_FUNC) &_HighFreq_remove_dup, 1},
    {"_HighFreq_mult_mat", (DL_FUNC) &_HighFreq_mult_mat, 3},
    {"_HighFreq_mult_mat_ref", (DL_FUNC) &_HighFreq_mult_mat_ref, 3},
    {"_HighFreq_calc_eigen", (DL_FUNC) &_HighFreq_calc_eigen, 3},
    {"_HighFreq_calc_eigenp", (DL_FUNC) &_HighFreq_calc_eigenp, 2},
    {"_HighFreq_calc_inv", (DL_FUNC) &_HighFreq_calc_inv, 3},
    {"_HighFreq_calc_invsvd", (DL_FUNC) &_HighFreq_calc_invsvd, 3},
    {"_HighFreq_calc_invrec", (DL_FUNC) &_HighFreq_calc_invrec, 3},
    {"_HighFreq_calc_invref", (DL_FUNC) &_HighFreq_calc_invref, 1},
    {"_HighFreq_calc_scale", (DL_FUNC) &_HighFreq_calc_scale, 4},
    {"_HighFreq_agg_ohlc", (DL_FUNC) &_HighFreq_agg_ohlc, 1},
    {"_HighFreq_roll_ohlc", (DL_FUNC) &_HighFreq_roll_ohlc, 2},
    {"_HighFreq_roll_conv", (DL_FUNC) &_HighFreq_roll_conv, 2},
    {"_HighFreq_roll_sum", (DL_FUNC) &_HighFreq_roll_sum, 3},
    {"_HighFreq_roll_sumep", (DL_FUNC) &_HighFreq_roll_sumep, 6},
    {"_HighFreq_roll_sumw", (DL_FUNC) &_HighFreq_roll_sumw, 5},
    {"_HighFreq_run_mean", (DL_FUNC) &_HighFreq_run_mean, 3},
    {"_HighFreq_run_max", (DL_FUNC) &_HighFreq_run_max, 2},
    {"_HighFreq_run_min", (DL_FUNC) &_HighFreq_run_min, 2},
    {"_HighFreq_run_var", (DL_FUNC) &_HighFreq_run_var, 2},
    {"_HighFreq_run_zscores", (DL_FUNC) &_HighFreq_run_zscores, 2},
    {"_HighFreq_run_var_ohlc", (DL_FUNC) &_HighFreq_run_var_ohlc, 2},
    {"_HighFreq_push_cov2cor", (DL_FUNC) &_HighFreq_push_cov2cor, 1},
    {"_HighFreq_push_covar", (DL_FUNC) &_HighFreq_push_covar, 4},
    {"_HighFreq_push_eigen", (DL_FUNC) &_HighFreq_push_eigen, 7},
    {"_HighFreq_push_sga", (DL_FUNC) &_HighFreq_push_sga, 8},
    {"_HighFreq_run_covar", (DL_FUNC) &_HighFreq_run_covar, 2},
    {"_HighFreq_run_autocovar", (DL_FUNC) &_HighFreq_run_autocovar, 3},
    {"_HighFreq_run_reg", (DL_FUNC) &_HighFreq_run_reg, 4},
    {"_HighFreq_calc_mean", (DL_FUNC) &_HighFreq_calc_mean, 3},
    {"_HighFreq_calc_varvec", (DL_FUNC) &_HighFreq_calc_varvec, 1},
    {"_HighFreq_calc_var", (DL_FUNC) &_HighFreq_calc_var, 3},
    {"_HighFreq_calc_covar", (DL_FUNC) &_HighFreq_calc_covar, 3},
    {"_HighFreq_calc_var_ag", (DL_FUNC) &_HighFreq_calc_var_ag, 2},
    {"_HighFreq_calc_var_ohlc", (DL_FUNC) &_HighFreq_calc_var_ohlc, 5},
    {"_HighFreq_calc_var_ohlc_ag", (DL_FUNC) &_HighFreq_calc_var_ohlc_ag, 6},
    {"_HighFreq_calc_skew", (DL_FUNC) &_HighFreq_calc_skew, 3},
    {"_HighFreq_calc_kurtosis", (DL_FUNC) &_HighFreq_calc_kurtosis, 3},
    {"_HighFreq_calc_hurst", (DL_FUNC) &_HighFreq_calc_hurst, 2},
    {"_HighFreq_calc_hurst_ohlc", (DL_FUNC) &_HighFreq_calc_hurst_ohlc, 6},
    {"_HighFreq_calc_lm", (DL_FUNC) &_HighFreq_calc_lm, 2},
    {"_HighFreq_calc_reg", (DL_FUNC) &_HighFreq_calc_reg, 3},
    {"_HighFreq_roll_mean", (DL_FUNC) &_HighFreq_roll_mean, 8},
    {"_HighFreq_roll_varvec", (DL_FUNC) &_HighFreq_roll_varvec, 2},
    {"_HighFreq_roll_var", (DL_FUNC) &_HighFreq_roll_var, 8},
    {"_HighFreq_roll_var_ohlc", (DL_FUNC) &_HighFreq_roll_var_ohlc, 9},
    {"_HighFreq_roll_skew", (DL_FUNC) &_HighFreq_roll_skew, 8},
    {"_HighFreq_roll_kurtosis", (DL_FUNC) &_HighFreq_roll_kurtosis, 8},
    {"_HighFreq_roll_reg", (DL_FUNC) &_HighFreq_roll_reg, 8},
    {"_HighFreq_roll_scale", (DL_FUNC) &_HighFreq_roll_scale, 5},
    {"_HighFreq_run_scale", (DL_FUNC) &_HighFreq_run_scale, 4},
    {"_HighFreq_roll_zscores", (DL_FUNC) &_HighFreq_roll_zscores, 7},
    {"_HighFreq_roll_moment", (DL_FUNC) &_HighFreq_roll_moment, 9},
    {"_HighFreq_sim_garch", (DL_FUNC) &_HighFreq_sim_garch, 5},
    {"_HighFreq_sim_ou", (DL_FUNC) &_HighFreq_sim_ou, 4},
    {"_HighFreq_sim_schwartz", (DL_FUNC) &_HighFreq_sim_schwartz, 4},
    {"_HighFreq_sim_ar", (DL_FUNC) &_HighFreq_sim_ar, 2},
    {"_HighFreq_sim_df", (DL_FUNC) &_HighFreq_sim_df, 5},
    {"_HighFreq_lik_garch", (DL_FUNC) &_HighFreq_lik_garch, 5},
    {"_HighFreq_sim_portfoptim", (DL_FUNC) &_HighFreq_sim_portfoptim, 5},
    {"_HighFreq_calc_weights", (DL_FUNC) &_HighFreq_calc_weights, 2},
    {"_HighFreq_roll_portf", (DL_FUNC) &_HighFreq_roll_portf, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_HighFreq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
