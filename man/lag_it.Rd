% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{lag_it}
\alias{lag_it}
\title{Apply a lag to a \emph{matrix} or \emph{time series} using
\code{RcppArmadillo}.}
\usage{
lag_it(mat_rix, lagg = 1L)
}
\arguments{
\item{\code{mat_rix}}{A \emph{matrix} or \emph{time series}.}

\item{\code{lagg}}{An \emph{integer} equal to the number of periods to lag
(the default is \code{lagg=1}).}
}
\value{
A \emph{matrix} with the same dimensions as the input
  argument \code{mat_rix}.
}
\description{
Apply a lag to a \emph{matrix} or \emph{time series} using
\code{RcppArmadillo}.
}
\details{
The function \code{lag_it()} applies a lag to the input
  \emph{matrix} by shifting its rows by the number equal to the argument
  \code{lagg}. For positive \code{lagg} values, the rows are shifted forward
  (down), and for negative \code{lagg} values they are shifted backward
  (up). The output \emph{matrix} is padded with either the first or the last
  row, to maintain it original dimensions. The function \code{lag_it()} can
  be applied to vectors in the form of single-column matrices.
}
\examples{
\dontrun{
# Create a matrix of random returns
re_turns <- matrix(rnorm(5e6), nc=5)
# Compare lag_it() with rutils::lag_it()
all.equal(HighFreq::lag_it(re_turns), 
  rutils::lag_it(re_turns))
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  rcpp=HighFreq::lag_it(re_turns),
  rcode=rutils::lag_it(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
