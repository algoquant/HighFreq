% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{sim_ou}
\alias{sim_ou}
\title{Simulate an \emph{Ornstein-Uhlenbeck} process using \emph{Rcpp}.}
\usage{
sim_ou(eq_price, volat, theta, innov)
}
\arguments{
\item{\code{eq_price}}{The equilibrium price.}

\item{\code{volat}}{The volatility of returns.}

\item{\code{theta}}{The strength of mean reversion.}

\item{\code{innov}}{A \emph{vector} of innovations (random numbers).}
}
\value{
A column \emph{vector} representing the \emph{time series} of
  log prices, with the same length as the argument \code{innov}.
}
\description{
Simulate an \emph{Ornstein-Uhlenbeck} process using \emph{Rcpp}.
}
\details{
The function \code{sim_ou()} simulates an \emph{Ornstein-Uhlenbeck}
  process using fast \emph{Rcpp} \code{C++} code.
  It returns a column \emph{vector} representing the \emph{time series} of
  log prices.
  The function \code{sim_ou()} simulates the percentage returns as equal to
  the difference between the equilibrium price \code{eq_price} minus the
  latest price, times the mean reversion parameter \code{theta}, plus a
  random innovation.
  The log prices are calculated as the sum of returns (not compounded), so
  they can become negative.
}
\examples{
\dontrun{
# Define the Ornstein-Uhlenbeck model parameters
eq_price <- 5.0
vol_at <- 0.01
the_ta <- 0.01
# Simulate Ornstein-Uhlenbeck process using Rcpp
price_s <- HighFreq::sim_ou(eq_price=eq_price, volat=vol_at, theta=the_ta, innov=rnorm(1000))
}

}
