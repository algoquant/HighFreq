% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_mean}
\alias{roll_mean}
\title{Calculate a \emph{matrix} of mean (location) estimates over a rolling
look-back interval attached at the end points of a \emph{time series} or a
\emph{matrix}.}
\usage{
roll_mean(
  timeser,
  lookb = 1L,
  startp = 0L,
  endd = 0L,
  step = 1L,
  stub = 0L,
  method = "moment",
  confl = 0.75
)
}
\arguments{
\item{\code{lookb}}{The number of end points in the look-back interval
(the default is \code{lookb = 1}).}

\item{\code{timeser}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{startp}}{An \emph{integer} vector of start points (the default
is \code{startp = 0}).}

\item{\code{endd}}{An \emph{integer} vector of end points (the default is
\code{endd = 0}).}

\item{\code{step}}{The number of time periods between the end points (the
default is \code{step = 1}).}

\item{\code{stub}}{An \emph{integer} value equal to the first end point for
calculating the end points (the default is \code{stub = 0}).}

\item{\code{method}}{A \emph{character string} representing the type of mean 
measure of (the default is \code{method = "moment"}).}
}
\value{
A \emph{matrix} of mean (location) estimates with the same number of
  columns as the input time series \code{timeser}, and the number of rows
  equal to the number of end points.
}
\description{
Calculate a \emph{matrix} of mean (location) estimates over a rolling
look-back interval attached at the end points of a \emph{time series} or a
\emph{matrix}.
}
\details{
The function \code{roll_mean()} calculates a \emph{matrix} of mean
  (location) estimates over rolling look-back intervals attached at the end
  points of the \emph{time series} \code{timeser}.
  
  The function \code{roll_mean()} performs a loop over the end points, and at
  each end point it subsets the time series \code{timeser} over a look-back
  interval equal to \code{lookb} number of end points.
  
  It passes the subset time series to the function \code{calc_mean()}, which
  calculates the mean (location).
  See the function \code{calc_mean()} for a description of the mean methods.
  
  If the arguments \code{endd} and \code{startp} are not given then it
  first calculates a vector of end points separated by \code{step} time
  periods. It calculates the end points along the rows of \code{timeser}
  using the function \code{calc_endpoints()}, with the number of time
  periods between the end points equal to \code{step} time periods.

  For example, the rolling mean at \code{25} day end points, with a
  \code{75} day look-back, can be calculated using the parameters
  \code{step = 25} and \code{lookb = 3}.

  The function \code{roll_mean()} with the parameter \code{step = 1}
  performs the same calculation as the function \code{roll_mean()} from
  package
  \href{https://cran.r-project.org/web/packages/RcppRoll/index.html}{RcppRoll},
  but it's several times faster because it uses \code{C++}
  \code{RcppArmadillo} code.

  The function \code{roll_mean()} is implemented in \code{RcppArmadillo}
  \code{RcppArmadillo} \code{C++} code, which makes it several times faster
  than \code{R} code.

  If only a simple rolling mean is required (not the median) then other
  functions like \code{roll_sum()} or \code{roll_vec()} may be even faster.
}
\examples{
\dontrun{
# Define time series of returns using package rutils
retp <- na.omit(rutils::etfenv$returns$VTI)
# Calculate the rolling means at 25 day end points, with a 75 day look-back
meanv <- HighFreq::roll_mean(retp, lookb=3, step=25)
# Compare the mean estimates over 11-period look-back intervals
all.equal(HighFreq::roll_mean(retp, lookb=11)[-(1:10), ], 
  drop(RcppRoll::roll_mean(retp, n=11)), check.attributes=FALSE)
# Define end points and start points
endd <- HighFreq::calc_endpoints(NROW(retp), step=25)
startp <- HighFreq::calc_startpoints(endd, lookb=3)
# Calculate the rolling means using RcppArmadillo
meanv <- HighFreq::roll_mean(retp, startp=startp, endd=endd)
# Calculate the rolling medians using RcppArmadillo
medianscpp <- HighFreq::roll_mean(retp, startp=startp, endd=endd, method="nonparametric")
# Calculate the rolling medians using R
medians = sapply(1:NROW(endd), function(i) {
  median(retp[startp[i]:endd[i] + 1])
})  # end sapply
all.equal(medians, drop(medianscpp))
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::roll_mean(retp, startp=startp, endd=endd, method="nonparametric"),
  Rcode=sapply(1:NROW(endd), function(i) {median(retp[startp[i]:endd[i] + 1])}),
  times=10))[, c(1, 4, 5)]
}  # end dontrun

}
