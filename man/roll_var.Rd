% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_var}
\alias{roll_var}
\title{Calculate a \emph{matrix} of dispersion (variance) estimates over a rolling
look-back interval attached at the end points of a \emph{time series} or a
\emph{matrix}.}
\usage{
roll_var(se_ries, step = 1L, look_back = 11L, method = "moment")
}
\arguments{
\item{\code{se_ries}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{step}}{The number of time periods between the end points.}

\item{\code{look_back}}{The number of end points in the look-back interval.}

\item{\code{method}}{A \emph{character} string representing the type of
measure of dispersion. (The default is the \code{method = "moment"}.)}
}
\value{
A \emph{matrix} with the same number of columns as the input time
  series \code{se_ries}, and the number of rows equal to the number of end
  points.
}
\description{
Calculate a \emph{matrix} of dispersion (variance) estimates over a rolling
look-back interval attached at the end points of a \emph{time series} or a
\emph{matrix}.
}
\details{
The function \code{roll_var()} calculates a \emph{matrix} of dispersion
  (variance) estimates over rolling look-back intervals attached at the end
  points of the \emph{time series} \code{se_ries}.
  
  It first calculates a vector of end points separated by \code{step} time
  periods. It calculates the end points along the rows of \code{se_ries}
  using the function \code{calc_endpoints()}, with the number of time
  periods between the end points equal to \code{step} time periods.
  
  It then performs a loop over the end points, and at each end point it
  subsets the time series \code{se_ries} over a look-back interval equal
  to \code{look_back} number of end points.
  
  It passes the subset time series to the function \code{calc_var()}, which
  calculates the dispersion.
  See the function \code{calc_var()} for a description of the dispersion
  methods.
  
  For example, the rolling variance at \code{25} day end points, with a
  \code{75} day look-back, can be calculated using the parameters
  \code{step = 25} and \code{look_back = 3}.

  The function \code{roll_var()} with the parameter \code{step = 1}
  performs the same calculation as the function \code{roll_var()} from
  package
  \href{https://cran.r-project.org/web/packages/RcppRoll/index.html}{RcppRoll},
  but it's several times faster because it uses \code{RcppArmadillo}
  \code{C++} code.

  The function \code{roll_var()} is implemented in \code{RcppArmadillo}
  \code{C++} code, so it's many times faster than the equivalent \code{R}
  code.
}
\examples{
\dontrun{
# Define time series of returns using package rutils
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
# Calculate the rolling variance at 25 day end points, with a 75 day look-back
vari_ance <- HighFreq::roll_var(re_turns, step=25, look_back=3)
# Compare the variance estimates over 11-period lookback intervals
all.equal(HighFreq::roll_var(re_turns, look_back=11)[-(1:10), ], 
  drop(RcppRoll::roll_var(re_turns, n=11)), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with RcppRoll
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::roll_var(re_turns, look_back=11),
  RcppRoll=RcppRoll::roll_var(re_turns, n=11),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}
}
