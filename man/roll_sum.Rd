% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_sum}
\alias{roll_sum}
\title{Calculate the rolling sums over a \emph{time series} or a \emph{matrix}
using \emph{Rcpp}.}
\usage{
roll_sum(tseries, look_back = 1L)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix}.}

\item{\code{look_back}}{The length of the look-back interval, equal to the
number of data points included in calculating the rolling sum (the default
is \code{look_back = 1}).}
}
\value{
A \emph{matrix} with the same dimensions as the input argument
  \code{tseries}.
}
\description{
Calculate the rolling sums over a \emph{time series} or a \emph{matrix}
using \emph{Rcpp}.
}
\details{
The function \code{roll_sum()} calculates the rolling sums over the
  columns of the data \code{tseries}.
  
  The function \code{roll_sum()} returns a \emph{matrix} with the same
  dimensions as the input argument \code{tseries}.

  The function \code{roll_sum()} uses the fast \code{RcppArmadillo} function
  \code{arma::cumsum()}, without explicit loops.
  The function \code{roll_sum()} is several times faster than
  \code{rutils::roll_sum()} which uses vectorized \code{R} code.
}
\examples{
\dontrun{
# Calculate historical returns
re_turns <- na.omit(rutils::etf_env$re_turns[, c("VTI", "IEF")])
# Define parameters
look_back <- 22
# Calculate rolling sums and compare with rutils::roll_sum()
c_sum <- HighFreq::roll_sum(re_turns, look_back=look_back)
r_sum <- rutils::roll_sum(re_turns, look_back=look_back)
all.equal(c_sum, coredata(r_sum), check.attributes=FALSE)
# Calculate rolling sums using R code
r_sum <- apply(zoo::coredata(re_turns), 2, cumsum)
lag_sum <- rbind(matrix(numeric(2*look_back), nc=2), r_sum[1:(NROW(r_sum) - look_back), ])
r_sum <- (r_sum - lag_sum)
all.equal(c_sum, r_sum, check.attributes=FALSE)
}

}
