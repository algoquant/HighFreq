% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_fun}
\alias{roll_fun}
\title{Calculate a \emph{matrix} of estimator values over a rolling look-back
interval attached at the end points of a \emph{time series} or a
\emph{matrix}.}
\usage{
roll_fun(
  tseries,
  fun = "calc_var",
  startp = 0L,
  endp = 0L,
  step = 1L,
  look_back = 1L,
  stub = 0L,
  method = "moment",
  con_fi = 0.75
)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{fun}}{A \emph{string} specifying the estimator function (the
default is \code{fun = "calc_var"}.)}

\item{\code{startp}}{An \emph{integer} vector of start points (the default
is \code{startp = 0}).}

\item{\code{endp}}{An \emph{integer} vector of end points (the default is 
\code{endp = 0}).}

\item{\code{step}}{The number of time periods between the end points (the
default is \code{step = 1}).}

\item{\code{look_back}}{The number of end points in the look-back interval
(the default is \code{look_back = 1}).}

\item{\code{stub}}{An \emph{integer} value equal to the first end point for
calculating the end points (the default is \code{stub = 0}).}

\item{\code{method}}{A \emph{string} specifying the type of the model for the
estimator (the default is \code{method = "moment"}.)}

\item{\code{con_fi}}{The confidence level for calculating the
quantiles (the default is \code{con_fi = 0.75}).}
}
\value{
A \emph{matrix} with the same number of columns as the input time
  series \code{tseries}, and the number of rows equal to the number of end
  points.
}
\description{
Calculate a \emph{matrix} of estimator values over a rolling look-back
interval attached at the end points of a \emph{time series} or a
\emph{matrix}.
}
\details{
The function \code{roll_fun()} calculates a \emph{matrix} of estimator
  values, over rolling look-back intervals attached at the end points of the
  \emph{time series} \code{tseries}.
  
  The function \code{roll_fun()} performs a loop over the end points, and at
  each end point it subsets the time series \code{tseries} over a look-back
  interval equal to \code{look_back} number of end points.
  
  It passes the subset time series to the function specified by the argument
  \code{fun}, which calculates the statistic.
  See the functions \code{calc_*()} for a description of the different
  methods.
  
  If the arguments \code{endp} and \code{startp} are not given then it
  first calculates a vector of end points separated by \code{step} time
  periods. It calculates the end points along the rows of \code{design}
  using the function \code{calc_endpoints()}, with the number of time
  periods between the end points equal to \code{step} time periods.

  For example, the rolling variance at \code{25} day end points, with a
  \code{75} day look-back, can be calculated using the parameters
  \code{step = 25} and \code{look_back = 3}.

  The function \code{roll_fun()} is implemented in \code{RcppArmadillo}
  \code{C++} code, so it's many times faster than the equivalent \code{R}
  code.
}
\examples{
\dontrun{
# Define time series of returns using package rutils
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
# Calculate the rolling variance at 25 day end points, with a 75 day look-back
var_rollfun <- HighFreq::roll_fun(re_turns, fun="calc_var", step=25, look_back=3)
# Calculate the rolling variance using roll_var()
var_roll <- HighFreq::roll_var(re_turns, step=25, look_back=3)
# Compare the two methods
all.equal(var_rollfun, var_roll, check.attributes=FALSE)
# Define end points and start points
end_p <- HighFreq::calc_endpoints(NROW(re_turns), step=25)
start_p <- HighFreq::calc_startpoints(end_p, look_back=3)
# Calculate the rolling variance using RcppArmadillo
var_rollfun <- HighFreq::roll_fun(re_turns, fun="calc_var", startp=start_p, endp=end_p)
# Calculate the rolling variance using R code
var_roll <- sapply(1:NROW(end_p), function(it) {
  var(re_turns[start_p[it]:end_p[it]+1, ])
})  # end sapply
# Compare the two methods
all.equal(drop(var_rollfun), var_roll, check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::roll_fun(re_turns, fun="calc_var", startp=start_p, endp=end_p),
  Rcode=sapply(1:NROW(end_p), function(it) {
    var(re_turns[start_p[it]:end_p[it]+1, ])
  }),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}
}
