% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_skew}
\alias{calc_skew}
\title{Calculate the skewness of the columns of a \emph{time series} or a
\emph{matrix} using \code{RcppArmadillo}.}
\usage{
calc_skew(se_ries, method = "pearson", al_pha = 0.25)
}
\arguments{
\item{\code{se_ries}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{method}}{A \emph{string} specifying the type of skewness (see
Details). (The default is the \code{method = "pearson"}.)}

\item{\code{al_pha}}{The confidence level for calculating the quantiles.
(the default is \code{al_pha = 0.25}).}
}
\value{
A single-row matrix with the skewness of the columns of
  \code{se_ries}.
}
\description{
Calculate the skewness of the columns of a \emph{time series} or a
\emph{matrix} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_skew()} calculates the skewness of the columns of
  a \emph{time series} or a \emph{matrix} of data using \code{RcppArmadillo}
  \code{C++} code.

  If \code{method = "pearson"} (the default) then \code{calc_skew()}
  calculates the Pearson skewness using the third moment of the data.

  If \code{method = "quantile"} then it calculates the skewness using the
  differences between the quantiles of the data.

  If \code{method = "nonparametric"} then it calculates the skewness as the
  difference between the mean of the data minus its median, divided by the
  standard deviation.
  
  If the number of rows of \code{se_ries} is less than \code{3} then it
  returns zeros.
  
  The code examples below compare the function \code{calc_skew()} with the
  skewness calculated using \code{R} code.
}
\examples{
\dontrun{
# Calculate VTI returns
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
# Calculate the Pearson skewness
HighFreq::calc_skew(re_turns)
# Compare HighFreq::calc_skew() with Pearson skewness
calc_skewr <- function(x) {
  x <- (x-mean(x)); nr <- NROW(x);
  nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end calc_skewr
all.equal(HighFreq::calc_skew(re_turns), 
  calc_skewr(re_turns), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::calc_skew(re_turns),
  Rcode=calc_skewr(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Calculate the quantile skewness
HighFreq::calc_skew(re_turns, method = "quantile", al_pha = 0.1)
# Compare HighFreq::calc_skew() with quantile skewness
calc_skewq <- function(x) {
  	quantile_s <- quantile(x, c(0.25, 0.5, 0.75), type=5)
  	(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(drop(HighFreq::calc_skew(re_turns, method = "quantile")), 
  calc_skewq(re_turns), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_skew(re_turns, method = "quantile"),
  Rcode=calc_skewq(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Calculate the nonparametric skewness
HighFreq::calc_skew(re_turns, method = "nonparametric")
# Compare HighFreq::calc_skew() with R nonparametric skewness
all.equal(drop(HighFreq::calc_skew(re_turns, method = "nonparametric")), 
  (mean(re_turns)-median(re_turns))/sd(re_turns), 
  check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_skew(re_turns, method = "nonparametric"),
  Rcode=(mean(re_turns)-median(re_turns))/sd(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
