% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_skew}
\alias{calc_skew}
\title{Calculate the skewness of the columns of a \emph{time series} or a
\emph{matrix} using \code{RcppArmadillo}.}
\usage{
calc_skew(timeser, method = "moment", confl = 0.75)
}
\arguments{
\item{\code{timeser}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{method}}{A \emph{character string} specifying the type of the
skewness model (the default is \code{method = "moment"} - see Details).}

\item{\code{confl}}{The confidence level for calculating the quantiles of
returns (the default is \code{confl = 0.75}).}
}
\value{
A single-row matrix with the skewness of the columns of
  \code{timeser}.
}
\description{
Calculate the skewness of the columns of a \emph{time series} or a
\emph{matrix} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_skew()} calculates the skewness of the columns of
  a \emph{time series} or a \emph{matrix} of data using \code{C++}
  \code{RcppArmadillo} code.

  If \code{method = "moment"} (the default) then \code{calc_skew()}
  calculates the skewness as the third moment of the data.

  If \code{method = "quantile"} then it calculates the skewness
  \eqn{\varsigma} from the differences between the quantiles of the data as
  follows:
  \deqn{
    \varsigma = \frac{q_{\alpha} + q_{1-\alpha} - 2 q_{0.5}}{q_{\alpha} - q_{1-\alpha}}
  }
  Where \eqn{\alpha} is the confidence level for calculating the quantiles.

  If \code{method = "nonparametric"} then it calculates the skewness as the
  difference between the mean of the data minus its median, divided by the
  standard deviation.
  
  If the number of rows of \code{timeser} is less than \code{3} then it
  returns zeros.
  
  The code examples below compare the function \code{calc_skew()} with the
  skewness calculated using \code{R} code.
}
\examples{
\dontrun{
# Define a single-column time series of returns
retp <- na.omit(rutils::etfenv$returns$VTI)
# Calculate the moment skewness
HighFreq::calc_skew(retp)
# Calculate the moment skewness in R
calc_skewr <- function(x) {
  x <- (x-mean(x))
  sum(x^3)/var(x)^1.5/NROW(x)
}  # end calc_skewr
all.equal(HighFreq::calc_skew(retp), 
  calc_skewr(retp), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::calc_skew(retp),
  Rcode=calc_skewr(retp),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Calculate the quantile skewness
HighFreq::calc_skew(retp, method="quantile", confl=0.9)
# Calculate the quantile skewness in R
calc_skewq <- function(x, a = 0.75) {
  	quantiles <- quantile(x, c(1-a, 0.5, a), type=5)
  	(quantiles[3] + quantiles[1] - 2*quantiles[2])/(quantiles[3] - quantiles[1])
}  # end calc_skewq
all.equal(drop(HighFreq::calc_skew(retp, method="quantile", confl=0.9)), 
  calc_skewq(retp, a=0.9), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_skew(retp, method="quantile"),
  Rcode=calc_skewq(retp),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Calculate the nonparametric skewness
HighFreq::calc_skew(retp, method="nonparametric")
# Compare HighFreq::calc_skew() with R nonparametric skewness
all.equal(drop(HighFreq::calc_skew(retp, method="nonparametric")), 
  (mean(retp)-median(retp))/sd(retp), 
  check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_skew(retp, method="nonparametric"),
  Rcode=(mean(retp)-median(retp))/sd(retp),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}  # end dontrun

}
