% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_eigenp}
\alias{calc_eigenp}
\title{Calculate the partial eigen decomposition of a dense symmetric matrix using
\code{RcppArmadillo}.}
\usage{
calc_eigenp(matrixv, neigen)
}
\arguments{
\item{\code{matrixv}}{A square matrix.}

\item{\code{neigen}}{An \emph{integer} equal to the number of eigenvalues
to be calculated.}
}
\value{
A list with two elements: a \emph{vector} of eigenvalues (named
  "values"), and a \emph{matrix} of eigenvectors (named "vectors").
}
\description{
Calculate the partial eigen decomposition of a dense symmetric matrix using
\code{RcppArmadillo}.
}
\details{
The function \code{calc_eigenp()} calculates the partial eigen
  decomposition (the lowest order principal components, with the largest
  eigenvalues) of a dense matrix using RcppArmadillo.  It calls the internal
  \code{Armadillo} eigen solver \code{SymEigsSolver} in the namespace
  \code{arma::newarp} to calculate the partial eigen decomposition.
  
  The eigen solver \code{SymEigsSolver} uses the Implicitly Restarted
  Lanczos Method (IRLM) which was adapted from the
  \href{https://en.wikipedia.org/wiki/ARPACK}{ARPACK} library. The eigen
  solver \code{SymEigsSolver} was implemented by
  \href{https://github.com/yixuan/arpack-arma}{Yixuan Qiu}.
  
  The function \code{arma::eigs_sym()} also calculates the partial eigen
  decomposition using the eigen solver \code{SymEigsSolver}, but it only
  works for sparse matrices which are not standard R matrices.
  
  For matrices smaller than \code{100} rows, the function
  \code{calc_eigenp()} is slower than the function \code{calc_eigen()} which
  calculates the full eigen decomposition.  But it's faster for very large
  matrices.
}
\examples{
\dontrun{
# Create random positive semi-definite matrix
matrixv <- matrix(runif(100), nc=10)
matrixv <- t(matrixv) \%*\% matrixv
# Calculate the partial eigen decomposition
neigen <- 5
eigenp <- HighFreq::calc_eigenp(matrixv, neigen)
# Calculate the full eigen decomposition
eigend <- HighFreq::calc_eigen(matrixv)
# Compare the eigen decompositions
all.equal(eigenp$values[1:neigen], eigend$values[1:neigen])
all.equal(abs(eigenp$vectors), abs(eigend$vectors[, 1:neigen]))
# Compare the speed of partial versus full decomposition
summary(microbenchmark(
  partial=HighFreq::calc_eigenp(matrixv, neigen),
  full=HighFreq::calc_eigen(matrixv),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
