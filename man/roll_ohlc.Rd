% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_ohlc}
\alias{roll_ohlc}
\title{Aggregate a time series to an \emph{OHLC} time series with lower
periodicity.}
\usage{
roll_ohlc(se_ries, end_points)
}
\arguments{
\item{\code{se_ries}}{A \emph{time series} or a \emph{matrix} with multiple
columns of data.}

\item{\emph{end_points}}{An \emph{integer vector} of end points.}
}
\value{
A \emph{matrix} with \emph{OHLC} data, with the number of rows equal
  to the number of \emph{end_points} minus one.
}
\description{
Given a time series of prices at a higher periodicity (say seconds), it
calculates the \emph{OHLC} prices at a lower periodicity (say minutes).
}
\details{
The function \code{roll_ohlc()} performs a loop over the
  \emph{end_points}, along the rows of the \code{se_ries} data. At each
  \emph{end_point}, it selects the past rows of \code{se_ries} data,
  starting at the first bar after the previous \emph{end_point}, and then
  calls the function \code{agg_ohlc()} on the selected \code{se_ries} data
  to calculate the aggregations.
  
  The function \code{roll_ohlc()} can accept either a single column of data
  or four columns of \emph{OHLC} data.
  It can also accept an additional column containing the trading volume.

  The function \code{roll_ohlc()} performs a similar aggregation as the
  function \code{to.period()} from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}.
}
\examples{
\dontrun{
# Define matrix of OHLC data
oh_lc <- rutils::etf_env$VTI[, 1:5]
# Define end points at 25 day intervals
end_points <- rutils::calc_endpoints(oh_lc, inter_val=25)
# Aggregate over end_points:
ohlc_agg <- HighFreq::roll_ohlc(se_ries=oh_lc, end_points=(end_points-1))
# Compare with xts::to.period()
ohlc_agg_xts <- .Call("toPeriod", oh_lc, as.integer(end_points), TRUE, NCOL(oh_lc), FALSE, FALSE, colnames(oh_lc), PACKAGE="xts")
all.equal(ohlc_agg, coredata(ohlc_agg_xts), check.attributes=FALSE)
}

}
