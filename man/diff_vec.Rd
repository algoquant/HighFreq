% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{diff_vec}
\alias{diff_vec}
\title{Calculate the differences between the neighboring elements of a
single-column \emph{time series} or a \emph{vector}.}
\usage{
diff_vec(timeser, lagg = 1L, pad_zeros = TRUE)
}
\arguments{
\item{\code{timeser}}{A single-column \emph{time series} or a \emph{vector}.}

\item{\code{lagg}}{An \emph{integer} equal to the number of time periods to
lag when calculating the differences (the default is \code{lagg = 1}).}

\item{\code{pad_zeros}}{\emph{Boolean} argument: Should the output
\emph{vector} be padded (extended) with zeros, in order to return a
\emph{vector} of the same length as the input? (the default is
\code{pad_zeros = TRUE})}
}
\value{
A column \emph{vector} containing the differences between the
  elements of the input vector.
}
\description{
Calculate the differences between the neighboring elements of a
single-column \emph{time series} or a \emph{vector}.
}
\details{
The function \code{diff_vec()} calculates the differences between the
  input \emph{time series} or \emph{vector} and its lagged version.
  
  The argument \code{lagg} specifies the number of lags.  For example, if
  \code{lagg=3} then the differences will be taken between each element
  minus the element three time periods before it (in the past).  The default
  is \code{lagg = 1}.

  The argument \code{pad_zeros} specifies whether the output \emph{vector}
  should be padded (extended) with zeros at the front, in order to
  return a \emph{vector} of the same length as the input.  The default is
  \code{pad_zeros = TRUE}. The padding operation can be time-consuming,
  because it requires the copying the data in memory.
  
  The function \code{diff_vec()} is implemented in \code{RcppArmadillo}
  \code{C++} code, which makes it several times faster than \code{R} code.
}
\examples{
\dontrun{
# Create a vector of random returns
retp <- rnorm(1e6)
# Compare diff_vec() with rutils::diffit()
all.equal(drop(HighFreq::diff_vec(retp, lagg=3, pad=TRUE)),
  rutils::diffit(retp, lagg=3))
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::diff_vec(retp, lagg=3, pad=TRUE),
  Rcode=rutils::diffit(retp, lagg=3),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
