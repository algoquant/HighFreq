% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HighFreq.R
\name{which_extreme}
\alias{which_extreme}
\title{Calculate a \emph{Boolean} vector that identifies extreme tail values in a
single-column \emph{xts} time series or vector, over a rolling look-back
interval.}
\usage{
which_extreme(xtsv, lookb = 51, vol_mult = 2)
}
\arguments{
\item{\code{xtsv}}{A single-column \emph{xts} time series, or a \emph{numeric} or
\emph{Boolean} vector.}

\item{\code{lookb}}{The number of data points in rolling look-back interval for 
estimating rolling quantile.}

\item{\code{vol_mult}}{The quantile multiplier.}
}
\value{
A \emph{Boolean} vector with the same number of rows as the input
  time series or vector.
}
\description{
Calculate a \emph{Boolean} vector that identifies extreme tail values in a
single-column \emph{xts} time series or vector, over a rolling look-back
interval.
}
\details{
The function \code{which_extreme()} calculates a \emph{Boolean}
  vector, with \code{TRUE} for values that belong to the extreme tails
  of the distribution of values.

  The function \code{which_extreme()} applies a version of the Hampel median
  filter to identify extreme values, but instead of using the median absolute
  deviation (MAD), it uses the \code{0.9} quantile values calculated over a
  rolling look-back interval.

  Extreme values are defined as those that exceed the product of the
  multiplier times the rolling quantile. Extreme values belong to the fat
  tails of the recent (trailing) distribution of values, so they are present
  only when the trailing distribution of values has fat tails.  If the
  trailing distribution of values is closer to normal (without fat tails),
  then there are no extreme values.

  The quantile multiplier \code{vol_mult} controls the threshold at which
  values are identified as extreme. Smaller quantile multiplier values will
  cause more values to be identified as extreme.
}
\examples{
# Create local copy of SPY TAQ data
taq <- HighFreq::SPY_TAQ
# scrub quotes with suspect bid-ask spreads
bidask <- taq[, "Ask.Price"] - taq[, "Bid.Price"]
sus_pect <- which_extreme(bidask, lookb=51, vol_mult=3)
# Remove suspect values
taq <- taq[!sus_pect]

}
