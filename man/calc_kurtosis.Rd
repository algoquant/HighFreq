% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_kurtosis}
\alias{calc_kurtosis}
\title{Calculate the kurtosis of the columns of a \emph{time series} or a
\emph{matrix} using \code{RcppArmadillo}.}
\usage{
calc_kurtosis(tseries, method = "moment", confi_level = 0.75)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{method}}{A \emph{string} specifying the type of kurtosis model
(see Details). (The default is the \code{method = "moment"}.)}

\item{\code{confi_level}}{The confidence level for calculating the
quantiles. (the default is \code{confi_level = 0.75}).}
}
\value{
A single-row matrix with the kurtosis of the columns of
  \code{tseries}.
}
\description{
Calculate the kurtosis of the columns of a \emph{time series} or a
\emph{matrix} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_kurtosis()} calculates the kurtosis of the columns of
  a \emph{time series} or a \emph{matrix} of data using \code{RcppArmadillo}
  \code{C++} code.

  If \code{method = "moment"} (the default) then \code{calc_kurtosis()}
  calculates the fourth moment of the data.

  If \code{method = "quantile"} then it calculates the skewness
  \eqn{\kappa} from the differences between the quantiles of the data as
  follows:
  \deqn{
    \kappa = \frac{q_{\alpha} - q_{1-\alpha}}{q_{0.75} - q_{0.25}}
  }
  Where \eqn{\alpha} is the confidence level for calculating the quantiles.

  If \code{method = "nonparametric"} then it calculates the kurtosis as the
  difference between the mean of the data minus its median, divided by the
  standard deviation.
  
  If the number of rows of \code{tseries} is less than \code{3} then it
  returns zeros.
  
  The code examples below compare the function \code{calc_kurtosis()} with the
  kurtosis calculated using \code{R} code.
}
\examples{
\dontrun{
# Calculate VTI returns
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
# Calculate the moment kurtosis
HighFreq::calc_kurtosis(re_turns)
# Calculate the moment kurtosis in R
calc_kurtr <- function(x) {
  x <- (x-mean(x))
  sum(x^4)/var(x)^2/NROW(x)
}  # end calc_kurtr
all.equal(HighFreq::calc_kurtosis(re_turns), 
  calc_kurtr(re_turns), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::calc_kurtosis(re_turns),
  Rcode=calc_kurtr(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Calculate the quantile kurtosis
HighFreq::calc_kurtosis(re_turns, method="quantile", confi_level=0.9)
# Calculate the quantile kurtosis in R
calc_kurtq <- function(x, a=0.9) {
  	quantile_s <- quantile(x, c(1-a, 0.25, 0.75, a), type=5)
  	(quantile_s[4] - quantile_s[1])/(quantile_s[3] - quantile_s[2])
}  # end calc_kurtq
all.equal(drop(HighFreq::calc_kurtosis(re_turns, method="quantile", confi_level=0.9)), 
  calc_kurtq(re_turns, a=0.9), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_kurtosis(re_turns, method="quantile"),
  Rcode=calc_kurtq(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Calculate the nonparametric kurtosis
HighFreq::calc_kurtosis(re_turns, method="nonparametric")
# Compare HighFreq::calc_kurtosis() with R nonparametric kurtosis
all.equal(drop(HighFreq::calc_kurtosis(re_turns, method="nonparametric")), 
  (mean(re_turns)-median(re_turns))/sd(re_turns), 
  check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_kurtosis(re_turns, method="nonparametric"),
  Rcode=(mean(re_turns)-median(re_turns))/sd(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
