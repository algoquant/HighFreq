% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{run_var_ohlc}
\alias{run_var_ohlc}
\title{Calculate the running variance of streaming \emph{OHLC} price data.}
\usage{
run_var_ohlc(ohlc, lambda)
}
\arguments{
\item{\code{ohlc}}{A \emph{time series} or a \emph{matrix} with \emph{OHLC}
price data.}

\item{\code{lambda}}{A \emph{numeric} decay factor to multiply past
estimates.}
}
\value{
A single-column \emph{matrix} of variance estimates, with the same
  number of rows as the input \code{ohlc} price data.
}
\description{
Calculate the running variance of streaming \emph{OHLC} price data.
}
\details{
The function \code{run_var_ohlc()} calculates a single-column
  \emph{matrix} of variance estimates of streaming \emph{OHLC} price data.
  
  The function \code{run_var_ohlc()} calculates the variance from the
  differences between the \emph{Open}, \emph{High}, \emph{Low}, and
  \emph{Close} prices, using the \emph{Yang-Zhang} range volatility
  estimator:
  \deqn{
    \sigma^2_t = (1-\lambda) ((O_t - C_{t-1})^2 + 0.134 (C_t - O_t)^2 + 
    0.866 ((H_i - O_i) (H_i - C_i) + (L_i - O_i) (L_i - C_i))) + 
    \lambda \sigma^2_{t-1}
  }
  It recursively weighs the current variance estimate with the past
  estimates \eqn{\sigma^2_{t-1}}, using the decay factor \eqn{\lambda}.

  The above recursive formula is convenient for processing live streaming
  data because it doesn't require maintaining a buffer of past data.
  The formula is equivalent to a convolution with exponentially decaying
  weights, but it's faster.
  
  The function \code{run_var_ohlc()} does not calculate the logarithm of
  the prices.
  So if the argument \code{ohlc} contains dollar prices then
  \code{run_var_ohlc()} calculates the dollar variance.
  If the argument \code{ohlc} contains the log prices then
  \code{run_var_ohlc()} calculates the percentage variance.
  
  The function \code{run_var_ohlc()} is implemented in \code{RcppArmadillo}
  \code{C++} code, so it's many times faster than the equivalent \code{R}
  code.
}
\examples{
\dontrun{
# Extract the log OHLC prices of VTI
ohlc <- log(rutils::etfenv$VTI)
# Calculate the running variance
var_running <- HighFreq::run_var_ohlc(ohlc, lambda=0.8)
# Calculate the rolling variance
var_rolling <- HighFreq::roll_var_ohlc(ohlc, look_back=5, method="yang_zhang", scale=FALSE)
datav <- cbind(var_running, var_rolling)
colnames(datav) <- c("running", "rolling")
colnamev <- colnames(datav)
datav <- xts::xts(datav, index(ohlc))
# dygraph plot of VTI running versus rolling volatility
dygraphs::dygraph(sqrt(datav[-(1:111), ]), main="Running and Rolling Volatility of VTI") \%>\%
  dyOptions(colors=c("red", "blue"), strokeWidth=1) \%>\%
  dyLegend(show="always", width=500)
# Compare the speed of running versus rolling volatility
library(microbenchmark)
summary(microbenchmark(
  running=HighFreq::run_var_ohlc(ohlc, lambda=0.8),
  rolling=HighFreq::roll_var_ohlc(ohlc, look_back=5, method="yang_zhang", scale=FALSE),
  times=10))[, c(1, 4, 5)]
}
}
