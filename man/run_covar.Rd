% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{run_covar}
\alias{run_covar}
\title{Calculate the running covariance of two streaming \emph{time series} of
returns.}
\usage{
run_covar(tseries, lambda)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix} with two
columns of returns data.}

\item{\code{lambda}}{A \emph{numeric} decay factor to multiply past
estimates.}
}
\value{
A \emph{matrix} with three columns of data: the covariance and the
  variances of the two columns of the argument \code{tseries}.
}
\description{
Calculate the running covariance of two streaming \emph{time series} of
returns.
}
\details{
The function \code{run_covar()} calculates the running covariance of two
  streaming \emph{time series} of returns, by recursively weighing the
  products of their returns minus their means, with past covariance
  estimates \eqn{\sigma^{cov}_{t-1}}, using the decay factor \eqn{\lambda}:
  \deqn{
    \mu^1_t = (1-\lambda) r^1_t + \lambda \mu^1_{t-1}
  }
  \deqn{
    \mu^2_t = (1-\lambda) r^2_t + \lambda \mu^2_{t-1}
  }
  \deqn{
    \sigma^{cov}_t = (1-\lambda) (r^1_t - \mu^1_t) (r^2_t - \mu^2_t) + \lambda \sigma^{cov}_{t-1}
  }
  Where \eqn{\sigma^{cov}_t} is the covariance estimate at time \eqn{t},
  \eqn{r^1_t} and \eqn{r^2_t} are the two streaming returns data, and
  \eqn{\mu^1_t} and \eqn{\mu^2_t} are the means of the returns.

  The above recursive formula is convenient for processing live streaming
  data because it doesn't require maintaining a buffer of past data.
  The formula is equivalent to a convolution with exponentially decaying
  weights, but it's faster.

  The value of the decay factor \eqn{\lambda} should be in the range between
  \code{0} and \code{1}.  
  If \eqn{\lambda} is close to \code{1} then the decay is weak and past
  values have a greater weight, and the running covariance values have a
  stronger dependence on past values.  This is equivalent to a long
  look-back interval.
  If \eqn{\lambda} is much less than \code{1} then the decay is strong and
  past values have a smaller weight, and the running covariance values have
  a weaker dependence on past values.  This is equivalent to a short
  look-back interval.

  The function \code{run_covar()} returns three columns of data: the
  covariance and the variances of the two columns of the argument
  \code{tseries}.  This allows calculating the running correlation.
}
\examples{
\dontrun{
# Calculate historical returns
re_turns <- zoo::coredata(na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI")]))
# Calculate the running covariance
lamb_da <- 0.9
covars <- HighFreq::run_covar(re_turns, lambda=lamb_da)
# Calculate running covariance using R code
filter_ed <- (1-lamb_da)*filter(re_turns[, 1]*re_turns[, 2], 
  filter=lamb_da, init=as.numeric(re_turns[1, 1]*re_turns[1, 2])/(1-lamb_da), 
  method="recursive")
all.equal(covars[, 1], unclass(filter_ed), check.attributes=FALSE)
# Calculate the running correlation
correl <- covars[, 1]/sqrt(covars[, 2]*covars[, 3])
}

}
