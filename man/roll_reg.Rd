% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_reg}
\alias{roll_reg}
\title{Calculate a \emph{matrix} of regression coefficients, their t-values, and
z-scores, at the end points of the predictor matrix.}
\usage{
roll_reg(
  response,
  predictor,
  startp = 0L,
  endp = 0L,
  step = 1L,
  look_back = 1L,
  stub = 0L,
  method = "least_squares",
  eigen_thresh = 1e-05,
  eigen_max = 0L,
  conf_lev = 0.1,
  alpha = 0
)
}
\arguments{
\item{\code{response}}{A single-column \emph{time series} or a \emph{vector}
of response data.}

\item{\code{predictor}}{A \emph{time series} or a \emph{matrix} of predictor
data.}

\item{\code{startp}}{An \emph{integer} vector of start points (the default
is \code{startp = 0}).}

\item{\code{endp}}{An \emph{integer} vector of end points (the default is 
\code{endp = 0}).}

\item{\code{step}}{The number of time periods between the end points (the
default is \code{step = 1}).}

\item{\code{look_back}}{The number of end points in the look-back interval
(the default is \code{look_back = 1}).}

\item{\code{stub}}{An \emph{integer} value equal to the first end point for
calculating the end points (the default is \code{stub = 0}).}

\item{\code{method}}{A \emph{string} specifying the type of the regression
model the default is \code{method = "least_squares"} - see Details).}

\item{\code{eigen_thresh}}{A \emph{numeric} threshold level for discarding
small singular values in order to regularize the inverse of the
\code{predictor} matrix (the default is \code{1e-5}).}

\item{\code{eigen_max}}{An \emph{integer} equal to the number of singular
values used for calculating the shrinkage inverse of the \code{predictor}
matrix (the default is \code{0} - equivalent to \code{eigen_max} equal to
the number of columns of \code{predictor}).}

\item{\code{conf_lev}}{The confidence level for calculating the
quantiles (the default is \code{conf_lev = 0.75}).}

\item{\code{alpha}}{The shrinkage intensity between \code{0} and \code{1}.
(the default is \code{0}).}
}
\value{
A \emph{matrix} with the same number of rows as \code{predictor}, and a
  number of columns equal to \code{2n+3}, where \code{n} is the number of
  columns of \code{predictor}.
}
\description{
Calculate a \emph{matrix} of regression coefficients, their t-values, and
z-scores, at the end points of the predictor matrix.
}
\details{
The function \code{roll_reg()} calculates a \emph{matrix} of regression
  coefficients, their t-values, and z-scores at the end points of the predictor
  matrix.
  
  The function \code{roll_reg()} performs a loop over the end points, and at
  each end point it subsets the time series \code{predictor} over a look-back
  interval equal to \code{look_back} number of end points.
  
  It passes the subset time series to the function \code{calc_reg()}, which
  calculates the regression data.
  
  If the arguments \code{endp} and \code{startp} are not given then it
  first calculates a vector of end points separated by \code{step} time
  periods. It calculates the end points along the rows of \code{predictor}
  using the function \code{calc_endpoints()}, with the number of time
  periods between the end points equal to \code{step} time periods.
  
  For example, the rolling regression at \code{25} day end points, with a
  \code{75} day look-back, can be calculated using the parameters
  \code{step = 25} and \code{look_back = 3}.
}
\examples{
\dontrun{
# Calculate historical returns
re_turns <- na.omit(rutils::etf_env$re_turns[, c("XLP", "VTI")])
# Define monthly end points and start points
end_p <- xts::endpoints(re_turns, on="months")[-1]
look_back <- 12
start_p <- c(rep(1, look_back), end_p[1:(NROW(end_p)-look_back)])
# Calculate rolling betas using RcppArmadillo
reg_stats <- HighFreq::roll_reg(response=re_turns[, 1], predictor=re_turns[, 2], endp=(end_p-1), startp=(start_p-1))
beta_s <- reg_stats[, 2]
# Calculate rolling betas in R
betas_r <- sapply(1:NROW(end_p), FUN=function(ep) {
  da_ta <- re_turns[start_p[ep]:end_p[ep], ]
  drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
# Compare the outputs of both functions
all.equal(beta_s, betas_r, check.attributes=FALSE)
}

}
