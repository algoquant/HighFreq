% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_reg}
\alias{roll_reg}
\title{Calculate a \emph{matrix} of regression coefficients, their t-values, and
z-scores, at the end points of the predictor matrix.}
\usage{
roll_reg(
  response,
  predictor,
  controlv,
  startp = 0L,
  endp = 0L,
  step = 1L,
  look_back = 1L,
  stub = 0L
)
}
\arguments{
\item{\code{response}}{A single-column \emph{time series} or a \emph{vector}
of response data.}

\item{\code{predictor}}{A \emph{time series} or a \emph{matrix} of predictor
data.}

\item{\code{controlv}}{A \emph{list} of model parameters (see Details).}

\item{\code{startp}}{An \emph{integer} vector of start points (the default
is \code{startp = 0}).}

\item{\code{endp}}{An \emph{integer} vector of end points (the default is 
\code{endp = 0}).}

\item{\code{step}}{The number of time periods between the end points (the
default is \code{step = 1}).}

\item{\code{look_back}}{The number of end points in the look-back interval
(the default is \code{look_back = 1}).}

\item{\code{stub}}{An \emph{integer} value equal to the first end point for
calculating the end points (the default is \code{stub = 0}).}
}
\value{
A \emph{matrix} with the regression coefficients, their t-values,
  and z-scores, and with the same number of rows as \code{predictor} a
  number of columns equal to \code{2n+3}, where \code{n} is the number of
  columns of \code{predictor}.
}
\description{
Calculate a \emph{matrix} of regression coefficients, their t-values, and
z-scores, at the end points of the predictor matrix.
}
\details{
The function \code{roll_reg()} calculates a \emph{matrix} of regression
  coefficients, their t-values, and z-scores at the end points of the
  predictor matrix.
  
  The function \code{roll_reg()} performs a loop over the end points, and at
  each end point it subsets the time series \code{predictor} over a look-back
  interval equal to \code{look_back} number of end points.
  
  If the arguments \code{endp} and \code{startp} are not given then it
  first calculates a vector of end points separated by \code{step} time
  periods. It calculates the end points along the rows of \code{predictor}
  using the function \code{calc_endpoints()}, with the number of time
  periods between the end points equal to \code{step} time periods.
  
  For example, the rolling regression at \code{25} day end points, with a
  \code{75} day look-back, can be calculated using the parameters
  \code{step = 25} and \code{look_back = 3}.

  It passes the subset time series to the function \code{calc_reg()}, which
  calculates the regression coefficients, their t-values, and the z-score.
  The function \code{roll_reg()} accepts a list of model parameters
  through the argument \code{controlv}, and passes it to the function
  \code{calc_reg()}.
  The list of model parameters can be created using the function
  \code{param_reg()}.  See the function \code{param_reg()} for a
  description of the model parameters.
  
  The number of columns of the return matrix depends on the number of
  columns of the \code{predictor} matrix (including the intercept column, if
  it's added).
  The number of columns of the return matrix is equal to the number of
  regression coefficients, plus their t-values, plus the z-score column.
  The number of regression coefficients is equal to the number of columns of
  the \code{predictor} matrix (including the intercept column, if it's
  added).
  The number of t-values is equal to the number of coefficients.
  For example, if the number of columns of the \code{predictor} matrix is
  equal to \code{n}, and if \code{intercept = TRUE} (the default), then
  \code{roll_reg()} returns a matrix with \code{2n+3} columns: \code{n+1}
  regression coefficients (including the intercept coefficient), \code{n+1}
  corresponding t-values, and \code{1} z-score column.
}
\examples{
\dontrun{
# Calculate historical returns
retsp <- na.omit(rutils::etfenv$returns[, c("XLP", "VTI")])
# Define monthly end points and start points
endp <- xts::endpoints(retsp, on="months")[-1]
look_back <- 12
startp <- c(rep(1, look_back), endp[1:(NROW(endp)-look_back)])
# Create a default list of regression parameters
controlv <- HighFreq::param_reg()
# Calculate rolling betas using RcppArmadillo
reg_stats <- HighFreq::roll_reg(response=retsp[, 1], predictor=retsp[, 2], endp=(endp-1), startp=(startp-1), controlv=controlv)
betas <- reg_stats[, 2]
# Calculate rolling betas in R
betas_r <- sapply(1:NROW(endp), FUN=function(ep) {
  datav <- retsp[startp[ep]:endp[ep], ]
  drop(cov(datav[, 1], datav[, 2])/var(datav[, 2]))
})  # end sapply
# Compare the outputs of both functions
all.equal(betas, betas_r, check.attributes=FALSE)
}

}
