% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_sumep}
\alias{roll_sumep}
\title{Calculate the rolling sums at the end points of a \emph{time series} or a
\emph{matrix}.}
\usage{
roll_sumep(
  tseries,
  startp = 0L,
  endp = 0L,
  step = 1L,
  look_back = 1L,
  stub = 0L
)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix}.}

\item{\code{startp}}{An \emph{integer} vector of start points (the default
is \code{startp = 0}).}

\item{\code{endp}}{An \emph{integer} vector of end points (the default is
\code{endp = 0}).}

\item{\code{step}}{The number of time periods between the end points (the
default is \code{step = 1}).}

\item{\code{look_back}}{The number of end points in the look-back interval
(the default is \code{look_back = 1}).}

\item{\code{stub}}{An \emph{integer} value equal to the first end point for
calculating the end points.}
}
\value{
A \emph{matrix} with the same number of columns as the input time
  series \code{tseries}, and the number of rows equal to the number of end
  points.
}
\description{
Calculate the rolling sums at the end points of a \emph{time series} or a
\emph{matrix}.
}
\details{
The function \code{roll_sumep()} calculates the rolling sums at the end
  points of the \emph{time series} \code{tseries}.
  
  The function \code{roll_sumep()} is implemented in \code{RcppArmadillo}
  \code{C++} code, which makes it several times faster than \code{R} code.
}
\examples{
\dontrun{
# Calculate historical returns
returns <- na.omit(rutils::etfenv$returns[, c("VTI", "IEF")])
# Define end points at 25 day intervals
endp <- HighFreq::calc_endpoints(NROW(returns), step=25)
# Define start points as 75 day lag of end points
startp <- HighFreq::calc_startpoints(endp, look_back=3)
# Calculate rolling sums using Rcpp
c_sum <- HighFreq::roll_sumep(returns, startp=startp, endp=endp)
# Calculate rolling sums using R code
r_sum <- sapply(1:NROW(endp), function(ep) {
colSums(returns[(startp[ep]+1):(endp[ep]+1), ])
  })  # end sapply
r_sum <- t(r_sum)
all.equal(c_sum, r_sum, check.attributes=FALSE)
}

}
