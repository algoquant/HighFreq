% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_inv}
\alias{calc_inv}
\title{Calculate the regularized inverse of a \emph{matrix} of data using Singular
Value Decomposition (\emph{SVD}).}
\usage{
calc_inv(tseries, eigen_thresh = 0.01, dimax = 0L)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or \emph{matrix} of data.}

\item{\code{eigen_thresh}}{A \emph{numeric} threshold level for discarding
small singular values in order to regularize the inverse of the
matrix \code{tseries} (the default is \code{0.01}).}

\item{\code{dimax}}{An \emph{integer} equal to the number of singular
values used for calculating the regularized inverse of the matrix
\code{tseries} (the default is \code{dimax = 0} - equivalent to
\code{dimax} equal to the number of columns of \code{tseries}).}
}
\value{
A \emph{matrix} equal to the regularized inverse of the matrix
  \code{tseries}.
}
\description{
Calculate the regularized inverse of a \emph{matrix} of data using Singular
Value Decomposition (\emph{SVD}).
}
\details{
The function \code{calc_inv()} calculates the regularized inverse of the
  matrix \code{tseries} using Singular Value Decomposition (\emph{SVD}).
  
  The function \code{calc_inv()} first performs Singular Value Decomposition
  (\emph{SVD}) of the matrix \code{tseries}.  
  The \emph{SVD} of a matrix \eqn{\strong{C}} is defined as the
  factorization:
  \deqn{
    \strong{C} = \strong{U}  \, \Sigma  \, \strong{V}^T
  }
  Where \eqn{\strong{U}} and \eqn{\strong{V}} are the left and right
  \emph{singular matrices}, and \eqn{\Sigma} is a diagonal matrix of
  \emph{singular values} \eqn{\Sigma = \{\sigma_i\}}.
  
  The inverse \eqn{\strong{C}^{-1}} of the matrix \eqn{\strong{C}} can be
  calculated from the \emph{SVD} matrices as:
  \deqn{
    \strong{C}^{-1} = \strong{V} \, \Sigma^{-1} \, \strong{U}^T
  }
  
  The \emph{regularized inverse} of the matrix \eqn{\strong{C}} is given
  by:
  \deqn{
    \strong{C}^{-1} = \strong{V}_n \, \Sigma_n^{-1} \, \strong{U}_n^T
  }
  Where \eqn{\strong{U}_n}, \eqn{\strong{V}_n} and \eqn{\Sigma_n} are the
  \emph{SVD} matrices with the rows and columns corresponding to zero
  \emph{singular values} removed.
  
  The function \code{calc_inv()} performs regularization by discarding the
  smallest singular values \eqn{\sigma_i} that are less than the threshold
  level \code{eigen_thresh} times the sum of all the singular values:
  \deqn{\sigma_i < eigen\_thresh \cdot (\sum{\sigma_i})}
  
  It then discards additional singular values so that only the largest
  \code{dimax} singular values remain.  
  It calculates the regularized inverse from the \emph{SVD} matrices using
  only the largest singular values up to \code{dimax}.  For example, if
  \code{dimax = 3} then it only uses the \code{3} largest singular
  values. This has the effect of dimension reduction.
  
  If the matrix \code{tseries} has a large number of small singular values,
  then the number of remaining singular values may be less than
  \code{dimax}.
}
\examples{
\dontrun{
# Calculate ETF returns
returns <- na.omit(rutils::etfenv$returns)
# Calculate covariance matrix
covmat <- cov(returns)
# Calculate regularized inverse using RcppArmadillo
invmat <- HighFreq::calc_inv(covmat, dimax=3)
# Calculate regularized inverse from SVD in R
svdec <- svd(covmat)
dimax <- 1:3
invsvd <- svdec$v[, dimax] \%*\% (t(svdec$u[, dimax]) / svdec$d[dimax])
# Compare RcppArmadillo with R
all.equal(invmat, invsvd)
}

}
