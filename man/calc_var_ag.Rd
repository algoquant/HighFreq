% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_var_ag}
\alias{calc_var_ag}
\title{Calculate the variance of returns aggregated over end points.}
\usage{
calc_var_ag(tseries, step = 1L)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix} of prices.}

\item{\code{step}}{The number of periods in each interval between
neighboring end points.}
}
\value{
The variance of aggregated returns.
}
\description{
Calculate the variance of returns aggregated over end points.
}
\details{
The function \code{calc_var_ag()} calculates the variance of returns
  aggregated over end points.

  It first calculates the end points spaced apart by the number of periods
  equal to the argument \code{step}.  It then calculates the aggregated
  returns by differencing the prices \code{tseries} calculated at the end
  points. Finally it calculates the variance of the returns.

  If there are extra periods that don't fit over the length of
  \code{tseries}, then \code{calc_var_ag()} loops over all possible stub
  intervals, it then calculates all the corresponding variance values, and
  averages them.

  For example, if the length of \code{tseries} is equal to \code{20}, and
  \code{step=3} then \code{6} end points fit over the length of
  \code{tseries}, and there are \code{2} extra periods that must fit into
  stubs, either at the beginning or at the end (or both).

  The aggregated volatility \eqn{\sigma_t} scales (increases) with the
  length of the aggregation interval \eqn{\Delta t} raised to the power of
  the \emph{Hurst exponent} \eqn{H}:
    \deqn{
      \sigma_t = \sigma {\Delta t}^H
    }
  Where \eqn{\sigma} is the daily return volatility.

  The function \code{calc_var_ag()} can therefore be used to calculate the
  \emph{Hurst exponent} from the volatility ratio.
}
\examples{
\dontrun{
# Calculate the log prices
price_s <- na.omit(rutils::etf_env$price_s[, c("XLP", "VTI")])
price_s <- log(price_s)
# Calculate the daily variance of percentage returns
calc_var_ag(price_s, step=1)
# Calculate the daily variance using R
sapply(rutils::diff_it(price_s), var)
# Calculate the variance of returns aggregated over 21 days
calc_var_ag(price_s, step=21)
# The variance over 21 days is approximately 21 times the daily variance
21*calc_var_ag(price_s, step=1)
}

}
