% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_scale}
\alias{calc_scale}
\title{Standardize (center and scale) the columns of a \emph{time series} of data
in place, without copying the data in memory, using \code{RcppArmadillo}.}
\usage{
calc_scale(timeser, center = TRUE, scale = TRUE, use_median = FALSE)
}
\arguments{
\item{\code{timeser}}{A \emph{time series} or \emph{matrix} of data.}

\item{\code{center}}{A \emph{Boolean} argument: if \code{TRUE} then center
the columns so that they have zero mean or median (the default is
\code{TRUE}).}

\item{\code{scale}}{A \emph{Boolean} argument: if \code{TRUE} then scale the
columns so that they have unit standard deviation or MAD (the default is
\code{TRUE}).}

\item{\code{use_median}}{A \emph{Boolean} argument: if \code{TRUE} then the 
centrality (central tendency) is calculated as the \emph{median} and the 
dispersion is calculated as the \emph{median absolute deviation}
(\emph{MAD}) (the default is \code{FALSE}).
If \code{use_median = FALSE} then the centrality is calculated as the
\emph{mean} and the dispersion is calculated as the \emph{standard
deviation}.}
}
\value{
Void (no return value - modifies the data in place).
}
\description{
Standardize (center and scale) the columns of a \emph{time series} of data
in place, without copying the data in memory, using \code{RcppArmadillo}.
}
\details{
The function \code{calc_scale()} standardizes (centers and scales) the
  columns of a \emph{time series} of data in place, without copying the data
  in memory, using \code{RcppArmadillo}.

  If the arguments \code{center} and \code{scale} are both \code{TRUE} and
  \code{use_median} is \code{FALSE} (the defaults), then \code{calc_scale()}
  performs the same calculation as the standard \code{R} function
  \code{scale()}, and it calculates the centrality (central tendency) as the
  \emph{mean} and the dispersion as the \emph{standard deviation}.

  If the arguments \code{center} and \code{scale} are both \code{TRUE} (the
  defaults), then \code{calc_scale()} standardizes the data.
  If the argument \code{center} is \code{FALSE} then \code{calc_scale()}
  only scales the data (divides it by the standard deviations).
  If the argument \code{scale} is \code{FALSE} then \code{calc_scale()}
  only demeans the data (subtracts the means).
  
  If the argument \code{use_median} is \code{TRUE}, then it calculates the
  centrality as the \emph{median} and the dispersion as the \emph{median
  absolute deviation} (\emph{MAD}).

  If the number of rows of \code{timeser} is less than \code{3} then it
  does nothing and \code{timeser} is not scaled.
  
  The function \code{calc_scale()} accepts a \emph{pointer} to the argument
  \code{timeser}, and it overwrites the old data with the standardized data.
  It performs the calculation in place, without copying the data in memory,
  which can significantly increase the computation speed for large time
  series.

  The function \code{calc_scale()} uses \code{RcppArmadillo} \code{C++}
  code, so on a typical time series it can be over \emph{10} times faster
  than the function \code{scale()}.
}
\examples{
\dontrun{
# Calculate a time series of returns
retp <- zoo::coredata(na.omit(rutils::etfenv$returns[, c("IEF", "VTI")]))
# Demean the returns
demeaned <- apply(retp, 2, function(x) (x-mean(x)))
HighFreq::calc_scale(retp, scale=FALSE)
all.equal(demeaned, retp, check.attributes=FALSE)
# Calculate a time series of returns
retp <- zoo::coredata(na.omit(rutils::etfenv$returns[, c("IEF", "VTI")]))
# Standardize the returns
retss <- scale(retp)
HighFreq::calc_scale(retp)
all.equal(retss, retp, check.attributes=FALSE)
# Compare the speed of Rcpp with R code
library(microbenchmark)
summary(microbenchmark(
  Rcode=scale(retp),
  Rcpp=HighFreq::calc_scale(retp),
  times=100))[, c(1, 4, 5)]  # end microbenchmark summary
}  # end dontrun

}
