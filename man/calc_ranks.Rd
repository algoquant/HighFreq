% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_ranks}
\alias{calc_ranks}
\title{Calculate the ranks of the elements of a \emph{vector} or a single-column
\emph{time series} using \code{RcppArmadillo}.}
\usage{
calc_ranks(vec_tor)
}
\arguments{
\item{\code{vec_tor}}{A \emph{vector} or a single-column \emph{time series}.}
}
\value{
An \emph{integer vector} with the ranks of the elements of the
  \emph{vector}.
}
\description{
Calculate the ranks of the elements of a \emph{vector} or a single-column
\emph{time series} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_ranks()} calculates the ranks of the
  elements of a \emph{vector} or a single-column \emph{time series}.
  It uses the \code{RcppArmadillo} function \code{arma::sort_index()}.
  The function \code{arma::sort_index()} calculates the permutation index to
  sort a given vector into ascending order.
  
  Applying the function \code{arma::sort_index()} twice:
  \code{arma::sort_index(arma::sort_index())}, calculates the \emph{reverse}
  permutation index to sort the vector from ascending order back into its
  original unsorted order.
  The permutation index produced by:
  \code{arma::sort_index(arma::sort_index())} is the \emph{reverse} of the
  permutation index produced by: \code{arma::sort_index()}.
  
  The ranks of the elements are equal to the \emph{reverse} permutation
  index.
  The function \code{calc_ranks()} calculates the \emph{reverse} permutation
  index.
}
\examples{
\dontrun{
# Create a vector of random data
da_ta <- round(runif(7), 2)
# Calculate the ranks of the elements in two ways
all.equal(rank(da_ta), drop(HighFreq::calc_ranks(da_ta)))
# Create a time series of random data
da_ta <- xts::xts(runif(7), seq.Date(Sys.Date(), by=1, length.out=7))
# Calculate the ranks of the elements in two ways
all.equal(rank(coredata(da_ta)), drop(HighFreq::calc_ranks(da_ta)))
# Compare the speed of RcppArmadillo with R code
da_ta <- runif(7)
library(microbenchmark)
summary(microbenchmark(
  rcpp=calc_ranks(da_ta),
  rcode=rank(da_ta),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
