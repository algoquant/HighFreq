% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_ranks}
\alias{calc_ranks}
\title{Calculate the ranks of the elements of a single-column \emph{time series} or
a \emph{vector} using \code{RcppArmadillo}.}
\usage{
calc_ranks(tseries)
}
\arguments{
\item{\code{tseries}}{A single-column \emph{time series} or a \emph{vector}.}
}
\value{
An \emph{integer vector} with the ranks of the elements of the
  \code{tseries}.
}
\description{
Calculate the ranks of the elements of a single-column \emph{time series} or
a \emph{vector} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_ranks()} calculates the ranks of the elements of a
  single-column \emph{time series} or a \emph{vector}. It uses the
  \code{RcppArmadillo} function \code{arma::sort_index()}. The function
  \code{arma::sort_index()} calculates the permutation index to sort a given
  vector into ascending order.
  
  Applying the function \code{arma::sort_index()} twice:
  \code{arma::sort_index(arma::sort_index())}, calculates the \emph{reverse}
  permutation index to sort the vector from ascending order back into its
  original unsorted order.
  The permutation index produced by:
  \code{arma::sort_index(arma::sort_index())} is the \emph{reverse} of the
  permutation index produced by: \code{arma::sort_index()}.
  
  The ranks of the elements are equal to the \emph{reverse} permutation
  index.
  The function \code{calc_ranks()} calculates the \emph{reverse} permutation
  index.
}
\examples{
\dontrun{
# Create a vector of random data
datav <- round(runif(7), 2)
# Calculate the ranks of the elements in two ways
all.equal(rank(datav), drop(HighFreq::calc_ranks(datav)))
# Create a time series of random data
datav <- xts::xts(runif(7), seq.Date(Sys.Date(), by=1, length.out=7))
# Calculate the ranks of the elements in two ways
all.equal(rank(coredata(datav)), drop(HighFreq::calc_ranks(datav)))
# Compare the speed of RcppArmadillo with R code
datav <- runif(7)
library(microbenchmark)
summary(microbenchmark(
  Rcpp=calc_ranks(datav),
  Rcode=rank(datav),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
