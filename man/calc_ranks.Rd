% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_ranks}
\alias{calc_ranks}
\title{Calculate the ranks of the elements of a single-column \emph{time series},
\emph{matrix}, or a \emph{vector} using \code{RcppArmadillo}.}
\usage{
calc_ranks(timeser)
}
\arguments{
\item{\code{timeser}}{A single-column \emph{time series}, \emph{matrix}, or
a \emph{vector}.}
}
\value{
An \emph{integer vector} with the ranks of the elements of the
  \code{timeser}.
}
\description{
Calculate the ranks of the elements of a single-column \emph{time series},
\emph{matrix}, or a \emph{vector} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_ranks()} calculates the ranks of the elements of a
  single-column \emph{time series}, \emph{matrix}, or a \emph{vector}. 
  
  The permutation index is an integer vector which sorts a given vector into
  ascending order. 
  The permutation index of the permutation index is the \emph{reverse}
  permutation index, because it sorts the vector from ascending order back
  into its original unsorted order.
  The ranks of the elements are equal to the \emph{reverse} permutation
  index. The function \code{calc_ranks()} calculates the \emph{reverse}
  permutation index.
  
  The ranks produced by \code{calc_ranks()} start at zero, following the 
  \code{C++} convention.
  
  The \code{Armadillo} function \code{arma::sort_index()} calculates the
  permutation index which sorts a given vector into an ascending order.
  Applying the function \code{arma::sort_index()} twice:\cr
  \code{arma::sort_index(arma::sort_index())},\cr
  calculates the \emph{reverse} permutation index to sort the vector from
  ascending order back into its original unsorted order.
  
  The function \code{calc_ranks()} calls the \code{Armadillo} function
  \code{arma::sort_index()} twice to calculate the \emph{reverse}
  permutation index, to sort the vector from ascending order back into its
  original unsorted order.
}
\examples{
\dontrun{
# Create a vector of data
datav <- rnorm(1e3)
# Calculate the ranks of the elements using R code and RcppArmadillo
all.equal(rank(datav), drop(HighFreq::calc_ranks(datav))+1)
# Compare the speed of R code with RcppArmadillo
library(microbenchmark)
summary(microbenchmark(
  Rcode=rank(datav),
  Rcpp=calc_ranks(datav),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}  # end dontrun

}
