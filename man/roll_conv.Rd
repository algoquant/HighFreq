% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_conv}
\alias{roll_conv}
\title{Calculate the rolling convolutions (weighted sums) of a \emph{time series}
with a single-column \emph{matrix} of weights.}
\usage{
roll_conv(timeser, weightv)
}
\arguments{
\item{\code{timeser}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{weightv}}{A single-column \emph{matrix} of weights.}
}
\value{
A \emph{matrix} with the same dimensions as the input argument
  \code{timeser}.
}
\description{
Calculate the rolling convolutions (weighted sums) of a \emph{time series}
with a single-column \emph{matrix} of weights.
}
\details{
The function \code{roll_conv()} calculates the convolutions of the
  \emph{matrix} columns with a single-column \emph{matrix} of weights.  It
  performs a loop over the \emph{matrix} rows and multiplies the past
  (higher) values by the weights.  It calculates the rolling weighted sums
  of the past data.
  
  The function \code{roll_conv()} uses the \code{Armadillo} function
  \code{arma::conv2()}. It performs a similar calculation to the standard
  \code{R} function \cr\code{filter(x=timeser, filter=weightv,
  method="convolution", sides=1)}, but it's over \code{6} times faster, and
  it doesn't produce any leading \code{NA} values.
}
\examples{
\dontrun{
# First example
# Calculate a time series of returns
retp <- na.omit(rutils::etfenv$returns[, c("IEF", "VTI")])
# Create simple weights equal to a 1 value plus zeros
weightv <- c(1, rep(0, 10))
# Calculate rolling weighted sums
retf <- HighFreq::roll_conv(retp, weightv)
# Compare with original
all.equal(coredata(retp), retf, check.attributes=FALSE)
# Second example
# Calculate exponentially decaying weights
weightv <- exp(-0.2*(1:11))
weightv <- weightv/sum(weightv)
# Calculate rolling weighted sums
retf <- HighFreq::roll_conv(retp, weightv)
# Calculate rolling weighted sums using filter()
retc <- filter(x=retp, filter=weightv, method="convolution", sides=1)
# Compare both methods
all.equal(retc[-(1:11), ], retf[-(1:11), ], check.attributes=FALSE)
}

}
