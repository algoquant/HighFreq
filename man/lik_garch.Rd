% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{lik_garch}
\alias{lik_garch}
\title{Calculate the log-likelihood of a time series of returns assuming a
\emph{GARCH(1,1)} process.}
\usage{
lik_garch(omega, alpha, beta, returns, minval = 1e-06)
}
\arguments{
\item{\code{omega}}{Parameter proportional to the long-term average level
of variance.}

\item{\code{alpha}}{The weight associated with recent realized variance
updates.}

\item{\code{beta}}{The weight associated with the past variance estimates.}

\item{\code{returns}}{A single-column \emph{matrix} of returns.}

\item{\code{minval}}{The floor value applied to the variance, to avoid zero
values. (The default is \code{minval = 0.000001}.)}
}
\value{
The log-likelihood value.
}
\description{
Calculate the log-likelihood of a time series of returns assuming a
\emph{GARCH(1,1)} process.
}
\details{
The function \code{lik_garch()} calculates the log-likelihood of a time
  series of returns assuming a \emph{GARCH(1,1)} process.
  
  It first estimates the rolling variance of the \code{returns} argument
  using function \code{sim_garch()}:
  \deqn{
    \sigma^2_i = \omega + \alpha r^2_i + \beta \sigma_{i-1}^2
  }
  Where \eqn{r_i} is the time series of returns, and \eqn{\sigma^2_i} is the
  estimated rolling variance.
  And \eqn{\omega}, \eqn{\alpha}, and \eqn{\beta} are the \emph{GARCH}
  parameters.
  It applies the floor value \code{minval} to the variance, to avoid zero
  values.  So the minimum value of the variance is equal to \code{minval}.

  The function \code{lik_garch()} calculates the log-likelihood assuming a
  normal distribution of returns conditional on the variance
  \eqn{\sigma^2_{i-1}} in the previous period, as follows:
  \deqn{
    likelihood = - \sum_{i=1}^n (\frac{r^2_i}{\sigma^2_{i-1}} + \log(\sigma^2_{i-1}))
  }
}
\examples{
\dontrun{
# Define the GARCH model parameters
al_pha <- 0.79
be_ta <- 0.2
om_ega <- 1e-4*(1-al_pha-be_ta)
# Calculate historical VTI returns
returns <- na.omit(rutils::etfenv$returns$VTI)
# Calculate the log-likelihood of VTI returns assuming GARCH(1,1)
HighFreq::lik_garch(omega=om_ega, alpha=al_pha,  beta=be_ta, returns=returns)
}

}
