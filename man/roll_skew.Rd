% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_skew}
\alias{roll_skew}
\title{Calculate a \emph{matrix} of skewness estimates over a rolling look-back
interval attached at the end points of a \emph{time series} or a
\emph{matrix}.}
\usage{
roll_skew(
  tseries,
  startp = 0L,
  endp = 0L,
  step = 1L,
  look_back = 1L,
  stub = 0L,
  method = "moment",
  confl = 0.75
)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{startp}}{An \emph{integer} vector of start points (the default
is \code{startp = 0}).}

\item{\code{endp}}{An \emph{integer} vector of end points (the default is 
\code{endp = 0}).}

\item{\code{step}}{The number of time periods between the end points (the
default is \code{step = 1}).}

\item{\code{look_back}}{The number of end points in the look-back interval
(the default is \code{look_back = 1}).}

\item{\code{stub}}{An \emph{integer} value equal to the first end point for
calculating the end points (the default is \code{stub = 0}).}

\item{\code{method}}{A \emph{character string} specifying the type of the
skewness model (the default is \code{method = "moment"} - see Details).}

\item{\code{confl}}{The confidence level for calculating the quantiles of
returns (the default is \code{confl = 0.75}).}
}
\value{
A \emph{matrix} of skewness estimates with the same number of
  columns as the input time series \code{tseries}, and the number of rows
  equal to the number of end points.
}
\description{
Calculate a \emph{matrix} of skewness estimates over a rolling look-back
interval attached at the end points of a \emph{time series} or a
\emph{matrix}.
}
\details{
The function \code{roll_skew()} calculates a \emph{matrix} of skewness
  estimates over rolling look-back intervals attached at the end points of
  the \emph{time series} \code{tseries}.
  
  The function \code{roll_skew()} performs a loop over the end points, and
  at each end point it subsets the time series \code{tseries} over a
  look-back interval equal to \code{look_back} number of end points.
  
  It passes the subset time series to the function \code{calc_skew()}, which
  calculates the skewness.
  See the function \code{calc_skew()} for a description of the skewness
  methods.
  
  If the arguments \code{endp} and \code{startp} are not given then it
  first calculates a vector of end points separated by \code{step} time
  periods. It calculates the end points along the rows of \code{tseries}
  using the function \code{calc_endpoints()}, with the number of time
  periods between the end points equal to \code{step} time periods.

  For example, the rolling skewness at \code{25} day end points, with a
  \code{75} day look-back, can be calculated using the parameters
  \code{step = 25} and \code{look_back = 3}.

  The function \code{roll_skew()} is implemented in \code{RcppArmadillo}
  \code{C++} code, which makes it several times faster than \code{R} code.
}
\examples{
\dontrun{
# Define time series of returns using package rutils
retp <- na.omit(rutils::etfenv$returns$VTI)
# Define end points and start points
endp <- 1 + HighFreq::calc_endpoints(NROW(retp), step=25)
startp <- HighFreq::calc_startpoints(endp, look_back=3)
# Calculate the rolling skewness at 25 day end points, with a 75 day look-back
skewv <- HighFreq::roll_skew(retp, step=25, look_back=3)
# Calculate the rolling skewness using R code
skewr <- sapply(1:NROW(endp), function(it) {
  HighFreq::calc_skew(retp[startp[it]:endp[it], ])
})  # end sapply
# Compare the skewness estimates
all.equal(drop(skewv), skewr, check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::roll_skew(retp, step=25, look_back=3),
  Rcode=sapply(1:NROW(endp), function(it) {
    HighFreq::calc_skew(retp[startp[it]:endp[it], ])
  }),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}
}
