% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{to_period}
\alias{to_period}
\title{Aggregate an \emph{OHLC} time series to a lower periodicity.}
\usage{
to_period(oh_lc, end_points)
}
\arguments{
\item{\code{oh_lc}}{A \emph{matrix} or \emph{time series} with four or
five columns of \emph{OHLC} data.}

\item{\emph{end_points}}{An integer \emph{vector} of end points.}
}
\value{
A \emph{matrix} with \emph{OHLC} data, with the same number of
  columns as \code{oh_lc}, and the number of rows equal to the number of
  \emph{end_points} minus one.
}
\description{
Given an \emph{OHLC} time series at high periodicity (say seconds),
calculates the \emph{OHLC} prices at lower periodicity (say minutes).
}
\details{
The function \code{to_period()} performs a loop over the
  \emph{end_points} and calls function \code{agg_ohlc()}.

  The function \code{to_period()} performs a similar aggregation as function
  \code{to.period()} from package
  \href{https://cran.r-project.org/web/packages/xts/index.html}{xts}.
}
\examples{
\dontrun{
# Define matrix of OHLC data
oh_lc <- rutils::etf_env$VTI[, 1:5]
# Define end points at 25 day intervals
end_points <- rutils::calc_endpoints(oh_lc, inter_val=25)
# Aggregate over end_points:
ohlc_agg <- HighFreq::to_period(oh_lc=oh_lc, end_points=end_points-1)
# Compare with xts::to.period()
ohlc_agg_xts <- .Call("toPeriod", oh_lc, as.integer(end_points), TRUE, NCOL(oh_lc), FALSE, FALSE, colnames(oh_lc), PACKAGE="xts")
all.equal(ohlc_agg, coredata(ohlc_agg_xts), check.attributes=FALSE)
}

}
