% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_var}
\alias{calc_var}
\title{Calculate the dispersion (variance) of the columns of a \emph{time series}
or a \emph{matrix} using \code{RcppArmadillo}.}
\usage{
calc_var(tseries, method = "moment", confl = 0.75)
}
\arguments{
\item{\code{tseries}}{A \emph{time series} or a \emph{matrix} of data.}

\item{\code{method}}{A \emph{character string} specifying the type of the
dispersion model (the default is \code{method = "moment"} - see Details).}

\item{\code{confl}}{The confidence level for calculating the quantiles of
returns (the default is \code{confl = 0.75}).}
}
\value{
A row vector equal to the dispersion of the columns of the matrix
  \code{tseries}.
}
\description{
Calculate the dispersion (variance) of the columns of a \emph{time series}
or a \emph{matrix} using \code{RcppArmadillo}.
}
\details{
The function \code{calc_var()} calculates the dispersion of the
  columns of a \emph{time series} or a \emph{matrix} of data using
  \code{RcppArmadillo} \code{C++} code.
  
  The dispersion is a measure of the variability of the data.  Examples of
  dispersion are the variance and the Median Absolute Deviation (\emph{MAD}).

  If \code{method = "moment"} (the default) then \code{calc_var()}
  calculates the dispersion as the second moment of the data (the variance).
  Then \code{calc_var()} performs the same calculation as the function
  \code{colVars()} from package
  \href{https://cran.r-project.org/web/packages/matrixStats/index.html}{matrixStats},
  but it's much faster because it uses \code{RcppArmadillo} \code{C++} code.

  If \code{method = "quantile"} then it calculates the dispersion as the
  difference between the quantiles as follows:
  \deqn{
    \sigma = q_{\alpha} - q_{1-\alpha}
  }
  Where \eqn{\alpha} is the confidence level for calculating the quantiles.
  
  If \code{method = "nonparametric"} then it calculates the dispersion as the
  Median Absolute Deviation (\emph{MAD}):
  \deqn{
    MAD = median(abs(x - median(x)))
  }
  It also multiplies the \emph{MAD} by a factor of \code{1.4826}, to make it
  comparable to the standard deviation.

  If \code{method = "nonparametric"} then \code{calc_var()} performs the
  same calculation as the function \code{stats::mad()}, but it's much faster
  because it uses \code{RcppArmadillo} \code{C++} code.

  If the number of rows of \code{tseries} is less than \code{3} then it
  returns zeros.
}
\examples{
\dontrun{
# Calculate VTI and XLF returns
retp <- na.omit(rutils::etfenv$returns[, c("VTI", "XLF")])
# Compare HighFreq::calc_var() with standard var()
all.equal(drop(HighFreq::calc_var(retp)), 
  apply(retp, 2, var), check.attributes=FALSE)
# Compare HighFreq::calc_var() with matrixStats
all.equal(drop(HighFreq::calc_var(retp)), 
  matrixStats::colVars(retp), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with matrixStats and with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::calc_var(retp),
  matrixStats=matrixStats::colVars(retp),
  Rcode=apply(retp, 2, var),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
# Compare HighFreq::calc_var() with stats::mad()
all.equal(drop(HighFreq::calc_var(retp, method="nonparametric")), 
  sapply(retp, mad), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with stats::mad()
summary(microbenchmark(
  Rcpp=HighFreq::calc_var(retp, method="nonparametric"),
  Rcode=sapply(retp, mad),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
