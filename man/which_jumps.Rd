% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HighFreq.R
\name{which_jumps}
\alias{which_jumps}
\title{Calculate a \emph{Boolean} vector that identifies isolated jumps (spikes) in
a single-column \emph{xts} time series or vector, over a rolling interval.}
\usage{
which_jumps(x_ts, look_back = 51, vol_mult = 2)
}
\arguments{
\item{x_ts}{A single-column \emph{xts} time series, or a \emph{numeric} or
\emph{Boolean} vector.}

\item{look_back}{The number of data points in rolling look-back interval for 
estimating rolling quantile.}

\item{vol_mult}{The quantile multiplier.}
}
\value{
A \emph{Boolean} vector with the same number of rows as the input
  time series or vector.
}
\description{
Calculate a \emph{Boolean} vector that identifies isolated jumps (spikes) in
a single-column \emph{xts} time series or vector, over a rolling interval.
}
\details{
The function \code{which_jumps()} calculates a \emph{Boolean}
  vector, with \code{TRUE} for values that are isolated jumps (spikes).

  The function \code{which_jumps()} applies a version of the Hampel median
  filter to identify jumps, but instead of using the median absolute
  deviation (MAD), it uses the \code{0.9} quantile of returns calculated over
  a rolling interval.
  This is in contrast to function \code{which_extreme()}, which applies a
  Hampel filter to the values themselves, instead of the returns.
  Returns are defined as simple differences between neighboring values.

  Jumps (or spikes), are defined as isolated values that are very different
  from the neighboring values, either before or after.  Jumps create
  pairs of large neighboring returns of opposite sign.

  Jumps (spikes) must satisfy two conditions:
  \enumerate{
    \item Neighboring returns both exceed a multiple of the rolling quantile,
    \item The sum of neighboring returns doesn't exceed that multiple.
  }

  The quantile multiplier \code{vol_mult} controls the threshold at which
  values are identified as jumps. Smaller quantile multiplier values will
  cause more values to be identified as jumps.
}
\examples{
# Create local copy of SPY TAQ data
ta_q <- SPY_TAQ
# Calculate mid prices
mid_prices <- 0.5 * (ta_q[, "Bid.Price"] + ta_q[, "Ask.Price"])
# Replace whole rows containing suspect price jumps with NA, and perform locf()
ta_q[which_jumps(mid_prices, look_back=31, vol_mult=1.0), ] <- NA
ta_q <- xts:::na.locf.xts(ta_q)
}
