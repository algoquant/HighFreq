% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_varvec}
\alias{roll_varvec}
\title{Calculate a \emph{vector} of variance estimates over a rolling look-back
interval for a single-column \emph{time series} or a single-column
\emph{matrix}, using \code{RcppArmadillo}.}
\usage{
roll_varvec(tseries, lookb = 1L)
}
\arguments{
\item{\code{tseries}}{A single-column \emph{time series} or a single-column
\emph{matrix}.}

\item{\code{lookb}}{The length of the look-back interval, equal to the
number of \emph{vector} elements used for calculating a single variance
estimate (the default is \code{lookb = 1}).}
}
\value{
A single-column \emph{matrix} with the same number of elements as
  the input argument \code{tseries}.
}
\description{
Calculate a \emph{vector} of variance estimates over a rolling look-back
interval for a single-column \emph{time series} or a single-column
\emph{matrix}, using \code{RcppArmadillo}.
}
\details{
The function \code{roll_varvec()} calculates a \emph{vector} of variance
  estimates over a rolling look-back interval for a single-column \emph{time
  series} or a single-column \emph{matrix}, using \code{RcppArmadillo} \code{C++}
  code.
  
  The function \code{roll_varvec()} uses an expanding look-back interval in
  the initial warmup period, to calculate the same number of elements as the
  input argument \code{tseries}.

  The function \code{roll_varvec()} performs the same calculation as the
  function \code{roll_var()} from package
  \href{https://cran.r-project.org/web/packages/RcppRoll/index.html}{RcppRoll},
  but it's several times faster because it uses \code{RcppArmadillo} \code{C++}
  code.
}
\examples{
\dontrun{
# Create a vector of random returns
retp <- rnorm(1e6)
# Compare the variance estimates over 11-period look-back intervals
all.equal(drop(HighFreq::roll_varvec(retp, lookb=11))[-(1:10)], 
  RcppRoll::roll_var(retp, n=11))
# Compare the speed of RcppArmadillo with RcppRoll
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::roll_varvec(retp, lookb=11),
  RcppRoll=RcppRoll::roll_var(retp, n=11),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}
}
