% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{lag_vec}
\alias{lag_vec}
\title{Apply a lag to a \emph{vector} or a single-column \emph{time series}
using \code{RcppArmadillo}.}
\usage{
lag_vec(vec_tor, lagg = 1L)
}
\arguments{
\item{\code{vec_tor}}{A \emph{vector} or a single-column \emph{time series}.}

\item{\code{lagg}}{An \emph{integer} equal to the number of periods to lag
(the default is \code{lagg=1}).}
}
\value{
A column \emph{vector} with the same number of elements as the input
  vector.
}
\description{
Apply a lag to a \emph{vector} or a single-column \emph{time series}
using \code{RcppArmadillo}.
}
\details{
The function \code{lag_vec()} applies a lag to the input
  \emph{vector} by shifting its elements by the number equal to the argument
  \code{lagg}. For positive \code{lagg} values, the elements are shifted
  forward, and for negative \code{lagg} values they are shifted backward.
  The output \emph{vector} is padded with either the first or the last
  element, to maintain its original length.
}
\examples{
\dontrun{
# Create a vector of random returns
re_turns <- rnorm(1e6)
# Compare lag_vec() with rutils::lag_it()
all.equal(drop(HighFreq::lag_vec(re_turns)), 
  rutils::lag_it(re_turns))
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  rcpp=HighFreq::lag_vec(re_turns),
  rcode=rutils::lag_it(re_turns),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
