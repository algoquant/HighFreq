% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{lag_vec}
\alias{lag_vec}
\title{Apply a lag to a single-column \emph{time series} or a \emph{vector} 
using \code{RcppArmadillo}.}
\usage{
lag_vec(tseries, lagg = 1L, pad_zeros = TRUE)
}
\arguments{
\item{\code{tseries}}{A single-column \emph{time series} or a
\emph{vector}.}

\item{\code{lagg}}{An \emph{integer} equal to the number of periods to lag.
(The default is \code{lagg = 1}.)}

\item{\code{pad_zeros}}{\emph{Boolean} argument: Should the output be padded
with zeros? (The default is \code{pad_zeros = TRUE}.)}
}
\value{
A column \emph{vector} with the same number of elements as the input
  time series.
}
\description{
Apply a lag to a single-column \emph{time series} or a \emph{vector} 
using \code{RcppArmadillo}.
}
\details{
The function \code{lag_vec()} applies a lag to the input \emph{time
  series} \code{tseries} by shifting its elements by the number equal to the
  argument \code{lagg}.  For positive \code{lagg} values, the elements are
  shifted forward in time (down), and for negative \code{lagg} values they
  are shifted backward (up).
  
  The output \emph{vector} is padded with either zeros (the default), or
  with data from \code{tseries}, so that it has the same number of element
  as \code{tseries}.
  If the \code{lagg} is positive, then the first element is copied and added
  upfront.
  If the \code{lagg} is negative, then the last element is copied and added
  to the end.
  
  As a rule, if \code{tseries} contains returns data, then the output
  \emph{matrix} should be padded with zeros, to avoid data snooping.
  If \code{tseries} contains prices, then the output \emph{matrix} should
  be padded with the prices.
}
\examples{
\dontrun{
# Create a vector of random returns
retp <- rnorm(1e6)
# Compare lag_vec() with rutils::lagit()
all.equal(drop(HighFreq::lag_vec(retp)), 
  rutils::lagit(retp))
# Compare the speed of RcppArmadillo with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::lag_vec(retp),
  Rcode=rutils::lagit(retp),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
