% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{roll_vecw}
\alias{roll_vecw}
\title{Calculate the rolling weighted sums over a single-column \emph{time series}
or a single-column \emph{matrix} using \code{RcppArmadillo}.}
\usage{
roll_vecw(tseries, weightv)
}
\arguments{
\item{\code{tseries}}{A single-column \emph{time series} or a single-column
\emph{matrix}.}

\item{\code{weightv}}{A single-column \emph{matrix} of weights.}
}
\value{
A single-column \emph{matrix} of the same length as the argument
  \code{tseries}.
}
\description{
Calculate the rolling weighted sums over a single-column \emph{time series}
or a single-column \emph{matrix} using \code{RcppArmadillo}.
}
\details{
The function \code{roll_vecw()} calculates the rolling weighted sums of a
  single-column \emph{matrix} over its past values (a convolution with the
  single-column \emph{matrix} of weights), using \code{RcppArmadillo}. It
  performs a similar calculation as the standard \code{R} function
  \cr\code{stats::filter(x=series, filter=weightv, method="convolution",
  sides=1)}, but it's over \code{6} times faster, and it doesn't produce any
  \code{NA} values.
}
\examples{
\dontrun{
# First example
# Define a single-column matrix of returns
retsp <- zoo::coredata(na.omit(rutils::etfenv$returns$VTI))
# Create simple weights
weightv <- c(1, rep(0, 10))
# Calculate rolling weighted sums
weighted <- HighFreq::roll_vecw(tseries=retsp, weightv=weightv)
# Compare with original
all.equal(zoo::coredata(retsp), weighted, check.attributes=FALSE)
# Second example
# Create exponentially decaying weights
weightv <- exp(-0.2*1:11)
weightv <- weightv/sum(weightv)
# Calculate rolling weighted sums
weighted <- HighFreq::roll_vecw(tseries=retsp, weightv=weightv)
# Calculate rolling weighted sums using filter()
filtered <- stats::filter(x=retsp, filter=weightv, method="convolution", sides=1)
# Compare both methods
all.equal(filtered[-(1:11)], weighted[-(1:11)], check.attributes=FALSE)
# Compare the speed of Rcpp with R code
library(microbenchmark)
summary(microbenchmark(
  Rcpp=HighFreq::roll_vecw(tseries=retsp, weightv=weightv),
  Rcode=stats::filter(x=retsp, filter=weightv, method="convolution", sides=1),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
