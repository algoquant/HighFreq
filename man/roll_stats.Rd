% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HighFreq.R
\name{roll_stats}
\alias{roll_stats}
\title{Calculate a vector of statistics over an \emph{OHLC} time series, and
calculate a rolling mean over the statistics.}
\usage{
roll_stats(
  ohlc,
  calc_stats = "ohlc_variance",
  look_back = 11,
  weighted = TRUE,
  ...
)
}
\arguments{
\item{...}{additional parameters to the function \code{calc_stats}.}

\item{\code{ohlc}}{An \emph{OHLC} time series of prices and trading volumes, in
\emph{xts} format.}

\item{\code{calc_stats}}{The name of the function for estimating statistics of a single
row of \emph{OHLC} data, such as volatility, skew, and higher moments.}

\item{\code{look_back}}{The size of the look-back interval, equal to the number of
rows of data used for calculating the rolling mean.}

\item{\code{weighted}}{\emph{Boolean} argument: should statistic be weighted by
trade volume? (default \code{TRUE})}
}
\value{
An \emph{xts} time series with a single column and the same number of
  rows as the argument \code{ohlc}.
}
\description{
Calculate a vector of statistics over an \emph{OHLC} time series, and
calculate a rolling mean over the statistics.
}
\details{
The function \code{roll_stats()} calculates a vector of statistics
  over an \emph{OHLC} time series, such as volatility, skew, and higher
  moments.  The statistics could also be any other aggregation of a single
  row of \emph{OHLC} data, for example the \emph{High} price minus the
  \emph{Low} price squared.  The length of the vector of statistics is equal
  to the number of rows of the argument \code{ohlc}. Then it calculates a
  trade volume weighted rolling mean over the vector of statistics over and
  calculate statistics.
}
\examples{
# Calculate time series of rolling variance and skew estimates
var_rolling <- roll_stats(ohlc=HighFreq::SPY, look_back=21)
skew_rolling <- roll_stats(ohlc=HighFreq::SPY, calc_stats="ohlc_skew", look_back=21)
skew_rolling <- skew_rolling/(var_rolling)^(1.5)
skew_rolling[1, ] <- 0
skew_rolling <- rutils::na_locf(skew_rolling)

}
