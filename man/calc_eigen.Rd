% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_eigen}
\alias{calc_eigen}
\title{Calculate the eigen decomposition of a square matrix using
\code{RcppArmadillo}.}
\usage{
calc_eigen(matrixv)
}
\arguments{
\item{\code{matrixv}}{A square matrix.}
}
\value{
A list with two elements: a \emph{vector} of eigenvalues (named
  "values"), and a \emph{matrix} of eigenvectors (named "vectors").
}
\description{
Calculate the eigen decomposition of a square matrix using
\code{RcppArmadillo}.
}
\details{
The function \code{calc_eigen()} calls the \code{Armadillo} function
  \code{arma::eig_sym()} to calculate the eigen decomposition.
  For small matrices, the function \code{calc_eigen()} is several times
  faster than the \code{R} function \code{eigen()}, since
  \code{calc_eigen()} has no overhead in \code{R} code. But for large
  matrices, they are about the same, since both call \code{C++} code.
}
\examples{
\dontrun{
# Create random positive semi-definite matrix
matrixv <- matrix(runif(25), nc=5)
matrixv <- t(matrixv) \%*\% matrixv
# Calculate the eigen decomposition using RcppArmadillo
eigend <- HighFreq::calc_eigen(matrixv)
# Calculate the eigen decomposition using R
eigenr <- eigen(matrixv)
# Compare the eigen decompositions
all.equal(eigenr$values, drop(eigend$values))
all.equal(abs(eigenr$vectors), abs(eigend$vectors))
# Compare the speed of Rcpp with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_eigen(matrixv),
  Rcode=eigen(matrixv),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
