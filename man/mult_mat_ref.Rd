% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{mult_mat_ref}
\alias{mult_mat_ref}
\title{Multiply the rows or columns of a \emph{matrix} times a \emph{vector},
element-wise and in place (without copying the data in memory).}
\usage{
mult_mat_ref(vectorv, matrixv, byrow = TRUE)
}
\arguments{
\item{\code{vectorv}}{A \emph{numeric} \emph{vector}.}

\item{\code{matrixv}}{A \emph{numeric} \emph{matrix}.}

\item{\code{byrow}}{A \emph{Boolean} argument: if \code{TRUE} then multiply
the rows of \code{matrixv} by \code{vectorv}, otherwise multiply the columns
(the default is \code{byrow = TRUE}.)}
}
\value{
Void (no return value).
}
\description{
Multiply the rows or columns of a \emph{matrix} times a \emph{vector},
element-wise and in place (without copying the data in memory).
}
\details{
The function \code{mult_mat_ref()} multiplies the rows or columns of a
  \emph{matrix} times a \emph{vector}, element-wise and in place (without
  copying the data in memory).

  It accepts a \emph{pointer} to the argument \code{matrixv}, and it
  overwrites the old \code{matrix} values with the new values. It performs
  the calculation in place, without copying the \emph{matrix} in memory,
  which can significantly increase the computation speed for large matrices.

  If \code{byrow = TRUE} (the default), then function \code{mult_mat_ref()}
  multiplies the rows of the argument \code{matrixv} times the argument
  \code{vectorv}.
  Otherwise it multiplies the columns of \code{matrixv}.

  In \code{R}, \emph{matrix} multiplication is performed by columns.
  Performing multiplication by rows is often required, for example when
  multiplying stock returns by portfolio weights.
  But performing multiplication by rows requires explicit loops in \code{R},
  or it requires \emph{matrix} transpose.  And both are slow.

  The function \code{mult_mat_ref()} uses \code{RcppArmadillo} \code{C++}
  code, so when multiplying large \emph{matrix} columns it's several times
  faster than vectorized \code{R} code, and it's even much faster compared
  to \code{R} when multiplying the \emph{matrix} rows.

  The function \code{mult_mat_ref()} performs loops over the \emph{matrix}
  rows and columns using the \emph{Armadillo} operators \code{each_row()}
  and \code{each_col()}, instead of performing explicit \code{for()} loops
  (both methods are equally fast).
}
\examples{
\dontrun{
# Create vector and matrix data
matrixv <- matrix(round(runif(25e4), 2), nc=5e2)
vectorv <- round(runif(5e2), 2)

# Multiply the matrix rows using R
matrixr <- t(vectorv*t(matrixv))
# Multiply the matrix rows using C++
HighFreq::mult_mat_ref(vectorv, matrixv, byrow=TRUE)
all.equal(matrixr, matrixv)
# Compare the speed of Rcpp with R code
library(microbenchmark)
summary(microbenchmark(
    Rcpp=HighFreq::mult_mat_ref(vectorv, matrixv, byrow=TRUE),
    Rcode=t(vectorv*t(matrixv)),
    times=10))[, c(1, 4, 5)]  # end microbenchmark summary
    
# Multiply the matrix columns using R
matrixr <- vectorv*matrixv
# Multiply the matrix columns using C++
HighFreq::mult_mat_ref(vectorv, matrixv, byrow=FALSE)
all.equal(matrixr, matrixv)
# Compare the speed of Rcpp with R code
library(microbenchmark)
summary(microbenchmark(
    Rcpp=HighFreq::mult_mat_ref(vectorv, matrixv, byrow=FALSE),
    Rcode=vectorv*matrixv,
    times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
