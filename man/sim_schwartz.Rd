% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{sim_schwartz}
\alias{sim_schwartz}
\title{Simulate a \emph{Schwartz} process using \emph{Rcpp}.}
\usage{
sim_schwartz(prici, priceq, theta, innov)
}
\arguments{
\item{\code{prici}}{The initial price.}

\item{\code{priceq}}{The equilibrium price.}

\item{\code{theta}}{The strength of mean reversion.}

\item{\code{innov}}{A single-column \emph{matrix} of innovations (random
numbers).}
}
\value{
A single-column \emph{matrix} of simulated prices, with the same
  number of rows as the argument \code{innov}.
}
\description{
Simulate a \emph{Schwartz} process using \emph{Rcpp}.
}
\details{
The function \code{sim_schwartz()} simulates a \emph{Schwartz} process
  using fast \emph{Rcpp} \code{C++} code.
  
  The \emph{Schwartz} process is the exponential of the
  \emph{Ornstein-Uhlenbeck} process, and similar comments apply to it.
  The prices are calculated as the exponentially compounded returns, so they
  are never negative. The log prices can be obtained by taking the logarithm
  of the prices.
  
  The function \code{sim_schwartz()} simulates the percentage returns as
  equal to the difference between the equilibrium price \eqn{\mu} minus the
  latest price \eqn{p_{i-1}}, times the mean reversion parameter
  \eqn{\theta}, plus a random normal innovation.

  The function \code{sim_schwartz()} returns a single-column \emph{matrix}
  representing the \emph{time series} of simulated prices.
}
\examples{
\dontrun{
# Define the Schwartz model parameters
prici <- 1.0
priceq <- 2.0
thetav <- 0.01
innov <- matrix(rnorm(1e3, sd=0.01))
# Simulate Schwartz process using Rcpp
pricev <- HighFreq::sim_schwartz(prici=prici, priceq=priceq, theta=thetav, innov=innov)
plot(pricev, t="l", main="Simulated Schwartz Prices", ylab="prices")
}

}
