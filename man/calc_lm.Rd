% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_lm}
\alias{calc_lm}
\title{Perform multivariate linear regression using least squares and return a
named list of regression coefficients, their t-values, and p-values.}
\usage{
calc_lm(response, predictor)
}
\arguments{
\item{\code{response}}{A single-column \emph{time series} or a \emph{vector}
of response data.}

\item{\code{predictor}}{A \emph{time series} or a \emph{matrix} of predictor
data.}
}
\value{
A named list with three elements: a \emph{matrix} of coefficients
  (named \emph{"coefficients"}), the \emph{z-score} of the last residual
  (named \emph{"zscore"}), and a \emph{vector} with the R-squared and
  F-statistic (named \emph{"stats"}). The numeric \emph{matrix} of
  coefficients named \emph{"coefficients"} contains the alpha and beta
  coefficients, and their \emph{t-values} and \emph{p-values}.
}
\description{
Perform multivariate linear regression using least squares and return a
named list of regression coefficients, their t-values, and p-values.
}
\details{
The function \code{calc_lm()} performs the same calculations as the
  function \code{lm()} from package \emph{stats}. 
  It uses \code{RcppArmadillo} \code{C++} code so it's several times faster
  than \code{lm()}. The code was inspired by this article (but it's not
  identical to it):
  http://gallery.rcpp.org/articles/fast-linear-model-with-armadillo/
}
\examples{
\dontrun{
# Calculate historical returns
retsp <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
# Response equals XLF returns
response <- retsp[, 1]
# Predictor matrix equals VTI and IEF returns
predictor <- retsp[, -1]
# Perform multivariate regression using lm()
lmod <- lm(response ~ predictor)
lmodsum <- summary(lmod)
# Perform multivariate regression using calc_lm()
regarma <- HighFreq::calc_lm(response=response, predictor=predictor)
# Compare the outputs of both functions
all.equal(regarma$coefficients[, "coeff"], unname(coef(lmod)))
all.equal(unname(regarma$coefficients), unname(lmodsum$coefficients))
all.equal(unname(regarma$stats), c(lmodsum$r.squared, unname(lmodsum$fstatistic[1])))
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
  Rcpp=HighFreq::calc_lm(response=response, predictor=predictor),
  Rcode=lm(response ~ predictor),
  times=10))[, c(1, 4, 5)]  # end microbenchmark summary
}

}
