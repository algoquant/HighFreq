% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{calc_lm}
\alias{calc_lm}
\title{Perform multivariate linear regression using \emph{Rcpp}.}
\usage{
calc_lm(res_ponse, de_sign)
}
\arguments{
\item{\code{res_ponse}}{A \emph{vector} of response data.}

\item{\code{de_sign}}{A \emph{matrix} of design (predictor i.e.
explanatory) data.}
}
\value{
A named list with three elements: a \emph{matrix} of coefficients
  (named \emph{"coefficients"}), the \emph{z-score} of the last residual
  (named \emph{"z_score"}), and a \emph{vector} with the R-squared and
  F-statistic (named \emph{"stats"}). The numeric \emph{matrix} of
  coefficients named \emph{"coefficients"} containes the alpha and beta
  coefficients, and their \emph{t-values} and \emph{p-values}.
}
\description{
Perform multivariate linear regression using \emph{Rcpp}.
}
\details{
The function \code{calc_lm()} performs the same calculations as the
  function \code{lm()} from package \emph{stats}. It uses
  \code{RcppArmadillo} \code{C++} code and is about \emph{10} times faster
  than \code{lm()}. The code was inspired by this article (but it's not
  identical to it):
  http://gallery.rcpp.org/articles/fast-linear-model-with-armadillo/
}
\examples{
\dontrun{
# Define design matrix with explanatory variables
len_gth <- 100; n_var <- 5
de_sign <- matrix(rnorm(n_var*len_gth), nc=n_var)
# Response equals linear form plus error terms
weight_s <- rnorm(n_var)
res_ponse <- -3 + de_sign \%*\% weight_s + rnorm(len_gth, sd=0.5)
# Perform multivariate regression using lm()
reg_model <- lm(res_ponse ~ de_sign)
sum_mary <- summary(reg_model)
# Perform multivariate regression using calc_lm()
reg_model_arma <- calc_lm(res_ponse=res_ponse, de_sign=de_sign)
reg_model_arma$coefficients
# Compare the outputs of both functions
all.equal(reg_model_arma$coefficients[, "coeff"], unname(coef(reg_model)))
all.equal(unname(reg_model_arma$coefficients), unname(sum_mary$coefficients))
all.equal(drop(reg_model_arma$residuals), unname(reg_model$residuals))
all.equal(unname(reg_model_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
}

}
