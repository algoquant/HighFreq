plot(cumsum(re_turns), t="l", main="Simulated Schwartz Prices")
eq_price
plot(exp(cumsum(re_turns)), t="l", main="Simulated Schwartz Prices")
eq_price
library(HighFreq)
foo <- HighFreq::sim_schwartz(eq_price=eq_price, volat=vol_at,
theta=the_ta, innov=in_nov)
plot(foo, t="l", main="Simulated Schwartz Prices")
tail(foo)
library(HighFreq)
re_turns <- HighFreq::sim_schwartz(eq_price=eq_price, volat=vol_at,
theta=the_ta, innov=in_nov)
plot(exp(cumsum(re_turns)), t="l", main="Simulated Schwartz Prices")
head(re_turns)
tail(re_turns)
cumsum(re_turns)
sum(re_turns)
exp(sum(re_turns))
plot(cumprod(exp(re_turns)), t="l", main="Simulated Schwartz Prices")
sd(in_nov)
library(HighFreq)
re_turns <- HighFreq::sim_schwartz(eq_price=eq_price, volat=vol_at,
theta=the_ta, innov=in_nov)
plot(exp(cumsum(re_turns)), t="l", main="Simulated Schwartz Prices")
library(HighFreq)
foo <- HighFreq::sim_schwartz(eq_price=eq_price, volat=vol_at,
theta=the_ta, innov=in_nov)
plot(foo[, 1], t="l", main="Simulated Schwartz Prices")
plot(foo[, 2], t="l", main="Simulated Schwartz Prices")
bar <- exp(cumsum(foo[, 1]))
tail(bar)
NROW(bar)
bar <- numeric(1e3)
for (i in 2:NROW(foo)) bar[i] <- bar[i] * exp(foo[, i])
for (i in 2:NROW(foo)) bar[i] <- bar[i-1] * exp(foo[, i])
for (i in 2:NROW(foo)) bar[i] <- bar[i-1] * exp(foo[, i-1])
for (i in 2:NROW(foo)) bar[i] <- {bar[i-1] * exp(foo[, i-1])}
for (i in 2:NROW(foo)) {bar[i] <- bar[i-1] * exp(foo[, i-1])}
bar <- numeric(1e3)
for (i in 2:NROW(foo)) {bar[i] <- bar[i-1] * exp(foo[, i-1])}
NROW(foo)
exp(foo[, 2])
for (i in 2:NROW(foo)) {bar[i] <- bar[i-1] * exp(foo[i-1, 1])}
tail(bar)
exp(foo[3, 1])
exp(foo[4, 1])
exp(foo[950, 1])
sum(bar)
bar <- numeric(1e3)
library(HighFreq)
eq_price <- 2.0
re_turns <- HighFreq::sim_schwartz(eq_price=eq_price, volat=vol_at,
theta=the_ta, innov=in_nov)
plot(exp(cumsum(re_turns)), t="l", main="Simulated Schwartz Prices")
plot(exp(cumsum(re_turns)), t="l", main="Simulated Schwartz Prices", ylab="prices")
library(HighFreq)
setwd("../lecture_slides")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
ls()
rm(list = ls())
library(HighFreq)
ome_ga <- 0.01
al_pha <- 0.5
be_ta <- 0.2
in_nov <- matrix(rnorm(1e3))
garch_data <- sim_garch(omega=ome_ga, alpha=al_pha,  beta=be_ta, innov=in_nov)
plot(cumsum(garch_data[, 1]), t="l", main="Simulated GARCH Cumulative Returns", ylab="cumulative returns")
plot(cumsum(garch_data[, 2]), t="l", main="Simulated GARCH Vol", ylab="vol")
plot(garch_data[, 2], t="l", main="Simulated GARCH Vol", ylab="vol")
eq_price <- 1.0
sig_ma <- 0.01
the_ta <- 0.01
in_nov <- matrix(rnorm(1e3))
re_turns <- HighFreq::sim_ou(eq_price=eq_price, volat=sig_ma,
theta=the_ta, innov=in_nov)
plot(cumsum(re_turns), t="l", main="Simulated Ornstein-Uhlenbeck Prices",
ylab="prices")
eq_price <- 2.0
sig_ma <- 0.01
the_ta <- 0.01
in_nov <- matrix(rnorm(1e3))
# Simulate Schwartz process using Rcpp
re_turns <- HighFreq::sim_schwartz(eq_price=eq_price, volat=sig_ma,
theta=the_ta, innov=in_nov)
plot(exp(cumsum(re_turns)), t="l", main="Simulated Schwartz Prices",
ylab="prices")
co_eff <- matrix(c(0.2, 0.2))
in_nov <- matrix(rnorm(1e4, sd=0.01))
filter_ed <- filter(in_nov, filter=co_eff, method="recursive")
re_turns <- HighFreq::sim_ar(co_eff, in_nov)
all.equal(as.numeric(re_turns), as.numeric(filter_ed))
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::sim_ar(co_eff, in_nov),
Rcode=filter(in_nov, filter=co_eff, method="recursive"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
eq_price <- 1.0
sig_ma <- 0.01
the_ta <- 0.01
co_eff <- matrix(c(0.2, 0.2))
in_nov <- matrix(rnorm(1e3, sd=0.01))
re_turns <- HighFreq::sim_df(eq_price=eq_price, volat=sig_ma,
theta=the_ta, co_eff, innov=in_nov)
plot(cumsum(re_turns), t="l", main="Simulated Dickey-Fuller Prices")
eq_price <- 1.0
the_ta <- 0.01
co_eff <- matrix(c(0.2, 0.2))
in_nov <- matrix(rnorm(1e3))
re_turns <- HighFreq::sim_df(eq_price=eq_price, volat=sig_ma,
theta=the_ta, co_eff, innov=in_nov)
plot(cumsum(re_turns), t="l", main="Simulated Dickey-Fuller Prices")
setwd("../HighFreq/")
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq/")
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq/")
getwd()
setwd("../lecture_slides")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
om_ega
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- rnorm(1, sd=sqrt(vari_ance[1]))
set.seed(1121)  # Reset random numbers
for (i in 2:n_rows) {
re_turns[i] <- rnorm(n=1, sd=sqrt(vari_ance[i-1]))
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH cumulative returns")
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
dev.new(width=6, height=4, noRStudioGD=TRUE)
par(mar=c(2, 2, 3, 1), oma=c(0, 0, 0, 0))
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("/Users/jerzy/Develop/lecture_slides/figure/garch_volat.png", type="png", device=dev.cur(), width=6, height=5)
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("/Users/jerzy/Develop/lecture_slides/figure/garch_returns.png", type="png", device=dev.cur(), width=6, height=5)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("/Users/jerzy/Develop/lecture_slides/figure/garch_volat.png", type="png", device=dev.cur(), width=6, height=5)
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("figure/garch_volat.png", type="png", device=dev.cur(), width=6, height=5)
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("figure/garch_returns.png", type="png", device=dev.cur(), width=6, height=5)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
class(re_turns)
n_rows <- 1000
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- rnorm(1, sd=sqrt(vari_ance[1]))
set.seed(1121)  # Reset random numbers
for (i in 2:n_rows) {
re_turns[i] <- rnorm(n=1, sd=sqrt(vari_ance[i-1]))
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("figure/garch_returns.png", type="png", device=dev.cur(), width=6, height=5)
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("figure/garch_volat.png", type="png", device=dev.cur(), width=6, height=5)
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
dev.cur()
quartz.save("figure/garch_returns.png", type="png", width=6, height=5)
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("figure/garch_returns.png", type="png", width=6, height=5)
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("figure/garch_volat.png", type="png", width=6, height=5)
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("figure/garch_returns.png", type="png", width=6, height=5)
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("figure/garch_volat.png", type="png", width=6, height=5)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("figure/garch_returns.png", type="png", width=5, height=4)
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("figure/garch_volat.png", type="png", width=5, height=4)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
class(re_turns)
ls()
rm(list = ls())
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- rnorm(1, sd=sqrt(vari_ance[1]))
# Simulate GARCH model
set.seed(1121)  # Reset random numbers
for (i in 2:n_rows) {
re_turns[i] <- rnorm(n=1, sd=sqrt(vari_ance[i-1]))
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
plot(cumsum(re_turns), t="l", lwd=2, col="blue", xlab="", ylab="",
main="GARCH Cumulative Returns")
quartz.save("figure/garch_returns.png", type="png", width=6, height=4)
# Plot GARCH volatility
plot(sqrt(vari_ance), t="l", col="blue", xlab="", ylab="",
main="GARCH Volatility")
quartz.save("figure/garch_volat.png", type="png", width=6, height=4)
class(re_turns)
ls()
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
class(re_turns)
ls()
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- rnorm(1, sd=sqrt(vari_ance[1]))
# Simulate GARCH model
set.seed(1121)  # Reset random numbers
for (i in 2:n_rows) {
re_turns[i] <- rnorm(n=1, sd=sqrt(vari_ance[i-1]))
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
mean(((re_turns-mean(re_turns))/sd(re_turns))^4)
tseries::jarque.bera.test(re_turns)
histo_gram <- hist(re_turns, col="lightgrey",
xlab="returns", breaks=200, xlim=c(-0.05, 0.05),
ylab="frequency", freq=FALSE,
main="GARCH Returns Histogram")
lines(density(re_turns, adjust=1.5), lwd=3, col="blue")
optim_fit <- MASS::fitdistr(re_turns, densfun="t", df=2, lower=c(-1, 1e-7))
lo_cation <- optim_fit$estimate[1]
scal_e <- optim_fit$estimate[2]
lo_cation
scal_e
histo_gram <- hist(re_turns, col="lightgrey",
xlab="returns", breaks=200, xlim=c(-0.05, 0.05),
ylab="frequency", freq=FALSE, main="GARCH Returns Histogram")
lines(density(re_turns, adjust=1.5), lwd=3, col="blue")
curve(expr=dt((x-lo_cation)/scal_e, df=2)/scal_e,
type="l", xlab="", ylab="", lwd=3,
col="red", add=TRUE)
legend("topright", inset=0.05, bty="n",
leg=c("density", "t-distr w/ 2 dof"),
lwd=6, lty=1, col=c("blue", "red"))
histo_gram <- hist(re_turns, col="lightgrey",
xlab="returns", breaks=200, xlim=c(-0.04, 0.04),
ylab="frequency", freq=FALSE, main="GARCH Returns Histogram")
lines(density(re_turns, adjust=1.5), lwd=3, col="blue")
curve(expr=dt((x-lo_cation)/scal_e, df=2)/scal_e,
type="l", xlab="", ylab="", lwd=3,
col="red", add=TRUE)
legend("topright", inset=0.05, bty="n",
leg=c("density", "t-distr w/ 2 dof"),
lwd=6, lty=1, col=c("blue", "red"))
histo_gram <- hist(re_turns, col="lightgrey",
xlab="returns", breaks=200, xlim=c(-0.04, 0.04),
ylab="frequency", freq=FALSE, main="GARCH Returns Histogram")
lines(density(re_turns, adjust=1.5), lwd=2, col="blue")
curve(expr=dt((x-lo_cation)/scal_e, df=2)/scal_e,
type="l", xlab="", ylab="", lwd=2,
col="red", add=TRUE)
legend("topright", inset=0.05, bty="n",
leg=c("density", "t-distr w/ 2 dof"),
lwd=6, lty=1, col=c("blue", "red"))
histo_gram <- hist(re_turns, col="lightgrey",
xlab="returns", breaks=200, xlim=c(-0.03, 0.03),
ylab="frequency", freq=FALSE, main="GARCH Returns Histogram")
lines(density(re_turns, adjust=1.5), lwd=2, col="blue")
curve(expr=dt((x-lo_cation)/scal_e, df=2)/scal_e,
type="l", xlab="", ylab="", lwd=2,
col="red", add=TRUE)
legend("topright", inset=0.05, bty="n",
leg=c("density", "t-distr w/ 2 dof"),
lwd=6, lty=1, col=c("blue", "red"))
quartz.save("figure/garch_hist.png", type="png", width=6, height=4)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
rm(list = ls())
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- rnorm(1, sd=sqrt(vari_ance[1]))
# Simulate GARCH model
set.seed(1121)  # Reset random numbers
for (i in 2:n_rows) {
re_turns[i] <- rnorm(n=1, sd=sqrt(vari_ance[i-1]))
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
in_nov <- rnorm(n_rows)
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- sqrt(vari_ance[1])*in_nov[1]
set.seed(1121)  # Reset random numbers
in_nov <- rnorm(n_rows)
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- sqrt(vari_ance[1])*in_nov[1]
for (i in 2:n_rows) {
re_turns[i] <- sqrt(vari_ance[i-1])*in_nov[i]
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
garch_data <- sim_garch(omega=ome_ga, alpha=al_pha,  beta=be_ta, innov=matrix(in_nov))
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
set.seed(1121)  # Reset random numbers
in_nov <- rnorm(n_rows)
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- sqrt(vari_ance[1])*in_nov[1]
# Simulate GARCH model
for (i in 2:n_rows) {
re_turns[i] <- sqrt(vari_ance[i-1])*in_nov[i]
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
garch_data <- sim_garch(omega=ome_ga, alpha=al_pha,  beta=be_ta, innov=matrix(in_nov))
garch_data <- sim_garch(omega=om_ega, alpha=al_pha,  beta=be_ta, innov=matrix(in_nov))
all.equal(garch_data, cbind(re_turns, vari_ance))
dim(garch_data)
NROW(vari_ance)
all.equal(garch_data, cbind(re_turns, vari_ance), check.attributes=FALSE)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,
beta=be_ta, innov=matrix(in_nov))
re_turns <- garch_data[, 1]
vari_ance <- garch_data[, 2]
library(fGarch)
install.packages("fGarch")
library(fGarch)
garch_fit <- fGarch::garchFit(data=re_turns)
?fGarch::garchFit
round(garch_fit@fit$coef, 5)
sum(0.15973, 0.81079)
garch_fit@fit$coef
round(garch_fit@fit$coef, 6)
round(garch_fit@fit$coef, 7)
garch_fit@fit$coef
round(c(mu=mean(re_turns), omega=om_ega,
alpha=al_pha, beta=be_ta), 5)
c(mu=mean(re_turns), omega=om_ega,alpha=al_pha, beta=be_ta)
garch_fit@fit$coef
plot(sqrt(garch_fit@fit$series$h), t="l",
col="blue", xlab="", ylab="",
main="GARCH Fitted Volatility")
plot(sqrt(garch_fit@fit$series$h), t="l",
col="blue", xlab="", ylab="",
main="GARCH Fitted Volatility")
quartz.save("figure/garch_fGarch_fitted.png", type="png", width=6, height=4)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
garch_spec <- fGarch::garchSpec(model=list(omega=om_ega,
alpha=al_pha, beta=be_ta))
library(HighFreq)
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
# Calculate matrix of standard normal innovations
set.seed(1121)  # Reset random numbers
in_nov <- rnorm(n_rows)
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- sqrt(vari_ance[1])*in_nov[1]
# Simulate GARCH model
for (i in 2:n_rows) {
re_turns[i] <- sqrt(vari_ance[i-1])*in_nov[i]
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
vari_ance[1]
sqrt(vari_ance[1])
garch_fit <- fGarch::garchFit(data=re_turns)
garch_spec <- fGarch::garchSpec(model=list(omega=om_ega,
alpha=al_pha, beta=be_ta))
garch_sim <- fGarch::garchSim(spec=garch_spec, n=n_rows)
foo <- as.numeric(garch_sim)
tail(re_turns)
tail(foo)
?fGarch::garchSpec
garch_spec <- fGarch::garchSpec(model=list(ar=0, omega=om_ega,
alpha=al_pha, beta=be_ta))
garch_sim <- fGarch::garchSim(spec=garch_spec, n=n_rows)
garch_sim <- fGarch::garchSim(spec=garch_spec, n=n_rows)
foo <- as.numeric(garch_sim)
tail(foo)
garch_spec <- fGarch::garchSpec(model=list(ar=c(0, 0), omega=om_ega,
alpha=al_pha, beta=be_ta))
garch_sim <- fGarch::garchSim(spec=garch_spec, n=n_rows)
foo <- as.numeric(garch_sim)
tail(foo)
tail(re_turns)
garch_spec <- fGarch::garchSpec(model=list(ar=c(0, 0, 0, 0), omega=om_ega,
alpha=al_pha, beta=be_ta))
garch_sim <- fGarch::garchSim(spec=garch_spec, n=n_rows)
foo <- as.numeric(garch_sim)
tail(foo)
tail(re_turns)
?fGarch::garchSim
fGarch::garchSim
al_pha <- 0.2; be_ta <- 0.79 ;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
set.seed(1121)  # Reset random numbers
in_nov <- rnorm(n_rows)
re_turns <- numeric(n_rows)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
re_turns[1] <- sqrt(vari_ance[1])*in_nov[1]
# Simulate GARCH model
for (i in 2:n_rows) {
re_turns[i] <- sqrt(vari_ance[i-1])*in_nov[i]
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
vari_ance <- numeric(n_rows)
vari_ance[1] <- 2*om_ega/(1-al_pha-be_ta)
# Simulate GARCH model
for (i in 2:n_rows) {
vari_ance[i] <- om_ega + (al_pha + be_ta)*vari_ance[i-1]
}  # end for
dev.new(width=6, height=4, noRStudioGD=TRUE)
par(mar=c(2, 2, 3, 1), oma=c(0, 0, 0, 0))
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
main="GARCH Variance Forecasts")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=om_ega/(1-al_pha-be_ta), col="red")
var_eq <- om_ega/(1-al_pha-be_ta)
text(x=10, y=(var_eq), "var_eq")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=var_eq, col="red")
text(x=50, y=(1.1*var_eq), "var_eq")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=var_eq, col="red")
text(x=50, y=(1.1*var_eq), "Equilibrium variance")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=var_eq, col="red")
text(x=100, y=(1.1*var_eq), "Equilibrium variance")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=var_eq, col="red")
text(x=400, y=(1.1*var_eq), "Equilibrium variance")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=var_eq, col="red")
text(x=500, y=(1.1*var_eq), "Equilibrium variance")
plot(vari_ance, t="l", col="blue", xlab="", ylab="",
ylim=c(0, vari_ance[1]), main="GARCH Variance Forecasts")
abline(h=var_eq, col="red")
text(x=700, y=(1.1*var_eq), "Equilibrium variance")
quartz.save("figure/garch_forecast.png", type="png",
width=6, height=4)
setwd("../lecture_slides")
quartz.save("figure/garch_forecast.png", type="png",
width=6, height=4)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
re_turns <- drop(zoo::coredata(na.omit(rutils::etf_env$re_turns$VTI)))
tail(re_turns)
garch_fit <- fGarch::garchFit(data=re_turns)
garch_fit@fit$coef
sum(garch_fit@fit$coef[, 3:4])
sum(garch_fit@fit$coef[3:4])
garch_fit@fit$coef[2]/(1-sum(garch_fit@fit$coef[3:4]))
sqrt(garch_fit@fit$coef[2]/(1-sum(garch_fit@fit$coef[3:4])))
plot(sqrt(garch_fit@fit$series$h), t="l",
col="blue", xlab="", ylab="",
main="GARCH Fitted Volatility")
dev.new(width=6, height=4, noRStudioGD=TRUE)
par(mar=c(2, 2, 3, 1), oma=c(0, 0, 0, 0))
vari_ance <- HighFreq::roll_var(re_turns, look_back=21)
vari_ance <- HighFreq::roll_var(matrix(re_turns), look_back=21)
plot(sqrt(vari_ance), t="l",
col="blue", xlab="", ylab="",
main="Rolling Volatility")
