weal_th <- cbind(wealth_fda, log(wealth_fsa))
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed dollars", "Fixed shares (log)")
col_names <- colnames(weal_th)
dygraphs::dygraph(weal_th, main="Wealth of Weighted Portfolios") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="red", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="blue", strokeWidth=2) %>%
dyLegend(show="always", width=500)
(weight_s/rets_dollar[1, ])
(rets_dollar %*% (weight_s/rets_dollar[1, ]))[1, ]
foo <- (rets_dollar %*% (weight_s/rets_dollar[1, ]))
foo <- (rets_dollar %*% t(weight_s/rets_dollar[1, ]))
(rets_dollar %*% t(weight_s/rets_dollar[1, ]))[1, ]
weight_s <- c(0.5, 0.5)
wealth_fsa <- cumsum(rets_dollar %*% t(weight_s/rets_dollar[1, ]))
wealth_fda <- cumsum(rets_percent %*% weight_s)
weal_th <- cbind(wealth_fda, log(wealth_fsa))
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed dollars", "Fixed shares (log)")
col_names <- colnames(weal_th)
dygraphs::dygraph(weal_th, main="Wealth of Weighted Portfolios") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="red", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="blue", strokeWidth=2) %>%
dyLegend(show="always", width=500)
weal_th <- cbind(wealth_fda, wealth_fsa)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed dollars", "Fixed shares (log)")
col_names <- colnames(weal_th)
dygraphs::dygraph(weal_th, main="Wealth of Weighted Portfolios") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="red", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="blue", strokeWidth=2) %>%
dyLegend(show="always", width=500)
rm(list = ls())
price_s <- rutils::etf_env$price_s
price_s <- zoo::na.locf(price_s, na.rm=FALSE)
price_s <- zoo::na.locf(price_s, fromLast=TRUE)
rets_dollar <- rutils::diff_it(price_s)
rets_dollar[1, ] <- price_s[1, ]
rets_dollar[1, ]
rets_percent <- rets_dollar/
rutils::lag_it(price_s, lagg=1, pad_zeros=FALSE)
rets_percent[1, ]
new_prices <- cumsum(rets_dollar)
all.equal(new_prices, price_s)
price_s <- rutils::etf_env$price_s
price_s <- zoo::na.locf(price_s, na.rm=FALSE)
price_s <- zoo::na.locf(price_s, fromLast=TRUE)
rets_dollar <- rutils::diff_it(price_s)
rets_percent <- rets_dollar/
rutils::lag_it(price_s, lagg=1, pad_zeros=FALSE)
rets_log <- rutils::diff_it(log(price_s))
rets_log[1, ]
rets_percent[1, ]
rets_dollar[1, ]
new_prices <- cumsum(rets_dollar) + price_s[1, ]
all.equal(new_prices, price_s)
class(rets_dollar)
new_prices <- cumsum(t(t(rets_dollar) + price_s[1, ]))
price_s[1, ]
init_prices <- as.numeric(price_s[1, ])
new_prices <- cumsum(t(t(rets_dollar) + init_prices[1]))
all.equal(new_prices, price_s)
all.equal(new_prices, coredata(price_s))
price_s <- rutils::etf_env$price_s
price_s <- zoo::na.locf(price_s, na.rm=FALSE)
price_s <- zoo::na.locf(price_s, fromLast=TRUE)
rets_dollar <- rutils::diff_it(price_s)
rets_percent <- rets_dollar/
rutils::lag_it(price_s, lagg=1, pad_zeros=FALSE)
rets_log <- rutils::diff_it(log(price_s))
rets_dollar[1, ] <- price_s[1, ]
new_prices <- cumsum(rets_dollar)
all.equal(new_prices, price_s)
new_prices <- cumprod(1+ rets_percent)
new_prices <- cumprod(1+ rets_percent)
new_prices <- t(t(new_prices)*new_prices[, i])
new_prices <- cumprod(1+ rets_percent)
new_prices <- t(t(new_prices)*price_s[1, ])
price_s[1, drop=TRUE]
new_prices <- cumprod(1+ rets_percent)
new_prices <- t(t(new_prices)*price_s[1, drop=TRUE])
dim(price_s[1, drop=TRUE])
drop(price_s[1, ])
new_prices <- cumprod(1+ rets_percent)
new_prices <- t(t(new_prices)*drop(price_s[1, ]))
new_prices <- cumprod(1+ rets_percent)
dim(new_prices)
dim(drop(price_s[1, ]))
NROW(drop(price_s[1, ]))
dim(t(new_prices))
new_prices <- cumprod(1+rets_percent)
foo <- t(new_prices)*drop(price_s[1, ])
class(t(new_prices))
class(drop(price_s[1, ]))
class(coredata(price_s[1, ]))
dim(coredata(price_s[1, ]))
drop(coredata(price_s[1, ]))
new_prices <- cumprod(1+rets_percent)
new_prices <- t(t(new_prices)*drop(coredata(price_s[1, ])))
new_prices <- cumprod(1+rets_percent)
new_prices <- t(t(new_prices)*drop(coredata(price_s[1, ])))
all.equal(new_prices, price_s, check.attributes=FALSE)
all.equal(new_prices, coredata(price_s), check.attributes=FALSE)
new_prices <- lapply(1:NCOL(new_prices), function (i)
price_s[1, i]*new_prices[, i])
new_prices <- rutils::do_call(cbind, new_prices)
new_prices <- cumprod(1+rets_percent)
new_prices <- lapply(1:NCOL(new_prices), function (i)
price_s[1, i]*new_prices[, i])
new_prices <- rutils::do_call(cbind, new_prices)
all.equal(new_prices, coredata(price_s), check.attributes=FALSE)
all.equal(new_prices, price_s, check.attributes=FALSE)
new_prices <- cumprod(1+rets_percent)
new_prices <- lapply(1:NCOL(new_prices), function (i)
price_s[1, i]*new_prices[, i])
new_prices <- rutils::do_call(cbind, new_prices)
dim(new_prices)
new_prices <- cumprod(1+rets_percent)
dim(new_prices)
class(new_prices)
new_prices <- lapply(1:NCOL(new_prices), function (i)
drop(coredata(price_s[1, i])*new_prices[, i])
new_prices <- rutils::do_call(cbind, new_prices)
new_prices <- cumprod(1+rets_percent)
new_prices <- lapply(1:NCOL(new_prices), function (i)
drop(coredata(price_s[1, i]))*new_prices[, i])
new_prices <- rutils::do_call(cbind, new_prices)
all.equal(new_prices, coredata(price_s), check.attributes=FALSE)
class(new_prices)
dim(new_prices)
all.equal(new_prices, price_s, check.attributes=FALSE)
new_prices <- cumprod(1+rets_percent)
new_prices <- t(t(new_prices)*drop(coredata(price_s[1, ])))
all.equal(new_prices, coredata(price_s), check.attributes=FALSE)
init_prices <- drop(coredata(price_s[1, ]))
new_prices <- cumprod(1+rets_percent)
init_prices <- drop(coredata(price_s[1, ]))
new_prices <- lapply(1:NCOL(new_prices), function (i)
init_prices[i]*new_prices[, i])
new_prices <- rutils::do_call(cbind, new_prices)
all.equal(new_prices, price_s, check.attributes=FALSE)
methods(cumsum)
?cumsum
price_s <- rutils::etf_env$price_s[, c("VTI", "IEF")]
price_s <- na.omit(price_s)
date_s <- index(price_s)
rets_dollar <- rutils::diff_it(price_s)
weight_s <- c(0.5, 0.5)
t(weight_s/price_s[1, ])
weight_s
init_prices <- drop(coredata(price_s[1, ]))
init_prices
as.numeric(price_s[1, ])
init_prices <- as.numeric(price_s[1, ])
t(weight_s/init_prices)
wealth_fsa <- cumsum(rets_dollar %*% t(weight_s/init_prices))
wealth_fsa <- cumsum(rets_dollar %*% weight_s/init_prices)
wealth_fsa <- cumsum(rets_dollar %*% (weight_s/init_prices)
)
price_s <- rutils::etf_env$price_s[, c("VTI", "IEF")]
price_s <- na.omit(price_s)
date_s <- index(price_s)
rets_dollar <- rutils::diff_it(price_s)
rets_percent <- rets_dollar/
rutils::lag_it(price_s, lagg=1, pad_zeros=FALSE)
rets_dollar[1, ]
rets_percent[1, ]
rm(list = ls())
price_s <- rutils::etf_env$price_s[, c("VTI", "IEF")]
price_s <- na.omit(price_s)
rets_dollar <- rutils::diff_it(price_s)
rets_percent <- rets_dollar/
rutils::lag_it(price_s, lagg=1, pad_zeros=FALSE)
dygraphs::dygraph(log(quantmod::Cl(rutils::etf_env$VTI)),
main="Logarithm of VTI Prices") %>%
dyOptions(colors="blue", strokeWidth=2) %>%
dyLegend(show="always", width=500)
rm(list = ls())
price_s <- rutils::etf_env$price_s[, c("VTI", "IEF")]
price_s <- na.omit(price_s)
rets_dollar <- rutils::diff_it(price_s)
rets_percent <- rets_dollar/
rutils::lag_it(price_s, lagg=1, pad_zeros=FALSE)
weight_s <- c(0.5, 0.5)
init_prices <- as.numeric(price_s[1, ])
wealth_fsa <- cumsum(rets_dollar %*% (weight_s/init_prices))
head(rets_dollar)
wealth_fda <- cumsum(rets_percent %*% weight_s)
weal_th <- cbind(wealth_fda, wealth_fsa)
class(weal_th)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed dollars", "Fixed shares")
sqrt(252)*sapply(weal_th,
function(x) c(Sharpe=mean(x)/sd(x), Sortino=mean(x)/sd(x[x<0])))
sqrt(252)*sapply(rutils::diff_it(weal_th),
function(x) c(Sharpe=mean(x)/sd(x), Sortino=mean(x)/sd(x[x<0])))
col_names <- colnames(weal_th)
dygraphs::dygraph(weal_th, main="Wealth of Weighted Portfolios") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="red", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="blue", strokeWidth=2) %>%
dyLegend(show="always", width=500)
wealth_fsa <- cumsum(rets_dollar %*% (weight_s/init_prices))
rets_weighted <- rets_percent %*% weight_s
wealth_cda <- cumprod(1 + rets_weighted)
head(wealth_cda)
head(wealth_fsa)
weal_th <- log(cbind(wealth_fsa, wealth_cda))
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Shares", "Fixed Ratio")
dygraphs::dygraph(weal_th, main="Log Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
wealth_fsa <- cumsum(rets_dollar %*% (weight_s/init_prices))
rets_weighted <- rets_percent %*% weight_s
wealth_cda <- cumprod(1 + rets_weighted)
weal_th <- cbind(wealth_fsa, wealth_cda)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Shares", "Fixed Ratio")
dygraphs::dygraph(weal_th, main="Log Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
wealth_cda <- cumprod(1 + rets_weighted) - 1
weal_th <- cbind(wealth_fsa, wealth_cda)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Shares", "Fixed Ratio")
dygraphs::dygraph(weal_th, main="Log Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
tail(rets_dollar)
weal_th <- weight_s
weal_th
tail(rets_percent)
it <- 11
weal_th*(1+rets_percent[it, ])
weal_th <- weal_th*(1+rets_percent[it, ])
weal_th
it <- 12
weal_th <- weal_th*(1+rets_percent[it, ])
weal_th
weal_th <- weight_s
c(1,2)*c(3,4)
c(3,2)*c(3,4)
rets_percent <- zoo::coredata(rets_percent)
it <- 11
weal_th <- weal_th*(1+rets_percent[it, ])
weal_th
it <- 12
weal_th <- weal_th*(1+rets_percent[it, ])
weal_th
abs(weal_th[1]-weal_th[2])
sum(weal_th)
weight_s
rets_dollar <- zoo::coredata(rets_dollar)
tail(rets_dollar)
wealth_fsa <- cumsum(rets_dollar %*% (weight_s/init_prices))
init_prices
tail(v)
tail(wealth_fsa)
dim(rets_percent)
foo <- cbind(cumprod(1+rets_percent[, 1]), cumprod(1+rets_percent[, 2])) %*% (weight_s/init_prices))
foo <- cbind(cumprod(1+rets_percent[, 1]), cumprod(1+rets_percent[, 2])) %*% (weight_s/init_prices)
all.equal(wealth_fsa, foo)
tail(foo)
(weight_s/init_prices)
foo <- cbind(cumprod(1+rets_percent[, 1]), cumprod(1+rets_percent[, 2])) %*% weight_s
all.equal(wealth_fsa, foo)
tail(foo)
foo <- drop(cbind(cumprod(1+rets_percent[, 1]), cumprod(1+rets_percent[, 2])) %*% weight_s)
all.equal(wealth_fsa, foo)
tail(foo)
tail(wealth_fsa)
all.equal(wealth_fsa, foo-1)
foo <- drop(cbind(cumprod(1+rets_percent[, 1]), cumprod(1+rets_percent[, 2])) %*% weight_s)-1
all.equal(wealth_fsa, foo)
tail(cumprod(1+rets_percent))
foo <- drop(apply(rets_percent, 2, function(x) cumprod(1+x)) %*% weight_s)-1
tail(cumprod(1+rets_percent))
all.equal(wealth_fsa, foo)
weight_s
thresh_old <- 0.05
weal_th <- weight_s
rets_percent <- zoo::coredata(rets_percent)
it
(1 + rets_percent[it, ])
weal_th*(1 + rets_percent[it, ])
rets_percent[it, ]
diff(weal_th)
?diff
diff(1:10, 2)
class(diff(1:10, 2))
thresh_old <- 0.05
weal_th <- weight_s
foo <- matrix(2*NROW(rets_percent), nc=2)
thresh_old <- 0.05
weal_th <- weight_s
foo <- matrix(2*NROW(rets_percent), nc=2)
for (it in 1:NROW(rets_percent)) {
# Accrue wealth
weal_th <- weal_th*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th))/sum(weal_th) > thresh_old) {
cat("Rebalance at:", it, "\n")
weal_th <- weal_th*weight_s
} # end if
foo[it, ] <- weal_th
} # end for
weal_th
foo[it, ]
NROW(rets_percent)
foo <- matrix(2*NROW(rets_percent), nc=2)
dim(v)
dim(foo)
2*NROW(rets_percent)
foo <- matrix(2*NROW(rets_percent), ncol=2)
dim(foo)
foo <- matrix(nrow=NROW(rets_percent), ncol=2)
dim(foo)
for (it in 1:NROW(rets_percent)) {
# Accrue wealth
weal_th <- weal_th*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th))/sum(weal_th) > thresh_old) {
cat("Rebalance at:", it, "\n")
weal_th <- weal_th*weight_s
} # end if
foo[it, ] <- weal_th
} # end for
plot.zoo(foo)
dim(foo)
thresh_old <- 0.05
weal_th <- weight_s
foo <- matrix(nrow=NROW(rets_percent), ncol=2)
weal_th
for (it in 1:21) {
# Accrue wealth
weal_th <- weal_th*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th))/sum(weal_th) > thresh_old) {
cat("Rebalance at:", it, "\n")
weal_th <- weal_th*weight_s
} # end if
foo[it, ] <- weal_th
} # end for
foo
foo[1:22, ]
thresh_old <- 0.05
weal_th <- weight_s
foo <- matrix(nrow=NROW(rets_percent), ncol=2)
for (it in 1:NROW(rets_percent)) {
# Accrue wealth
weal_th <- weal_th*(1 + rets_percent[it, ])
# Rebalance
# if (abs(diff(weal_th))/sum(weal_th) > thresh_old) {
#   cat("Rebalance at:", it, "\n")
#   weal_th <- weal_th*weight_s
# } # end if
foo[it, ] <- weal_th
} # end for
plot.zoo(foo)
thresh_old <- 0.05
weal_th <- weight_s
foo <- matrix(nrow=NROW(rets_percent), ncol=2)
for (it in 1:NROW(rets_percent)) {
# Accrue wealth
weal_th <- weal_th*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th))/sum(weal_th) > thresh_old) {
cat("Rebalance at:", it, "\n")
weal_th <- sum(weal_th)*weight_s
} # end if
foo[it, ] <- weal_th
} # end for
plot.zoo(foo)
sum(foo[NROW(foo), ])
plot.zoo(rowSums(foo))
thresh_old <- 0.05
weal_th <- matrix(nrow=NROW(rets_percent), ncol=2)
weal_th[1, ] <- weight_s
for (it in 2:NROW(rets_percent)) {
# Accrue wealth
weal_th[it, ] <- weal_th[it-1, ]*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th[it, ]))/sum(weal_th[it, ]) > thresh_old) {
# cat("Rebalance at:", it, "\n")
weal_th[it, ] <- sum(weal_th[it, ])*weight_s
} # end if
} # end for
weight_s
colnames(rets_percent)
colnames(weal_th) <- colnames(rets_percent)
plot.zoo(weal_th)
init_prices
weight_s
wealth_fsa <- cumsum(rets_dollar %*% (weight_s/init_prices))
wealth_cda <- cumprod(1 + rets_percent %*% weight_s) - 1
foo <- weal_th
weal_th <- rowSums(weal_th)
weal_th <- weal_th - 1
head(weal_th)
head(wealth_fsa)
head(wealth_cda)
weal_th <- cbind(wealth_fsa, weal_th)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Shares", "Fixed Ratio")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
weal_th <- rowSums(foo) - 1
weal_th <- cbind(wealth_cda, weal_th)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Ratio", "Rebalance")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
thresh_old <- 0.1
weal_th <- matrix(nrow=NROW(rets_percent), ncol=2)
colnames(weal_th) <- colnames(rets_percent)
weal_th[1, ] <- weight_s
for (it in 2:NROW(rets_percent)) {
# Accrue wealth without rebalancing
weal_th[it, ] <- weal_th[it-1, ]*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th[it, ]))/sum(weal_th[it, ]) > thresh_old) {
# cat("Rebalance at:", it, "\n")
weal_th[it, ] <- sum(weal_th[it, ])*weight_s
} # end if
} # end for
foo <- weal_th
weal_th <- rowSums(weal_th) - 1
weal_th <- cbind(wealth_cda, weal_th)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Ratio", "Rebalance")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
weal_th <- rowSums(foo) - 1
weal_th <- cbind(wealth_fsa, weal_th)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Ratio", "Rebalance")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
thresh_old <- 0.9
weal_th <- matrix(nrow=NROW(rets_percent), ncol=2)
colnames(weal_th) <- colnames(rets_percent)
weal_th[1, ] <- weight_s
for (it in 2:NROW(rets_percent)) {
# Accrue wealth without rebalancing
weal_th[it, ] <- weal_th[it-1, ]*(1 + rets_percent[it, ])
# Rebalance
if (abs(diff(weal_th[it, ]))/sum(weal_th[it, ]) > thresh_old) {
# cat("Rebalance at:", it, "\n")
weal_th[it, ] <- sum(weal_th[it, ])*weight_s
} # end if
} # end for
weal_th <- rowSums(weal_th) - 1
weal_th <- cbind(wealth_fsa, weal_th)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Ratio", "Rebalance")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
weal_th <- cbind(wealth_fsa, wealth_fda)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Ratio", "Rebalance")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
weal_th <- cbind(wealth_fsa, wealth_cda)
weal_th <- xts::xts(weal_th, index(price_s))
colnames(weal_th) <- c("Fixed Ratio", "Rebalance")
dygraphs::dygraph(weal_th, main="Wealth of Fixed Dollar Ratios") %>%
dyOptions(colors=c("blue", "red"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
86400/3600
sym_bol <- "VXX"
start_date <- as.Date("2015-01-01")
to_day <- Sys.Date()
rang_e <- "day"
apikey <- "SDpnrBpiRzONMJdl48r6dOo0_mjmCu6r"
ur_l <- paste0("https://api.polygon.io/v2/aggs/ticker/", sym_bol, "/range/1/", rang_e, "/", start_date, "/", to_day, "?adjusted=false&sort=asc&limit=50000&apiKey=", apikey)
download.file(ur_l, destfile="/Volumes/external/Develop/data/polygon/data.json")
ur_l
oh_lc <- jsonlite::read_json("/Volumes/external/Develop/data/polygon/data.json")
oh_lc <- oh_lc$results
oh_lc <- lapply(oh_lc, function(x) unlist(x)[c("t","o","h","l","c","v","vw")])
oh_lc <- do.call(rbind, oh_lc)
date_s <- oh_lc[, "t"]/1e3
date_s <- as.POSIXct(date_s, origin="1970-01-01")
oh_lc <- oh_lc[, -1]
colnames(oh_lc) <- c("Open", "High", "Low", "Close", "Volume", "VWAP")
oh_lc <- xts::xts(oh_lc, order.by=date_s)
sym_bol
dygraphs::dygraph(oh_lc[, 1:4], main=paste("Candlestick Plot of", sym_bol, "OHLC prices")) %>%
dygraphs::dyCandlestick()
86400/3600
86400*365
install.packages("reticulate")
reticulate::repl_python()
reticulate::source_python('~/Develop/Python_scripts/download_polygon.py')
reticulate::source_python('~/Develop/Python_scripts/download_polygon.py')
