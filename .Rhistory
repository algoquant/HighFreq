predictor <- returns[, -1]
reg_arma <- drop(HighFreq::calc_reg(response=response, predictor=predictor))
lmod <- lm(response ~ predictor)
lmodsum <- summary(lmod)
all.equal(reg_arma[1:(2*(1+NCOL(predictor)))],
c(coeff[, "Estimate"], coeff[, "t value"]), check.attributes=FALSE)
coeff <- lmodsum$coefficients
all.equal(reg_arma[1:(2*(1+NCOL(predictor)))],
c(coeff[, "Estimate"], coeff[, "t value"]), check.attributes=FALSE)
reg_arma <- drop(calc_reg(response=response, predictor=predictor))
all.equal(reg_arma[1:(2*(1+NCOL(predictor)))],
c(coeff[, "Estimate"], coeff[, "t value"]), check.attributes=FALSE)
library(HighFreq)
library(HighFreq)
library(HighFreq)
q()
ls()
library(shiny); runApp('~/Develop/Presentations/app_cdo_tranche.R')
retsp <- rutils::etfenv$returns[, c("VTI", "IEF")]
retsp <- zoo::coredata(na.omit(retsp))
weightv <- c(0.5, 0.5)
nrows <- NROW(retsp)
set.seed(1121)
nboot <- 1e3
library(parallel)  # Load package parallel
ncores <- detectCores() - 1  # Number of cores
boot_data <- mclapply(1:nboot, function(x) {
retsp[sample.int(nrows, replace=TRUE), ]
}, mc.cores=ncores)  # end mclapply
is.list(boot_data)
NROW(boot_data)
dim(boot_data[[1]])
head(boot_data[[1]])
wealthv <- sapply(boot_data, function(retsp) {
apply(retsp, 2, function(x) prod(1+x))
})  # end sapply
wealthv <- t(wealthv)
class(wealthv)
dim(wealthv)
tail(wealthv)
apply(wealthv, 2, mean)
apply(wealthv, 2, sd)
wealthfun <- function(wealthv)
mean(wealthv-1)/sd(wealthv[wealthv < median(wealthv)])
apply(wealthv, 2, wealthfun)
wealthvti <- density(wealthv[, "VTI"])
wealthief <- density(wealthv[, "IEF"])
plot(density(wealthv[, "VTI"]), col="blue", lwd=3,
xlab="wealth",
xlim=c(0, max(wealthvti$x)/5),
ylim=c(0, max(wealthief$y)),
main="Densities of the Terminal Wealths of VTI and IEF")
lines(density(wealthv[, "IEF"]), col="green", lwd=3)
legend(x="topright", legend=c("VTI", "IEF"),
inset=0.1, cex=1.0, bg="white", bty="n",
lwd=6, lty=1, col=c("blue", "green"))
wealthvti$x
max(wealthvti$x)
plot(density(wealthv[, "VTI"]), col="blue", lwd=3,
xlab="wealth",
xlim=c(0, 2*max(wealthief$x)),
ylim=c(0, max(wealthief$y)),
main="Densities of the Terminal Wealths of VTI and IEF")
lines(density(wealthv[, "IEF"]), col="green", lwd=3)
legend(x="topright", legend=c("VTI", "IEF"),
inset=0.1, cex=1.0, bg="white", bty="n",
lwd=6, lty=1, col=c("blue", "green"))
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
?plot
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
?shiny::plotOutput
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
par(mai)
par("mai")
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
par("oma")
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
?density
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
par("oma")
par("mar")
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
par("mai")
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
par("oma")
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
runApp('~/Develop/Presentations/app_cdo_tranche.R')
runApp('~/Develop/Presentations/app_credit_portfolio_loss.R')
runApp('~/Develop/Presentations/app_cdo_tranche.R')
runApp('~/Develop/Presentations/app_credit_portfolio_loss_mc.R')
ls()
objfun <- function(weight) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp, 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5)
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01)
optiml$par
optiml$value
optiml <- optimize(objfun, interval=c(0, 1))
optiml$minimum
?optimize
.Machine$double.eps^0.25
.Machine$double.eps^0.5
10*.Machine$double.eps^0.25
1e2*.Machine$double.eps^0.25
optiml <- optimize(objfun, interval=c(0, 1), tol=1e2*.Machine$double.eps^0.25)
?optim
optiml$minimum
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01,
control=list(reltol=1e2*.Machine$double.eps^0.25))
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01,
control=list(factr=1e2*.Machine$double.eps^0.25))
optiml$par
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01,
control=list(factr=1e9))
optiml$par
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01,
control=list(factr=1e10))
optiml$par
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01,
control=list(factr=1e11))
optiml$par
optiml <- optim(par=0.5,
fn=objfun,
method="L-BFGS-B",
upper=0.99,
lower=0.01,
control=list(factr=1e12))
optiml$par
optiml <- optimize(objfun, interval=c(0, 1), tol=1e2*.Machine$double.eps^0.25)
optiml$minimum
wealthfun <- function(wealthv)
(mean(wealthv)-1)/mad(wealthv)
apply(wealthv, 2, wealthfun)
objfun <- function(weight) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp, 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5)
optiml <- optimize(objfun, interval=c(0, 1), tol=1e2*.Machine$double.eps^0.25)
optiml$minimum
holdps <- (nrows*(1:6)) %/% 6
objfun <- function(weight, holdp) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp[1:holdp, ], 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-mean(wealthv-1)/sd(wealthv[wealthv < median(wealthv)])
}  # end objfun
objfun(0.5, holdps[1])
objfun(0.5, holdps[6])
objfun <- function(weight, holdp) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp[1:holdp, ], 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5, holdps[1])
objfun(0.5, holdps[6])
wv <- (1:19)/20
foo <- sapply(wv, objfun, holdp=nrows)
plot(x=wv, y=foo, t="l")
barv <- sapply(wv, objfun, holdp=(nrows/10))
plot(x=wv, y=barv, t="l")
weightv <- sapply(holdps, function(holdp) {
optiml <- optimize(objfun, interval=c(0, 1), holdp=holdp, tol=1e2*.Machine$double.eps^0.25)
optiml$minimum
})  # end sapply
weightv
plot(x=holdps, y=weightv, t="l")
?str
objfun <- function(input, param1=0.01) {
sin(0.25*pi*input) + param1*(input-1)^2
}  # end objfun
optiml <- optimize(f=objfun, interval=c(-4, 2))
class(optiml)
unlist(optiml)
unlist(optimize(f=objfun, interval=c(0, 8)))
unlist(optimize(f=objfun, interval=c(0, 8)), tol=1e2*.Machine$double.eps^0.25)
str(optimize)
unlist(optimize(f=objfun, interval=c(0, 8), tol=1e2*.Machine$double.eps^0.25))
library(microbenchmark)
summary(microbenchmark(
Rcode = optimize(f=objfun, interval=c(0, 8)),
Rcpp = optimize(f=objfun, interval=c(0, 8), tol=accl),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
optimize(f=objfun, interval=c(0, 8))
optimize(f=objfun, interval=c(0, 8), tol=accl)
accl <- 1e2*.Machine$double.eps^0.25
summary(microbenchmark(
Rcode = optimize(f=objfun, interval=c(0, 8)),
Rcpp = optimize(f=objfun, interval=c(0, 8), tol=accl),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
unlist(optimize(f=objfun, interval=c(0, 8)))
accl <- 1e3*.Machine$double.eps^0.25
unlist(optimize(f=objfun, interval=c(0, 8), tol=accl))
summary(microbenchmark(
Rcode = optimize(f=objfun, interval=c(0, 8)),
Rcpp = optimize(f=objfun, interval=c(0, 8), tol=accl),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
accl <- 1e4*.Machine$double.eps^0.25
unlist(optimize(f=objfun, interval=c(0, 8), tol=accl))
summary(microbenchmark(
Rcode = optimize(f=objfun, interval=c(0, 8)),
Rcpp = optimize(f=objfun, interval=c(0, 8), tol=accl),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optimize(f=objfun, interval=c(0, 8)),
less_accurate = optimize(f=objfun, interval=c(0, 8), tol=accl),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
?optim
# Rastrigin function with vector argument for optimization
rastrigin <- function(vectorv, param=25) {
sum(vectorv^2 - param*cos(vectorv))
}  # end rastrigin
vectorv <- c(pi/6, pi/6)
rastrigin(vectorv=vectorv)
optiml <- optim(par=vectorv, fn=rastrigin,
method="L-BFGS-B",
upper=c(4*pi, 4*pi),
lower=c(pi/2, pi/2),
param=1)
optiml$par
optiml$value
rastrigin(optiml$par, param=1)
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e12)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e13)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e14)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e15)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e25)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(pgtol=1e-2)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(pgtol=1e-1)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-7)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-17)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(4*pi, 4*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-1)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-1)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
vectorv <- c(pi, pi/4)
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-1)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-11)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e5)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e15)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-15)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-1)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
more_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1),
less_accurate = optim(par=vectorv, fn=rastrigin, method="L-BFGS-B", upper=c(14*pi, 14*pi), lower=c(pi/2, pi/2), param=1, control=list(factr=1e-1)),
times=100))[, c(1, 4, 5)]  # end microbenchmark summary
vectorv <- c(pi, pi/4)
rastrigin(vectorv=vectorv)
c(14*pi, 14*pi)
optiml <- optim(par=vectorv, fn=rastrigin,
method="L-BFGS-B",
upper=c(14*pi, 14*pi),
lower=c(pi/2, pi/2),
param=1)
optiml$par
optiml$value
rastrigin(optiml$par, param=1)
optiml <- optim(par=vectorv, fn=rastrigin,
method="L-BFGS-B",
upper=c(14*pi, 14*pi),
lower=c(pi/2, pi/2),
param=1, control=list(factr=1e-7))
optiml$par
optiml <- optim(par=vectorv, fn=rastrigin,
method="L-BFGS-B",
upper=c(14*pi, 14*pi),
lower=c(pi/2, pi/2),
param=1, control=list(factr=1e7))
optiml$par
optiml <- optim(par=vectorv, fn=rastrigin,
method="L-BFGS-B",
upper=c(14*pi, 14*pi),
lower=c(pi/2, pi/2),
param=1, control=list(factr=1e-1))
optiml$par
rm(list = ls())
retsp <- rutils::etfenv$returns[, c("VTI", "IEF")]
retsp <- zoo::coredata(na.omit(retsp))
weightv <- c(0.5, 0.5)
wealth <- apply(retsp, 2, function(x) prod(1+x))
wealth
weightv <- c(0.5, 0.5)
drop(wealth %*% weightv)
nrows <- NROW(retsp)
set.seed(1121)
samplev <- retsp[sample.int(nrows, replace=TRUE), ]
class(samplev)
dim(samplev)
head(samplev)
apply(samplev, 2, function(x) prod(1+x))
nboot <- 1e3
library(parallel)  # Load package parallel
ncores <- detectCores() - 1  # Number of cores
set.seed(1121)
boot_data <- mclapply(1:nboot, function(x) {
retsp[sample.int(nrows, replace=TRUE), ]
}, mc.cores=ncores)  # end mclapply
is.list(boot_data)
# [1] 4940    2
wealthv <- sapply(boot_data, function(retsp) {
apply(retsp, 2, function(x) prod(1+x))
})  # end sapply
wealthv <- t(wealthv)
class(wealthv)
dim(wealthv)
tail(wealthv)
apply(wealthv, 2, mean)
apply(wealthv, 2, sd)
wealthfun <- function(wealthv)
(mean(wealthv)-1)/sd(wealthv[wealthv < median(wealthv)])
apply(wealthv, 2, wealthfun)
wealthvti <- density(wealthv[, "VTI"])
wealthief <- density(wealthv[, "IEF"])
plot(density(wealthv[, "VTI"]), col="blue", lwd=3,
xlab="wealth",
xlim=c(0, 2*max(wealthief$x)),
ylim=c(0, max(wealthief$y)),
main="Densities of the Terminal Wealths of VTI and IEF")
lines(density(wealthv[, "IEF"]), col="green", lwd=3)
legend(x="topright", legend=c("VTI", "IEF"),
inset=0.1, cex=1.0, bg="white", bty="n",
lwd=6, lty=1, col=c("blue", "green"))
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp, 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
mean(wealthv)
sd(wealthv)
objfun <- function(weight) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp, 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5)
optiml <- optimize(objfun, interval=c(0, 1), tol=1e4*.Machine$double.eps^0.25)
optiml$minimum
holdps <- (nrows*(1:6)) %/% 6
objfun <- function(weight, holdp) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp[1:holdp, ], 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5, holdps[1])
objfun(0.5, holdps[6])
objfun <- function(weight) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp, 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
curve(expr=objfun, type="l", lwd=2, col="blue", xlim=c(0.01, 0.99))
debug(objfun)
curve(expr=objfun, type="l", lwd=2, col="blue", xlim=c(0.01, 0.99))
curve(expr=objfun, type="l", lwd=2, col="blue", xlim=c(0.01, 0.99))
dim(wealth)
wealth
weightv
q
Exit
undebug(objfun)
objfun <- function(weight) {
weightvec <- c(weight, 1-weight)
wealthvec <- sapply(boot_data, function(retsample) {
wealthsample <- apply(retsample, 2, function(x) prod(1+x))
drop(wealthsample %*% weightvec)
})  # end sapply
-wealthfun(wealthvec)
}  # end objfun
objfun(0.5)
curve(expr=objfun, type="l", lwd=2, col="blue", xlim=c(0.01, 0.99))
objfun <- function(weight) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp, 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5)
weightv <- (1:19)/20
wealthobj <- sapply(weightv, objfun)
plot(x=weightv, y=wealthobj, t="l", lwd=3, col="blue",
main="Wealth Objective as a Function of VTI Weight")
plot(x=weightv, y=wealthobj, t="l", lwd=3, col="blue",
xlab="VTI weight", ylab="Wealth objective",
main="Wealth Objective as a Function of VTI Weight")
optiml <- optimize(objfun, interval=c(0, 1), tol=1e4*.Machine$double.eps^0.25)
optiml$minimum
holdps <- (nrows*(1:6)) %/% 6
objfun <- function(weight, holdp) {
weightv <- c(weight, 1-weight)
wealthv <- sapply(boot_data, function(retsp) {
wealth <- apply(retsp[1:holdp, ], 2, function(x) prod(1+x))
drop(wealth %*% weightv)
})  # end sapply
-wealthfun(wealthv)
}  # end objfun
objfun(0.5, holdps[1])
objfun(0.5, holdps[6])
weightv <- sapply(holdps, function(holdp) {
optiml <- optimize(objfun, interval=c(0, 1), holdp=holdp, tol=1e4*.Machine$double.eps^0.25)
optiml$minimum
})  # end sapply
plot(x=holdps, y=weightv, t="l", lwd=3, col="blue",
xlab="Holding period", ylab="VTI weight",
main="Optimal VTI Weight as a Function of Holding Period")
objfun
weightv
holdps
optiml <- optimize(objfun, interval=c(0, 1), holdp=holdps[1], tol=1e4*.Machine$double.eps^0.25)
optiml$minimum
optiml <- optimize(function(x) objfun(x, holdp=holdps[1]), interval=c(0, 1), tol=1e4*.Machine$double.eps^0.25)
optiml$minimum
library(HighFreq)
