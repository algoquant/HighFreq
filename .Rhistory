library(HighFreq)
library(HighFreq)
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp('src/HighFreq.cpp')
//' @param \code{tseries} A single-column \emph{time series} or a \emph{column vector}.
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
weight_s <- c(1, rep(0, 10))
weight_ed <- roll_vecw(tseries=re_turns, weights=weight_s)
weight_s <- matrix(c(1, rep(0, 10)))
weight_s
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
weight_ed <- roll_vecw(tseries=re_turns, weights=weight_s)
all.equal(zoo::coredata(re_turns), weight_ed)
all.equal(zoo::coredata(re_turns), weight_ed, check.attributes=FALSE)
weight_s <- matrix(exp(-0.2*1:11))
weight_s <- weight_s/sum(weight_s)
weight_ed <- roll_vecw(tseries=re_turns, weights=weight_s)
filter_ed <- stats::filter(x=re_turns, filter=weight_s, method="convolution", sides=1)
all.equal(filter_ed[-(1:11)], weight_ed[-(1:11)], check.attributes=FALSE)
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
sum_rolling <- HighFreq::roll_vec(re_turns, look_back=11)
all.equal(HighFreq::roll_vec(re_turns, look_back=11),
rutils::roll_sum(re_turns, look_back=11))
all.equal(HighFreq::roll_vec(re_turns, look_back=11),
rutils::roll_sum(re_turns, look_back=11), check.attributes=FALSE)
all.equal(zoo.coredata(HighFreq::roll_vec(re_turns, look_back=11)),
rutils::roll_sum(re_turns, look_back=11))
all.equal(zoo::coredata(HighFreq::roll_vec(re_turns, look_back=11)),
rutils::roll_sum(re_turns, look_back=11))
re_turns <- zoo::coredata(na.omit(rutils::etf_env$re_turns$VTI))
all.equal(HighFreq::roll_vec(re_turns, look_back=11),
rutils::roll_sum(re_turns, look_back=11))
all.equal(HighFreq::roll_vec(re_turns, look_back=11),
rutils::roll_sum(re_turns, look_back=11),
check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_vec(re_turns, look_back=11),
Rcode=rutils::roll_sum(re_turns, look_back=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
re_turns <- zoo::coredata(na.omit(rutils::etf_env$re_turns$VTI))
weight_s <- matrix(c(1, rep(0, 10)))
weight_ed <- HighFreq::roll_vecw(tseries=re_turns, weights=weight_s)
all.equal(zoo::coredata(re_turns), weight_ed, check.attributes=FALSE)
weight_s <- matrix(exp(-0.2*1:11))
weight_s <- weight_s/sum(weight_s)
weight_ed <- HighFreq::roll_vecw(tseries=re_turns, weights=weight_s)
filter_ed <- stats::filter(x=re_turns, filter=weight_s, method="convolution", sides=1)
all.equal(filter_ed[-(1:11)], weight_ed[-(1:11)], check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::roll_vecw(tseries=re_turns, weights=weight_s),
Rcode=stats::filter(x=re_turns, filter=weight_s, method="convolution", sides=1),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
tail(re_turns)
all.equal(HighFreq::roll_mean(re_turns, look_back=11)[-(1:10), ],
drop(RcppRoll::roll_mean(re_turns, n=11)), check.attributes=FALSE)
all.equal(roll_mean(re_turns, look_back=11)[-(1:10), ],
drop(RcppRoll::roll_mean(re_turns, n=11)), check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::roll_mean(re_turns, look_back=11),
RcppRoll=RcppRoll::roll_mean(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=roll_mean(re_turns, look_back=11),
RcppRoll=RcppRoll::roll_mean(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::roll_sum(re_turns, look_back=11),
RcppRoll=RcppRoll::roll_mean(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(roll_mean(re_turns, look_back=11, method="nonparametric")[-(1:10), ],
drop(RcppRoll::roll_median(re_turns, n=11)), check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::roll_sum(re_turns, look_back=11, method="nonparametric"),
RcppRoll=RcppRoll::roll_median(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=roll_mean(re_turns, look_back=11, method="nonparametric"),
RcppRoll=RcppRoll::roll_median(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
all.equal(HighFreq::roll_mean(re_turns, look_back=11)[-(1:10), ],
drop(RcppRoll::roll_mean(re_turns, n=11)), check.attributes=FALSE)
all.equal(roll_mean(re_turns, look_back=11)[-(1:10), ],
drop(RcppRoll::roll_mean(re_turns, n=11)), check.attributes=FALSE)
end_p <- HighFreq::calc_endpoints(NROW(re_turns), step=25)
start_p <- HighFreq::calc_startpoints(end_p, look_back=3)
means <- roll_mean(re_turns, startp=start_p, endp=end_p)
foo = sapply(1:NROW(end_p), function(i) {
mean(re_turns[start_p[i]:end_p[i]])
})
foo
all.equal(foo, means)
means
all.equal(foo, drop(means))
drop(means)
foo
tail(re_turns)
foo = sapply(1:NROW(end_p), function(i) {
HighFreq::calc_mean(re_turns[start_p[i]:end_p[i]])
})  # end sapply
all.equal(foo, drop(means))
tail(means)
tail(foo)
means <- HighFreq::roll_mean(re_turns, startp=start_p-1, endp=end_p-1)
foo = sapply(1:NROW(end_p), function(i) {
HighFreq::calc_mean(re_turns[start_p[i]:end_p[i]])
})  # end sapply
all.equal(foo, drop(means))
tail(means)
tail(foo)
means <- roll_mean(re_turns, startp=start_p-1, endp=end_p-1)
all.equal(foo, drop(means))
tail(foo)
drop(tail(means))
all.equal(foo, unname(drop(means)))
head(foo)
head(tail(means))
tail(foo)
drop(head(means))
head(start_p)
means <- HighFreq::roll_mean(re_turns, startp=start_p, endp=end_p)
foo = sapply(1:NROW(end_p), function(i) {
HighFreq::calc_mean(re_turns[start_p[i]:end_p[i] + 1])
})  # end sapply
means <- roll_mean(re_turns, startp=start_p, endp=end_p)
foo = sapply(1:NROW(end_p), function(i) {
HighFreq::calc_mean(re_turns[start_p[i]:end_p[i] + 1])
})  # end sapply
all.equal(foo, drop(means))
all.equal(roll_mean(re_turns, look_back=11, method="nonparametric")[-(1:10), ],
drop(RcppRoll::roll_median(re_turns, n=11)), check.attributes=FALSE)
foo = sapply(1:NROW(end_p), function(i) {
mean(re_turns[start_p[i]:end_p[i] + 1])
})  # end sapply
all.equal(foo, drop(means))
library(microbenchmark)
summary(microbenchmark(
Rcpp=roll_mean(re_turns, startp=start_p, endp=end_p),
Rcode=sapply(1:NROW(end_p), function(i) {mean(re_turns[start_p[i]:end_p[i] + 1])}),
times=10))[, c(1, 4, 5)]
medianscpp <- roll_mean(re_turns, startp=start_p, endp=end_p, method="nonparametric")
medians = sapply(1:NROW(end_p), function(i) {
median(re_turns[start_p[i]:end_p[i] + 1])
})  # end sapply
all.equal(medians, drop(medianscpp))
summary(microbenchmark(
Rcpp=HighFreq::roll_mean(re_turns, startp=start_p, endp=end_p, method="nonparametric"),
Rcode=sapply(1:NROW(end_p), function(i) {median(re_turns[start_p[i]:end_p[i] + 1])}),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=roll_mean(re_turns, startp=start_p, endp=end_p, method="nonparametric"),
Rcode=sapply(1:NROW(end_p), function(i) {median(re_turns[start_p[i]:end_p[i] + 1])}),
times=10))[, c(1, 4, 5)]
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
ls()
sumscpp <- roll_sump(re_turns, startp=start_p, endp=end_p)
sums = sapply(1:NROW(end_p), function(i) {
sum(re_turns[start_p[i]:end_p[i] + 1])
})  # end sapply
all.equal(sums, drop(sumscpp))
tail(drop(sumscpp))
tail(sums)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
sumscpp <- roll_sump(re_turns, startp=start_p, endp=end_p)
all.equal(sums, drop(sumscpp))
tail(drop(sumscpp))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
sumscpp <- roll_sump(re_turns, startp=max(0, start_p-1), endp=end_p)
foo <- max(0, start_p-1)
head(foo)
sumscpp <- roll_sump(re_turns, startp=ifelse((start_p-1) < 0, 0, start_p-1), endp=end_p)
all.equal(sums, drop(sumscpp))
tail(sums)
tail(drop(sumscpp))
head(sums)
head(drop(sumscpp))
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
da_ta <- matrix(sample(15000), nc=3)
all.equal(HighFreq::diff_it(da_ta, lagg=2),
rutils::diff_it(da_ta, lagg=2),
check.attributes=FALSE)
all.equal(diff_it(da_ta, lagg=2),
rutils::diff_it(da_ta, lagg=2),
check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=diff_it(da_ta, lagg=2),
Rcode=rutils::diff_it(da_ta, lagg=2),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
hf=HighFreq::diff_it(da_ta, lagg=2),
Rcpp=diff_it(da_ta, lagg=2),
Rcode=rutils::diff_it(da_ta, lagg=2),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
hf=HighFreq::diff_it(da_ta, lagg=2),
Rcpp=diff_it(da_ta, lagg=2),
Rcode=rutils::diff_it(da_ta, lagg=2),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
hf=HighFreq::diff_it(da_ta, lagg=2),
Rcpp=diff_it(da_ta, lagg=2),
Rcode=rutils::diff_it(da_ta, lagg=2),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
library(rutils)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
HighFreq::calc_skew(re_turns)
calc_skew(re_turns)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns, method="nonparametric"),
new=calc_skew(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns, method="nonparametric"),
new=calc_skew(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
calc_var(re_turns, method="nonparametric")
calc_var(re_turns, method="quantile")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
HighFreq::calc_kurtosis(re_turns, method="nonparametric")
HighFreq::calc_kurtosis(re_turns, method="moment")
calc_kurtosis(re_turns, method="moment")
summary(microbenchmark(
Rcpp=HighFreq::calc_kurtosis(re_turns, method="nonparametric"),
New=calc_kurtosis(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::calc_kurtosis(re_turns, method="nonparametric"),
New=calc_kurtosis(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
re_turns <- na.omit(rutils::etf_env$re_turns[, c("XLP", "VTI")])
HighFreq::calc_kurtosis(re_turns, method="moment")
calc_kurtosis(re_turns, method="moment")
summary(microbenchmark(
Rcpp=HighFreq::calc_kurtosis(re_turns, method="nonparametric"),
New=calc_kurtosis(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::calc_kurtosis(re_turns, method="nonparametric"),
New=calc_kurtosis(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
HighFreq::calc_skew(re_turns, method="moment")
calc_skew(re_turns, method="moment")
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns, method="nonparametric"),
New=calc_skew(re_turns, method="nonparametric"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
HighFreq::calc_var(re_turns, method="moment")
calc_var(re_turns, method="moment")
HighFreq::calc_var(re_turns, method="MAD")
calc_var(re_turns, method="MAD")
summary(microbenchmark(
Rcpp=HighFreq::calc_var(re_turns, method="MAD"),
New=calc_var(re_turns, method="MAD"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:2])
weight_s <- matrix(c(1, rep(0, 10)), nc=1)
weight_ed <- HighFreq::roll_conv_ref(re_turns, weight_s)
weight_ed <- roll_conv_ref(re_turns, weight_s)
weight_ed
all.equal(coredata(na.omit(rutils::etf_env$re_turns[, 1:2])), re_turns, check.attributes=FALSE)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
weight_ed <- roll_conv_ref(re_turns, weight_s)
all.equal(coredata(na.omit(rutils::etf_env$re_turns[, 1:2])), re_turns, check.attributes=FALSE)
class(re_turns)
re_turns <- coredata(na.omit(rutils::etf_env$re_turns[, 1:2]))
weight_ed <- roll_conv_ref(re_turns, weight_s)
all.equal(coredata(na.omit(rutils::etf_env$re_turns[, 1:2])), re_turns, check.attributes=FALSE)
tail(re_turns)
tail(re_turns, 11)
tail(coredata(na.omit(rutils::etf_env$re_turns[, 1:2])))
foo <- coredata(na.omit(rutils::etf_env$re_turns[, 1:2]))
head(re_turns, 11)
head(foo, 11)
head(re_turns, 21)
head(foo, 21)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
foo <- coredata(na.omit(rutils::etf_env$re_turns[, 1:2]))
re_turns <- coredata(na.omit(rutils::etf_env$re_turns[, 1:2]))
weight_ed <- roll_conv_ref(re_turns, weight_s)
head(re_turns, 21)
head(foo, 21)
all.equal(coredata(na.omit(rutils::etf_env$re_turns[, 1:2])), re_turns, check.attributes=FALSE)
weight_s <- exp(-0.2*(1:11))
weight_s <- matrix(weight_s/sum(weight_s), nc=1)
weight_ed <- roll_conv_ref(re_turns, weight_s)
weight_ed
filter_ed <- filter(x=re_turns, filter=weight_s, method="convolution", sides=1)
all.equal(filter_ed[-(1:11), ], re_turns[-(1:11), ], check.attributes=FALSE)
tail(re_turns)
tail(filter_ed)
weight_s
weight_ed <- HighFreq::roll_conv(re_turns, weight_s)
filter_ed <- filter(x=re_turns, filter=weight_s, method="convolution", sides=1)
all.equal(filter_ed[-(1:11), ], weight_ed[-(1:11), ], check.attributes=FALSE)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_p <- calc_endpoints(re_turns, inter_val="months")
end_p <- calc_endpoints(re_turns, step="months")
str(xts::endpoints)
str(rutils::calc_endpoints)
end_p <- rutils::calc_endpoints(re_turns, inter_val="months")
end_p
end_p <- end_p[end_p > 0]
end_p
len_gth <- NROW(end_p)
look_back <- 12
start_p <- c(rep_len(1, look_back-1), end_p[1:(len_gth-look_back+1)])
start_p
al_pha <- 0.5
eigen_max <- 3
pnl_s <- back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha)
pnl_s <- xts::xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
pnl_s <- back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha)
foo <- pnl_s
pnl_s <- HighFreq::back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha)
all.equal(foo, pnl_s)
summary(microbenchmark(
Rcpp=HighFreq::back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha),
New=back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha),
New=back_test(ex_cess, re_turns, start_p-1, end_p-1, eigen_max = eigen_max, alpha = al_pha),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
library(rutils)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/HighFreq_2021.cpp")
ls()
price_s <- na.omit(rutils::etf_env$price_s[, c("XLP", "VTI")])
price_s <- log(price_s)
calc_hurst(price_s, step=21)
calc_hurst(price_s, step=5)
