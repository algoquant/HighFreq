calc_var_ag(prices, step=1)
calc_var_ag(prices, step=21)
ohlc <- log(HighFreq::SPY)
ohlc <- log(rutils::etfenv$VTI)
calc_var_ohlc_ag(ohlc, step=1)
calc_var_ohlc_ag(ohlc, step=21)
tail(prices)
calc_hurst(prices, step=21)
calc_var_ag(prices, step=21)
args(calc_endpoints)
library(HighFreq)
calc_var_ag(prices, step=21)
calc_hurst(prices, step=21)
calc_hurst_ohlc(ohlc, step=21)
ohlc <- log(rutils::etfenv$VTI)
calc_hurst_ohlc(ohlc, step=21)
calc_var_ohlc_ag(ohlc, step=21)
library(HighFreq)
calc_var_ohlc_ag(ohlc, step=21)
library(HighFreq)
calc_var_ohlc_ag(ohlc, step=21)
calc_hurst_ohlc(ohlc, step=21)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
returns <- na.omit(rutils::etfenv$returns$VTI)
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_var", step=25, look_back=3)
var_roll <- HighFreq::roll_var(returns, step=25, look_back=3)
all.equal(var_rollfun, var_roll, check.attributes=FALSE)
endp <- HighFreq::calc_endpoints(NROW(returns), step=25)
startp <- HighFreq::calc_startpoints(endp, look_back=3)
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp)
var_roll <- sapply(1:NROW(endp), function(it) {
var(returns[startp[it]:endp[it]+1, ])
})  # end sapply
all.equal(drop(var_rollfun), var_roll, check.attributes=FALSE)
head(var_rollfun)
head(var_roll)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcode=sapply(1:NROW(endp), function(it) {
var(returns[startp[it]:endp[it]+1, ])
}),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
head(endp)
head(startp)
returns[startp[1]:endp[1]+1, ]
var(returns[startp[1]:endp[1]+1, ])
head(var_roll)
var_roll[1] <- 0
all.equal(drop(var_rollfun), var_roll, check.attributes=FALSE)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
ls()
returns <- na.omit(rutils::etfenv$returns$VTI)
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_var", step=25, look_back=3)
var_rollfun2 <- roll_fun(returns, fun="calc_var", step=25, look_back=3)
all.equal(var_rollfun, var_rollfun2)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_var", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_var", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_var", step=25, look_back=3)
var_rollfun2 <- roll_fun(returns, fun="calc_var", step=25, look_back=3)
all.equal(var_rollfun, var_rollfun2)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_mean", step=25, look_back=3)
var_rollfun2 <- roll_fun(returns, fun="calc_mean", step=25, look_back=3)
all.equal(var_rollfun, var_rollfun2)
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_mean", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_mean", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_mean", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_mean", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_mean", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_mean", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_skew", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_skew", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_skew", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_skew", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_skew", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_skew", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_kurtosis", step=25, look_back=3)
var_rollfun2 <- roll_fun(returns, fun="calc_kurtosis", step=25, look_back=3)
all.equal(var_rollfun, var_rollfun2)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_funptr.cpp")
runfun2("add2", 11.5, 2)
runfun2("mult2", 11.5, 2)
runfun2("fun222", 11.5, 2)
runfun("add2", 11.5, 2)
runfun("mult2", 11.5, 2)
drop(runfunvec("fun1", 11:5))
drop(runfunvec("fun2", 11:5))
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_funptr.cpp")
runfun2("add2", 11.5, 2)
runfun2("mult2", 11.5, 2)
runfun2("fun222", 11.5, 2)
runfun("add2", 11.5, 2)
runfun("mult2", 11.5, 2)
drop(runfunvec("fun1", 11:5))
drop(runfunvec("fun2", 11:5))
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_funptr.cpp")
runfun2("add2", 11.5, 2)
runfun2("mult2", 11.5, 2)
runfun2("fun222", 11.5, 2)
runfun("add2", 11.5, 2)
runfun("mult2", 11.5, 2)
drop(runfunvec("fun1", 11:5))
drop(runfunvec("fun2", 11:5))
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_funptr.cpp")
runfun2("add2", 11.5, 2)
runfun2("mult2", 11.5, 2)
runfun2("fun222", 11.5, 2)
runfun("add2", 11.5, 2)
runfun("mult2", 11.5, 2)
drop(runfunvec("fun1", 11:5))
drop(runfunvec("fun2", 11:5))
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_funptr.cpp")
runfun2("add2", 11.5, 2)
runfun2("mult2", 11.5, 2)
runfun2("fun222", 11.5, 2)
runfun("add2", 11.5, 2)
runfun("mult2", 11.5, 2)
drop(runfunvec("fun1", 11:5))
drop(runfunvec("fun2", 11:5))
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
var_rollfun <- HighFreq::roll_fun(returns, fun="calc_var", step=25, look_back=3)
var_rollfun2 <- roll_fun(returns, fun="calc_var", step=25, look_back=3)
all.equal(var_rollfun, var_rollfun2)
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
summary(microbenchmark(
Rcpp=HighFreq::roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp),
Rcpp2=roll_fun(returns, fun="calc_kurtosis", startp=startp, endp=endp), times=10))[, c(1, 4, 5)]
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
library(HighFreq)
rm(list = )
rm(list = ls())
returns <- na.omit(rutils::etfenv$returns$VTI)
var_rollfun <- HighFreq::roll_moment(returns, fun="calc_var", step=25, look_back=3)
var_roll <- HighFreq::roll_var(returns, step=25, look_back=3)
all.equal(var_rollfun, var_roll, check.attributes=FALSE)
endp <- HighFreq::calc_endpoints(NROW(returns), step=25)
startp <- HighFreq::calc_startpoints(endp, look_back=3)
var_rollfun <- HighFreq::roll_moment(returns, fun="calc_var", startp=startp, endp=endp)
var_roll <- sapply(1:NROW(endp), function(it) {
var(returns[startp[it]:endp[it]+1, ])
})  # end sapply
var_roll[1] <- 0
all.equal(drop(var_rollfun), var_roll, check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_moment(returns, fun="calc_var", startp=startp, endp=endp),
Rcode=sapply(1:NROW(endp), function(it) {
var(returns[startp[it]:endp[it]+1, ])
}),
times=10))[, c(1, 4, 5)]
listv <- list(method = "least_squares",
eigen_thresh = 0.001,
eigen_max = 0,
confi_level = 0.1
)
ls()
listv <- list(method = "least_squares",
eigen_thresh = 0.001,
eigen_max = 0,
confi_level = 0.1
)
listv
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
parselist(foo)
parselist(listv)
listv <- list(intercept = TRUE,
method = "least_squares",
eigen_thresh = 0.001,
eigen_max = 0,
confi_level = 0.1
)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
parselist(listv)
listv <- list(intercept = FALSE,
method = "least_squares",
eigen_thresh = 0.001,
eigen_max = 0,
confi_level = 0.1
)
parselist(listv)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
listv <- list(intercept = TRUE,
method = "least_squares",
eigen_thresh = 0.001,
dimax = 0,
confl = 0.1,
alpha = 0.1
)
parselist(listv)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
parselist(listv)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
controlv <- list(intercept = TRUE,
method = "least_squares",
eigen_thresh = 0.001,
dimax = 0,
confl = 0.1,
alpha = 0.1
)
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
response <- returns[, 1]
predictor <- returns[, -1]
reg_arma <- drop(HighFreq::calc_reg(response=response, predictor=predictor))
regnew <- drop(calc_reg(response=response, predictor=predictor, controlv=controlv))
all.equal(reg_arma, regnew, check.attributes=FALSE)
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
calc_control()
controlv <- calc_control()
controlv
unlist(controlv)
controlv <- calc_control(dimax = 4)
unlist(controlv)
reg_arma <- drop(HighFreq::calc_reg(response=response, predictor=predictor, dimax = 4))
regnew <- drop(calc_reg(response=response, predictor=predictor, controlv=controlv))
all.equal(reg_arma, regnew, check.attributes=FALSE)
regnew
reg_arma
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_armadillo.cpp")
controlv <- calc_control(dimax=4)
endp <- xts::endpoints(returns, on="months")[-1]
look_back <- 12
startp <- c(rep(1, look_back), endp[1:(NROW(endp)-look_back)])
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], endp=(endp-1), startp=(startp-1))
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], endp=(endp-1), startp=(startp-1))
regnew <- roll_reg(response=returns[, 1], predictor=returns[, 2], controlv=controlv, endp=(endp-1), startp=(startp-1))
all.equal(reg_stats, regnew, check.attributes=FALSE)
controlv
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], endp=(endp-1), startp=(startp-1))
regnew <- roll_reg(response=returns[, 1], predictor=returns[, 2], controlv=controlv, endp=(endp-1), startp=(startp-1))
all.equal(reg_stats, regnew, check.attributes=FALSE)
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], dimax=4, endp=(endp-1), startp=(startp-1))
regnew <- roll_reg(response=returns[, 1], predictor=returns[, 2], controlv=controlv, endp=(endp-1), startp=(startp-1))
all.equal(reg_stats, regnew, check.attributes=FALSE)
controlv <- calc_control(method = "regular", dimax=4)
unlist(controlv)
reg_arma <- drop(HighFreq::calc_reg(response=response, predictor=predictor, method="regular", dimax=4))
regnew <- drop(calc_reg(response=response, predictor=predictor, controlv=controlv))
all.equal(reg_arma, regnew, check.attributes=FALSE)
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], method="regular", dimax=4, endp=(endp-1), startp=(startp-1))
regnew <- roll_reg(response=returns[, 1], predictor=returns[, 2], controlv=controlv, endp=(endp-1), startp=(startp-1))
all.equal(reg_stats, regnew, check.attributes=FALSE)
controlv <- calc_control(intercept=FALSE, method="regular", dimax=4)
unlist(controlv)
reg_arma <- drop(HighFreq::calc_reg(response=response, predictor=predictor, intercept=FALSE, method="regular", dimax=4))
regnew <- drop(calc_reg(response=response, predictor=predictor, controlv=controlv))
all.equal(reg_arma, regnew, check.attributes=FALSE)
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], intercept=FALSE, method="regular", dimax=4, endp=(endp-1), startp=(startp-1))
regnew <- roll_reg(response=returns[, 1], predictor=returns[, 2], controlv=controlv, endp=(endp-1), startp=(startp-1))
all.equal(reg_stats, regnew, check.attributes=FALSE)
library(HighFreq)
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
response <- returns[, 1]
predictor <- returns[, -1]
lmod <- lm(response ~ predictor)
lmodsum <- summary(lmod)
coeff <- lmodsum$coefficients
controlv <- calc_control()
regarma <- drop(HighFreq::calc_reg(response=response, predictor=predictor, controlv=controlv))
all.equal(regarma[1:(2*(1+NCOL(predictor)))],
c(coeff[, "Estimate"], coeff[, "t value"]), check.attributes=FALSE)
controlv <- HighFreq::calc_control()
controlv <- HighFreq::calc_control()
regarma <- drop(HighFreq::calc_reg(response=response, predictor=predictor, controlv=controlv))
all.equal(regarma[1:(2*(1+NCOL(predictor)))],
c(coeff[, "Estimate"], coeff[, "t value"]), check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_reg(response=response, predictor=predictor, controlv=controlv),
Rcode=lm(response ~ predictor),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
rm(calc_control)
controlv
returns <- na.omit(rutils::etfenv$returns[, c("XLP", "VTI")])
endp <- xts::endpoints(returns, on="months")[-1]
look_back <- 12
startp <- c(rep(1, look_back), endp[1:(NROW(endp)-look_back)])
controlv <- HighFreq::calc_control()
reg_stats <- HighFreq::roll_reg(response=returns[, 1], predictor=returns[, 2], endp=(endp-1), startp=(startp-1), controlv=controlv)
betas <- reg_stats[, 2]
betas_r <- sapply(1:NROW(endp), FUN=function(ep) {
datav <- returns[startp[ep]:endp[ep], ]
drop(cov(datav[, 1], datav[, 2])/var(datav[, 2]))
})  # end sapply
all.equal(betas, betas_r, check.attributes=FALSE)
library(HighFreq)
library(HighFreq)
returns <- na.omit(rutils::etfenv$returns[, 1:16])
riskf <- 0.03/260
excess <- returns - riskf
endp <- rutils::calc_endpoints(returns, interval="months")
endp <- endp[endp > 0]
nrows <- NROW(endp)
look_back <- 12
startp <- c(rep_len(1, look_back-1), endp[1:(nrows-look_back+1)])
alpha <- 0.5
dimax <- 3
controlv <- HighFreq::param_portf(dimax=dimax, alpha=alpha, scalew="sumsq")
pnls <- HighFreq::back_test(excess, returns, controlv=controlv, startp=(startp-1), endp=(endp-1))
pnls <- xts::xts(pnls, index(returns))
colnames(pnls) <- "strat_rets"
dygraphs::dygraph(cumsum(pnls), main="Cumulative Returns of Max Sharpe Portfolio Strategy")
Rcpp::sourceCpp(file="/Users/jerzy/Develop/Rcpp/test_HighFreq.cpp")
pnlsn <- HighFreq::back_test(excess, returns, startp-1, endp-1, dimax = dimax, alpha = alpha)
pnlsn <- xts::xts(pnlsn, index(returns))
colnames(pnlsn) <- "strat_rets"
pnlsn <- back_test(excess, returns, startp-1, endp-1, dimax = dimax, alpha = alpha)
pnlsn <- xts::xts(pnlsn, index(returns))
colnames(pnlsn) <- "strat_rets"
all.equal(pnls, pnlsn)
foo <- cbind(pnls, pnlsn)
tail(foo)
controlv
unlist(controlv)
pnlsn <- back_test(excess, returns, startp-1, endp-1, dimax = dimax, alpha = alpha, scalew="sumsq")
pnlsn <- xts::xts(pnlsn, index(returns))
colnames(pnlsn) <- "strat_rets"
all.equal(pnls, pnlsn)
library(HighFreq)
retsp <- na.omit(rutils::etfenv$returns$VTI)
qnorm(0.975)/sqrt(NROW(retsp))
Box.test(returns, lag=10, type="Ljung")
Box.test(retsp, lag=10, type="Ljung")
Box.test(retsp, type="Ljung")
Box.test(retsp, lag=20, type="Ljung")
Box.test(rnorm(NROW(retsp)), lag=10, type="Ljung")
library(HighFreq)
ohlc <- HighFreq::SPY
nrows <- NROW(ohlc)
closep <- log(quantmod::Cl(ohlc))
retsp <- rutils::diffit(closep)
colnames(retsp) <- "SPY"
Box.test(retsp, lag=10, type="Ljung")
closep <- log(Cl(xts::to.period(x=ohlc, period="days")))
retsd <- rutils::diffit(closep)
Box.test(retsd, lag=10, type="Ljung")
rets_scaled
sapply(list(minutely=retsp, hourly=retsh, daily=retsd),
function(rets) {
Box.test(rets, lag=10, type="Ljung")$statistic
})  # end sapply
closep <- log(Cl(xts::to.period(x=ohlc, period="hours")))
retsh <- rutils::diffit(closep)
sapply(list(minutely=retsp, hourly=retsh, daily=retsd),
function(rets) {
Box.test(rets, lag=10, type="Ljung")$statistic
})  # end sapply
Box.test(retsd, lag=10, type="Ljung")
pacfv <- rutils::plot_acf(retsp, lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
pacfv <- pacf(retsp, lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
pacfv <- pacf(retsp, lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
args(pacf)
pacfv <- pacf(retsp, lag.max=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
pacfv <- pacf(as.numeric(retsp), lag.max=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
ls()
rm(list = ls())
ohlc <- HighFreq::SPY
ohlc[, 1:4] <- log(ohlc[, 1:4])
nrows <- NROW(ohlc)
closep <- quantmod::Cl(ohlc)
retsp <- rutils::diffit(closep)
colnames(retsp) <- "SPY"
rm(list = ls())
ohlc <- HighFreq::SPY
ohlc[, 1:4] <- log(ohlc[, 1:4])
nrows <- NROW(ohlc)
closep <- quantmod::Cl(ohlc)
retsp <- rutils::diffit(closep)
colnames(retsp) <- "SPY"
# Ljung-Box test for minutely SPY returns
Box.test(retsp, lag=10, type="Ljung")
# Calculate hourly SPY percentage returns
closeh <- Cl(xts::to.period(x=ohlc, period="hours"))
retsh <- rutils::diffit(closeh)
# Ljung-Box test for hourly SPY returns
Box.test(retsh, lag=10, type="Ljung")
# Calculate daily SPY percentage returns
closed <- Cl(xts::to.period(x=ohlc, period="days"))
retsd <- rutils::diffit(closed)
# Ljung-Box test for daily SPY returns
Box.test(retsd, lag=10, type="Ljung")
# Ljung-Box test statistics for aggregated SPY returns
sapply(list(minutely=retsp, hourly=retsh, daily=retsd),
function(rets) {
Box.test(rets, lag=10, type="Ljung")$statistic
})  # end sapply
par(mfrow=c(2, 1))
par(mfrow=c(2, 1))
acfv <- rutils::plot_acf(as.numeric(retsp), lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
acfv <- rutils::plot_acf(as.numeric(retsp), lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
dev.new(width=6, height=8, noRStudioGD=TRUE)
par(mfrow=c(2, 1))
acfv <- rutils::plot_acf(as.numeric(retsp), lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
pacfv <- pacf(as.numeric(retsp), lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
retsp <- as.numeric(rutils::diffit(closep))
colnames(retsp) <- "SPY"
retsp <- rutils::diffit(closep)
colnames(retsp) <- "SPY"
ohlc <- HighFreq::SPY
ohlc[, 1:4] <- log(ohlc[, 1:4])
nrows <- NROW(ohlc)
closep <- quantmod::Cl(ohlc)
retsp <- rutils::diffit(closep)
colnames(retsp) <- "SPY"
acfv
pacfv
args(rutils::plot_acf)
rutils::plot_acf
acfv <- acf(as.numeric(retsp), lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Autocorrelations of Minutely SPY Returns", line=1)
acfv
pacfv <- pacf(as.numeric(retsp), lag=10,
xlab="lag", ylab="partial autocorrelation", main="")
title("Partial Autocorrelations of Minutely SPY Returns", line=1)
pacfv
pacfv <- pacf(as.numeric(retsp), plot=FALSE)
pacfv
acfv <- acf(as.numeric(retsp), plot=FALSE)
acfv
acfv$acf[-1]
pacfv$acf
acfv$acf[-1]
drop(pacfv$acf)
dev.new(width=6, height=8, noRStudioGD=TRUE)
dev.new(width=6, height=4, noRStudioGD=TRUE)
acfv <- rutils::plot_acf(as.numeric(retsp), lag=10,
xlab="lag", ylab="Autocorrelation", main="")
title("Autocorrelations of Minutely SPY Returns", line=1)
sum(acfv$acf)
rm(list = ls())
ohlc <- HighFreq::SPY
ohlc[, 1:4] <- log(ohlc[, 1:4])
nrows <- NROW(ohlc)
closep <- quantmod::Cl(ohlc)
retsp <- rutils::diffit(closep)
colnames(retsp) <- "SPY"
x11(width=6, height=4)
acfv <- rutils::plot_acf(as.numeric(retsp), lag=10,
xlab="lag", ylab="Autocorrelation", main="")
title("Autocorrelations of Minutely SPY Returns", line=1)
