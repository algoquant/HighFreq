pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
tail(pnl_s)
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s <- drop(calc_weights(re_turns[1:1e3, ], typ_e="max_sharpe", al_pha=0))
dim(re_turns)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s <- drop(calc_weights(re_turns, typ_e="rankrob", al_pha=0))
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s
sum(weight_s)
min(weight_s)
weight_s <- (weight_s - mean(weight_s))
sum(weight_s)
min(weight_s)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s <- colMeans(re_turns)
weight_s <- HighFreq::calc_ranks(weight_s)
weight_s
weight_s <- drop(weight_s)
weight_s <- (weight_s - mean(weight_s))
sum(weight_s)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s <- colMeans(re_turns[1:2e3, ])
weight_s <- drop(HighFreq::calc_ranks(weight_s))
weight_s <- (weight_s - mean(weight_s))
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s <- colMeans(re_turns)
weight_s <- drop(HighFreq::calc_ranks(weight_s))
foo <- weight_s
weight_s <- drop(calc_weights(re_turns, typ_e="max_sharpe", al_pha=0, scal_e=FALSE))
weight_s <- drop(calc_weights(re_turns, typ_e="rankrob", al_pha=0, scal_e=FALSE))
weight_s <- sapply(re_turns, median)
sum(weight_s == 0)
weight_s <- sapply(re_turns, function(x) mean(x)/sd(x))
weight_s <- drop(HighFreq::calc_ranks(weight_s))
weight_s <- (weight_s - mean(weight_s))
weight_s
foo <- weight_s
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
all.equal(foo, weight_s)
weight_s <- drop(calc_weights(re_turns, typ_e="rank", al_pha=0, scal_e=FALSE))
all.equal(foo, weight_s)
foo <- weight_s
weight_s <- colMeans(re_turns)
weight_s <- sapply(re_turns, function(x) mean(x)/sd(x))
weight_s <- drop(HighFreq::calc_ranks(weight_s))
weight_s <- (weight_s - mean(weight_s))
all.equal(foo, weight_s)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
foo <- sort(weight_s)
head(foo)
tail(foo)
head(weight_s)
names(weight_s) <- colnames(re_turns)
head(weight_s)
tail(weight_s)
foo <- weight_s[order(weight_s)]
head(foo)
tail(foo)
tail(foo, 22)
dim(returns_scaled)
returns_scaled <- returns_scaled[, colnames(re_turns)]
dim(returns_scaled)
weight_s <- sapply(returns_scaled, function(x) mean(x)/sd(x))
weight_s <- drop(HighFreq::calc_ranks(weight_s))
weight_s <- (weight_s - mean(weight_s))
names(weight_s) <- colnames(re_turns)
foo <- weight_s[order(weight_s)]
tail(foo, 22)
weight_s
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
weight_s <- sapply(re_turns, function(x) mean(x)/sd(x))
weight_s <- (weight_s - mean(weight_s))
names(weight_s) <- colnames(re_turns)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
?skew
?moments::skew
?moments::skewness
da_ta <- rnorm(1e3)
moments::skewness(re_turns[, 1])
weight_s <- sapply(re_turns, moments::skewness)
weight_s <- (weight_s - mean(weight_s))
names(weight_s) <- colnames(re_turns)
sum(weight_s)
range(weight_s)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- xts(cumsum(pnl_s), order.by=index(re_turns))
price_s <- cumsum(rowMeans(re_turns))
pnl_s <- cbind(pnl_s, price_s)
colnames(pnl_s) <- c("Strategy", "Index")
col_names <- colnames(pnl_s)
cap_tion <- paste("Momentum Strategy for S&P500 Stocks")
dygraphs::dygraph(pnl_s, main=cap_tion) %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=1, col="red") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=1, col="blue")
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf9.R')
runApp('C:/Develop/R/presentations/app_roll_portf8.R')
runApp('C:/Develop/R/presentations/app_roll_portf7.R')
runApp('C:/Develop/R/presentations/app_roll_portf8.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
foo <- drop(calc_weights(re_turns, typ_e="rank", al_pha=0))
bar <- drop(calc_weights(re_turns, typ_e="rank", al_pha=0.9))
all.equal(foo, bar)
al_pha
ls()
n_cols <- NCOL(re_turns)
end_points <- rutils::calc_endpoints(re_turns, inter_val="weeks")
end_points <- end_points[end_points > (n_cols+1)]
n_rows <- NROW(end_points)
foo <- HighFreq::back_test(ex_cess=returns_scaled,
re_turns=re_turns,
start_points=start_points-1,
end_points=end_points-1,
max_eigen=max_eigen,
al_pha=al_pha,
typ_e=typ_e,
co_eff=co_eff)
start_points <- c(rep_len(1, look_back-1), end_points[1:(n_rows-look_back+1)])
foo <- HighFreq::back_test(ex_cess=returns_scaled,
re_turns=re_turns,
start_points=start_points-1,
end_points=end_points-1,
max_eigen=max_eigen,
al_pha=al_pha,
typ_e=typ_e,
co_eff=co_eff)
bar <- HighFreq::back_test(ex_cess=returns_scaled,
re_turns=re_turns,
start_points=start_points-1,
end_points=end_points-1,
max_eigen=max_eigen,
al_pha=0.0,
typ_e=typ_e,
co_eff=co_eff)
all.equal(foo, bar)
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
rep_len(1, 0)
c(rep_len(1, 0), 1:2)
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
look_back
foo <- c(rep_len(1, 1-1), end_points[1:(len_gth-1+1)])
foo <- c(rep_len(1, 1-1), end_points[1:(NROW(end_points)-1+1)])
tail(end_points)
tail(start_points)
tail(foo)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
weight_s <- matrix(c(1, rep(0, 10)), nc=1)
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix, weight_s=weight_s)
all.equal(coredata(mat_rix), weight_ed, check.attributes=FALSE)
foo <- HighFreq::roll_wsum(mat_rix[, 1], weight_s)
all.equal(foo, weight_ed[, 1], check.attributes=FALSE)
tail(foo)
foo <- drop(foo)
all.equal(foo, weight_ed[, 1], check.attributes=FALSE)
tail(foo)
tail(weight_ed[, 1])
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix[, 1], weight_s=weight_s)
drop(weight_ed)
weight_ed <- drop(weight_ed)
all.equal(foo, weight_ed, check.attributes=FALSE)
tail(foo)
tail(weight_ed)
weight_s
weight_s <- matrix(c(1, rep(0, 3)), nc=1)
weight_s
mat_rix <- matrix(c(rep(0, 11), c(rep(1, 5)), nc=1)
)
mat_rix
HighFreq::roll_conv(mat_rix=mat_rix, weight_s=weight_s)
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix, weight_s=weight_s)
all.equal(mat_rix, weight_ed, check.attributes=FALSE)
weight_s <- exp(-0.2*(1:5))
weight_s <- matrix(weight_s/sum(weight_s), nc=1)
weight_s
sum(weight_s)
weight_ed <- HighFreq::roll_conv(mat_rix=mat_rix, weight_s=weight_s)
weight_ed
mat_rix
mat_rix <- matrix(c(rep(0, 11), c(rep(1, 5)), nc=1))
mat_rix
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
weight_ed
mat_rix
ls()
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
ls()
dim(re_turns)
matrix(runif(9), dimnames=list(3, 3))
list(3, 3)
matrix(runif(9), dim=c(3, 3))
dim(re_turns)
prod(dim(re_turns))
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
# calculate returns on equal weight portfolio
in_dex <- xts(cumsum(re_turns %*% rep(1/sqrt(n_weights), n_weights)), index(re_turns))
n_weights <- NCOL(re_turns)
# calculate returns on equal weight portfolio
in_dex <- xts(cumsum(re_turns %*% rep(1/sqrt(n_weights), n_weights)), index(re_turns))
foo <- xts(rowMeans(re_turns), index(re_turns))*sqrt(n_weights)
all.equal(in_dex, foo)
tail(in_dex)
tail(foo)
foo <- foo*sqrt(n_weights)
tail(foo)
tail(foo)
tail(foo)
sqrt(n_weights)
foo <- foo*sqrt(n_weights)
tail(foo)
foo <- foo*sqrt(n_weights)
tail(foo)
tail(in_dex)
foo <- xts(cumsum(rowMeans(re_turns)), index(re_turns))*sqrt(n_weights)
all.equal(in_dex, foo)
library(microbenchmark)
foo <- rep(1/sqrt(n_weights), n_weights)
summary(microbenchmark(
prod=(re_turns %*% foo),
row_means=rowMeans(re_turns),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
prod=(re_turns %*% foo),
row_means=rowMeans(re_turns),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
prod=(re_turns %*% foo),
row_means=rowMeans(re_turns),
times=10))[, c(1, 4, 5)]
# Compile Rcpp functions
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
rm(roll_wsum)
weight_s <- exp(-0.2*(1:11))
weight_s <- matrix(weight_s/sum(weight_s), nc=1)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
foo <- roll_conv_hf(mat_rix, weight_s)
all.equal(weight_ed, foo)
head(weight_ed)
tail(weight_ed)
tail(foo)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
foo <- roll_conv_hf(mat_rix, weight_s)
all.equal(weight_ed, foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
dim(weight_s)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
foo <- roll_conv_n(mat_rix, weight_s)
all.equal(weight_ed, foo)
head(weight_ed)
tail(weight_ed)
tail(foo)
dim(weight_ed)
dim(foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
weight_s <- exp(-0.2*(1:11))
weight_s <- matrix(weight_s/sum(weight_s), nc=1)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
foo <- roll_conv_n(mat_rix, weight_s)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
dim(weight_ed)
dim(foo)
tail(weight_ed, 22)
tail(foo, 22)
head(weight_ed, 22)
head(foo, 22)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
foo <- roll_conv_n(mat_rix, weight_s)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
all.equal(weight_ed, foo)
tail(weight_ed, 22)
tail(foo, 22)
head(weight_ed, 22)
head(foo, 22)
dim(weight_ed)
dim(foo)
all.equal(weight_ed, foo)
bar <- (weight_ed - foo)
head(bar, 22)
tail(bar, 22)
all.equal(weight_ed[12:NROW(weight_ed), ], foo[12:NROW(foo), ])
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
foo <- roll_conv_n(mat_rix, weight_s)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
all.equal(weight_ed, foo)
bar <- (weight_ed - foo)
head(bar, 22)
tail(bar, 22)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
foo <- roll_conv_n(mat_rix, weight_s)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
all.equal(weight_ed, foo)
library(microbenchmark)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
summary(microbenchmark(
roll_conv_n=roll_conv_n(mat_rix, weight_s),
roll_conv=HighFreq::roll_conv(mat_rix, weight_s),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
roll_conv_n=roll_conv_n(mat_rix, weight_s),
roll_conv=HighFreq::roll_conv(mat_rix, weight_s),
times=10))[, c(1, 4, 5)]
library(HighFreq)
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
summary(microbenchmark(
roll_conv=HighFreq::roll_conv(mat_rix, weight_s),
roll_conv_ref=HighFreq::roll_conv_ref(mat_rix, weight_s),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
roll_conv=HighFreq::roll_conv(mat_rix, weight_s),
roll_conv_ref=HighFreq::roll_conv_ref(mat_rix, weight_s),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
roll_conv=HighFreq::roll_conv(mat_rix, weight_s),
roll_conv_ref=HighFreq::roll_conv_ref(mat_rix, weight_s),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
roll_conv=HighFreq::roll_conv(mat_rix, weight_s),
roll_conv_ref=HighFreq::roll_conv_ref(mat_rix, weight_s),
times=10))[, c(1, 4, 5)]
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
library(HighFreq)
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf6.R')
mat_rix <- na.omit(rutils::etf_env$re_turns[, 1:2])
weight_s <- matrix(c(1, rep(0, 10)), nc=1)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
all.equal(coredata(mat_rix), weight_ed, check.attributes=FALSE)
weight_s <- exp(-0.2*(1:11))
weight_s <- matrix(weight_s/sum(weight_s), nc=1)
weight_ed <- HighFreq::roll_conv(mat_rix, weight_s)
filter_ed <- filter(x=mat_rix, filter=weight_s, method="convolution", sides=1)
all.equal(filter_ed[-(1:11), ], weight_ed[-(1:11), ], check.attributes=FALSE)
foo <- weight_ed
weight_ed <- HighFreq::roll_conv(mat_rix[, 1], weight_s)
vec_tor <- mat_rix[, 1]
foo <- weight_ed
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=rev(weight_s))
all.equal(foo, weight_ed, check.attributes=FALSE)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test.cpp")
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=rev(weight_s))
foo <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=weight_s)
all.equal(weight_ed, foo)
tail(weight_ed)
tail(foo)
foo <- cbind(weight_ed, foo)
tail(foo)
tail(foo, 22)
head(foo, 22)
foo <- roll_wsumr(vec_tor=vec_tor, weight_s=weight_s)
all.equal(weight_ed, foo)
summary(microbenchmark(
roll_wsum=roll_wsum(vec_tor=vec_tor, weight_s=rev(weight_s)),
roll_wsumr=roll_wsumr(vec_tor=vec_tor, weight_s=weight_s),
times=10))[, c(1, 4, 5)]
library(microbenchmark)
summary(microbenchmark(
roll_wsum=roll_wsum(vec_tor=vec_tor, weight_s=rev(weight_s)),
roll_wsumr=roll_wsumr(vec_tor=vec_tor, weight_s=weight_s),
times=10))[, c(1, 4, 5)]
summary(microbenchmark(
roll_wsum=roll_wsum(vec_tor=vec_tor, weight_s=rev(weight_s)),
roll_wsumr=roll_wsumr(vec_tor=vec_tor, weight_s=weight_s),
times=10))[, c(1, 4, 5)]
library(HighFreq)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=weight_s)
weight_s <- c(1, rep(0, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=weight_s)
all.equal(vec_tor, as.numeric(weight_ed))
dim(vec_tor)
vec_tor <- drop(vec_tor)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=weight_s)
all.equal(vec_tor, as.numeric(weight_ed))
all.equal(vec_tor, drop(weight_ed))
vec_tor <- drop(vec_tor)
head(vec_tor)
head(weight_ed)
head(drop(weight_ed))
vec_tor <- as.numeric(rutils::etf_env$VTI[, 6])
weight_s <- c(1, rep(0, 10))
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=weight_s)
all.equal(vec_tor, as.numeric(weight_ed))
weight_s <- exp(-0.2*1:11)
weight_s <- weight_s/sum(weight_s)
weight_ed <- HighFreq::roll_wsum(vec_tor=vec_tor, weight_s=weight_s)
filter_ed <- stats::filter(x=vec_tor, filter=weight_s, method="convolution", sides=1)
all.equal(filter_ed[-(1:11)], weight_ed[-(1:11)], check.attributes=FALSE)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
ls()
library(HighFreq)
ls()
# Data setup code
load("C:/Develop/R/lecture_slides/data/sp500_returns.RData")
ls()
dim(re_turns)
library(shiny); runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
runApp('C:/Develop/R/presentations/app_roll_portf6.R')
