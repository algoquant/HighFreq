scal_e <- optim_fit$estimate[2]
foo <- ks.test(re_turns, tdistr, dfree=2, loc=lo_cation, scale=scal_e)
foo$statistic
p_vals <- sapply(2:5, function(dfree) {
optim_fit <- MASS::fitdistr(re_turns, densfun="t", df=dfree)
lo_cation <- optim_fit$estimate[1]
scal_e <- optim_fit$estimate[2]
foo <- ks.test(re_turns, tdistr, dfree=2, loc=lo_cation, scale=scal_e)
foo$statistic
})  # end sapply
p_vals
rm(list = ls())
re_turns <- rutils::diff_it(log(quantmod::Cl(rutils::etf_env$VTI)))
likeli_hood <- function(par, dfree, data) {
-sum(log(dt(x=(data-par[1])/par[2], df=dfree)/par[2]))
}  # end likeli_hood
l_vals <- sapply(2:5, function(dfree) {
# Initial parameters
par_init <- c(mean=0, scale=0.01)
# Fit distribution using optim()
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
da_ta=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
# Return the log-likelihood value
optim_fit$value
})  # end sapply
rm(list = ls)
rm(list = ls())
re_turns <- rutils::diff_it(log(quantmod::Cl(rutils::etf_env$VTI)))
likeli_hood <- function(par, dfree, data) {
-sum(log(dt(x=(data-par[1])/par[2], df=dfree)/par[2]))
}  # end likeli_hood
l_vals <- sapply(2:5, function(dfree) {
# Initial parameters
par_init <- c(mean=0, scale=0.01)
# Fit distribution using optim()
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
data=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
# Return the log-likelihood value
optim_fit$value
})  # end sapply
l_vals <- t(l_vals)
l_vals <- cbind(dfree=2:5, l_vals)
l_vals
l_vals <- sapply(2:5, function(dfree) {
# Initial parameters
par_init <- c(mean=0, scale=0.01)
# Fit distribution using optim()
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
data=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
# Return the log-likelihood value
optim_fit$value
})  # end sapply
l_vals <- t(l_vals)
l_vals
l_vals <- cbind(dfree=(2:5), l_vals)
l_vals
l_vals <- sapply(2:5, function(dfree) {
# Initial parameters
par_init <- c(mean=0, scale=0.01)
# Fit distribution using optim()
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
data=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
# Return the log-likelihood value
optim_fit$value
})  # end sapply
l_vals <- t(l_vals)
foo <- l_vals
cbind(dfree=(2:5), l_vals)
cbind(dfree=(2:5), lik=l_vals)
l_vals
l_vals <- sapply(2:5, function(dfree) {
# Initial parameters
par_init <- c(mean=0, scale=0.01)
# Fit distribution using optim()
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
data=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
# Return the log-likelihood value
optim_fit$value
})  # end sapply
cbind(dfree=(2:5), lik=l_vals)
l_vals <- cbind(dfree=(2:5), lik=l_vals)
round(l_vals, 4)
dfree_vec <- 2:5
l_vals <- sapply(dfree_vec, function(dfree) {
# Initial parameters
par_init <- c(mean=0, scale=0.01)
# Fit distribution using optim()
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
data=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
# Return the log-likelihood value
optim_fit$value
})  # end sapply
l_vals
plot(dfree_vec, l_vals, t="l", lwd=3, col="blue",
xlab="degrees of freedom", ylab="likelihood",
main="Likelihood vs Degrees of Freedom")
setwd("../lecture_slides")
plot(dfree_vec, l_vals, t="l", lwd=3, col="blue",
xlab="degrees of freedom", ylab="likelihood",
main="Likelihood vs Degrees of Freedom")
ls()
likeli_hood <- function(par, dfree, data) {
-sum(log(dt(x=(data-par[1])/par[2], df=dfree)/par[2]))
}  # end likeli_hood
dfree <- 3
par_init <- c(mean=0, scale=0.01)
optim_fit <- optim(par=par_init,
fn=likeli_hood, # log-likelihood function
data=re_turns,
dfree=dfree, # degrees of freedom
method="L-BFGS-B", # quasi-Newton method
upper=c(1, 0.1), # upper constraint
lower=c(-1, 1e-7)) # lower constraint
optim_fit$par
likeli_hood <- function(par=optim_fit$par, dfree=dfree, data=re_turns)
likeli_hood(par=optim_fit$par, dfree=dfree, data=re_turns)
# Define the log-likelihood objective function
likeli_hood <- function(par, dfree, data) {
-log(dt(x=(data-par[1])/par[2], df=dfree)/par[2])
}  # end likeli_hood
likeli_hood(par=optim_fit$par, dfree=dfree, data=re_turns)
re_turns <- as.numeric(na.omit(rutils::etf_env$re_turns$VTI))
?chisq.test
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
setwd("../lecture_slides")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
ls()
rm(list = ls())
al_pha <- 0.3; be_ta <- 0.5;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
set.seed(1121)  # Reset random numbers
in_nov <- rnorm(n_rows)
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,
beta=be_ta, innov=matrix(in_nov))
library(HighFreq)
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,
beta=be_ta, innov=matrix(in_nov))
library(HighFreq)
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,
beta=be_ta, innov=matrix(in_nov))
library(HighFreq)
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,
beta=be_ta, innov=matrix(in_nov))
HighFreq::calc_var(matrix(in_nov))
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, c("VTI", "XLF")])
HighFreq::calc_var(re_turns)
HighFreq:::calc_var(re_turns)
library(HighFreq)
HighFreq::calc_var(re_turns)
ls()
al_pha <- 0.3; be_ta <- 0.5;
om_ega <- 1e-4*(1-al_pha-be_ta)
n_rows <- 1000
set.seed(1121)  # Reset random numbers
in_nov <- rnorm(n_rows)
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,
beta=be_ta, innov=matrix(in_nov))
re_turns <- garch_data[, 1]
tail(re_turns)
re_turns <- garch_data[, 1, drop=FALSE]
tail(re_turns)
re_turns <- garch_data[, 1, drop=FALSE]
vari_ance <- var(re_turns)
re_turns <- (re_turns - mean(re_turns))
tail(re_turns)
likeli_hood <- function(al_pha, be_ta) {
om_ega <- vari_ance*(1 - al_pha - be_ta)
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.55, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
options(rgl.useNULL=TRUE); library(rgl)
rgl::persp3d(alphas, betas, lik_mat, col="green",
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
?cut
n_col <- 100
col_or <- rev(rainbow(n_col, start=0/6, end=4/6))
z_col <- cut(z, n_col)
n_col <- 100
col_or <- rev(rainbow(n_col, start=0/6, end=4/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rainbow(n_col, start=0/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rainbow(n_col, start=4/6, end=0/6)
z_col <- cut(lik_mat, n_col)
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
?rainbow
n_col <- 100
col_or <- rainbow(n_col, start=0/6, end=4/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
n_col <- 100
col_or <- rainbow(n_col, start=0/6, end=4/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- rainbow(n_col, start=4/6, end=6/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- rainbow(n_col, start=0/6, end=6/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rev(rainbow(n_col, start=0/6, end=6/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rev(rainbow(n_col, start=1/6, end=4/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rev(rainbow(n_col, start=2/6, end=4/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=5/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
rgl::persp3d(alphas, betas, lik_mat, col=col_or,
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- hcl.colors(n_col, alpha=0.5)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
rgl::persp3d(alphas, betas, lik_mat, col=col_or,
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- hcl.colors(n_col, alpha=0.2, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- hcl.colors(n_col, alpha=0.1, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.5, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=5/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
setwd("../lecture_slides")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
coord <- which(lik_mat == min(lik_mat), arr.ind=TRUE)
lik_mat[coord]
c(alphas[coord[2]], betas[coord[1]])
likeli_hood(alphas[coord[2]], betas[coord[1]])
coord
min(lik_mat)
likeli_hood(alphas[coord[1]], betas[coord[2]])
likeli_hood <- function(al_pha, be_ta) {
om_ega <- vari_ance*(1 - al_pha - be_ta)
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.5, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
min(lik_mat)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
re_turns <- garch_data[, 1, drop=FALSE]
vari_ance <- var(re_turns)
re_turns <- (re_turns - mean(re_turns))
likeli_hood <- function(al_pha, be_ta) {
om_ega <- vari_ance*(1 - al_pha - be_ta)
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.5, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
min(lik_mat)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
coord <- which(lik_mat == min(lik_mat), arr.ind=TRUE)
lik_mat[coord]
c(alphas[coord[2]], betas[coord[1]])
likeli_hood(alphas[coord[2]], betas[coord[1]])
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options("scipen")
options(scipen=10)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options(scipen=5)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options(scipen=1)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options(scipen=2)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
likeli_hood <- function(x, re_turns) {
al_pha <- x[1]; be_ta <- x[2]; om_ega <- x[3]
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
par_init <- c(alpha=0.2, beta=0.4, omega=vari_ance/0.2)
optim_fit <- optim(par=par_init,
fn=likeli_hood, # Log-likelihood function
method="L-BFGS-B", # Quasi-Newton method
re_turns=re_turns,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100)) # Lower constraint
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(optim_fit$par["alpha"], optim_fit$par["beta"], optim_fit$par["omega"]))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
op_tim$optim$bestmem
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3]))
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
re_turns <- rutils::diff_it(log(quantmod::Cl(rutils::etf_env$VTI)))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim
op_tim$optim
re_turns <- garch_data[, 1, drop=FALSE]
vari_ance <- var(re_turns)
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3]))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3]))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
re_turns <- rutils::diff_it(log(quantmod::Cl(rutils::etf_env$VTI)))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.45, 0.65, vari_ance), # Upper constraint
lower=c(0.25, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.4, 0.7, vari_ance), # Upper constraint
lower=c(0.1, 0.4, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.4, 0.9, vari_ance), # Upper constraint
lower=c(0.1, 0.5, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
var(re_turns)
om_ega/(1-al_pha-be_ta)
op_tim$optim$bestmem[3]/(1-op_tim$optim$bestmem[1]-op_tim$optim$bestmem[2])
op_tim$optim$bestmem[3]/(1-op_tim$optim$bestmem[1]-op_tim$optim$bestmem[2])
drop(var(re_turns))
op_tim$optim$bestmem[1]
par_am <- unname(op_tim$optim$bestmem)
par_am
c(par_am[1], par_am[2], par_am[3])
c(al_pha=par_am[1], be_ta=par_am[2], om_ega=par_am[3])
par_am[3]/(1-par_am[1]-par_am[2])
drop(var(re_turns))
om_ega/(1-al_pha-be_ta)
par_am[3]/(1-par_am[1]-par_am[2])
al_pha <- par_am[1]; be_ta <- par_am[2]; om_ega <- par_am[3]
om_ega/(1-al_pha-be_ta)
par_am[3]/(1-par_am[1]-par_am[2])
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,  beta=be_ta,
innov=re_turns, is_random=FALSE)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
for (i in 2:n_rows) {
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
all.equal(garch_data[, 2], vari_ance, check.attributes=FALSE)
n_rows <- NROW(re_turns)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
for (i in 2:n_rows) {
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
all.equal(garch_data[, 2], vari_ance, check.attributes=FALSE)
dygraphs::dygraph(xts::xts(sqrt(vari_ance), index(re_turns)),
main="Estimated GARCH Volatility of VTI")
dygraphs::dygraph(xts::xts(sqrt(vari_ance), index(re_turns)),
col="blue", main="Estimated GARCH Volatility of VTI")
args(dygraphs::dygraph)
dygraphs::dygraph(xts::xts(sqrt(vari_ance), index(re_turns)),
main="Estimated GARCH Volatility of VTI") %>%
dyOptions(colors="blue")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
c(al_pha, be_ta, om_ega)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
