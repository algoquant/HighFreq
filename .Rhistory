weight_s <- rnorm(n_var)
res_ponse <- -3 + de_sign %*% weight_s + rnorm(len_gth, sd=0.5)
reg_model <- lm(res_ponse ~ de_sign)
sum_mary <- summary(reg_model)
reg_arma <- calc_lm(res_ponse=res_ponse, de_sign=de_sign)
all.equal(reg_arma$coefficients[, "coeff"], unname(coef(reg_model)))
all.equal(unname(reg_arma$coefficients), unname(sum_mary$coefficients))
all.equal(drop(reg_arma$residuals), unname(reg_model$residuals))
all.equal(unname(reg_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
all.equal(drop(reg_arma$residuals), unname(reg_model$residuals), check.attributes=FALSE)
tail(reg_model$residuals)
tail(drop(reg_arma$residuals))
all.equal(unname(reg_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
rm(list = ls())
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
reg_model <- lm(res_ponse ~ de_sign)
sum_mary <- summary(reg_model)
reg_arma <- calc_lm(res_ponse=res_ponse, de_sign=de_sign)
reg_arma$coefficients
all.equal(reg_arma$coefficients[, "coeff"], unname(coef(reg_model)))
all.equal(unname(reg_arma$coefficients), unname(sum_mary$coefficients))
all.equal(unname(reg_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
eigen_max <- 3
al_pha <- 0.5
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe"))
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe_median"))
rm(list = ls())
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
reg_model <- lm(res_ponse ~ de_sign)
reg_arma <- calc_reg(response=res_ponse, design=de_sign)
reg_arma
coef(reg_model)
sum_mary <- summary(reg_model)
sum_mary$coefficients
reg_arma <- drop(calc_reg(response=res_ponse, design=de_sign))
all.equal(reg_arma$coefficients[, 1:2*(1+NROW(de_sign))],
unname(sum_mary$coefficients[, c("Estimate", "t value")]), check.attributes=FALSE)
sum_mary$coefficients
sum_mary$coefficients[, c("Estimate", "t value")]
all.equal(reg_arma$coefficients[, 1:2*(1+NROW(de_sign))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
all.equal(reg_arma[, 1:2*(1+NROW(de_sign))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
reg_arma[, 1:2*(1+NROW(de_sign))]
1:2*(1+NROW(de_sign))
all.equal(reg_arma[, 1:2*(1+NCOL(de_sign))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
1:2*(1+NCOL(de_sign))
2*(1+NCOL(de_sign))
1:(2*(1+NCOL(de_sign)))
all.equal(reg_arma[, 1:(2*(1+NCOL(de_sign)))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
reg_arma[, 1:(2*(1+NCOL(de_sign)))]
all.equal(reg_arma[1:(2*(1+NCOL(de_sign)))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
reg_arma[1:(2*(1+NCOL(de_sign)))]
sum_mary$coefficients[, c("Estimate", "t value")]
co_eff <- sum_mary$coefficients
co_eff
c(co_eff[, "Estimate"], co_eff[, "t value"])
all.equal(reg_arma[1:(2*(1+NCOL(de_sign)))],
c(co_eff[, "Estimate"], co_eff[, "t value"]), check.attributes=FALSE)
look_back
look_back <- 11
library(microbenchmark)
summary(microbenchmark(
Rcpp=calc_reg(response=res_ponse, design=de_sign),
Rcode=lm(res_ponse ~ de_sign),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
look_back <- 11
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
library(HighFreq)
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
look_back <- 11
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
z_scores_r <- sapply(1:NROW(de_sign), function(ro_w) {
if (ro_w == 1) return(0)
start_point <- max(1, ro_w-look_back+1)
sub_response <- res_ponse[start_point:ro_w]
sub_design <- de_sign[start_point:ro_w, ]
reg_model <- lm(sub_response ~ sub_design)
resid_uals <- reg_model$residuals
resid_uals[NROW(resid_uals)]/sd(resid_uals)
})  # end sapply
all.equal(unname(z_scores[-(1:look_back)]),
unname(z_scores_r[-(1:look_back)]))
all.equal(z_scores[-(1:look_back)], z_scores_r[-(1:look_back)], check.attributes=FALSE)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
tail(foo)
tail(z_scores)
all.equal(z_scores, foo[, 7])
all.equal(drop(z_scores), foo[, 7])
foo <- cbind(drop(z_scores), foo[, 7])
head(foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
foo <- cbind(drop(z_scores), foo[, 7])
tail(foo)
head(foo)
all.equal(foo[, 1], foo[, 2])
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=3, step=3)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=3, step=3)
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=3, step=3)
all.equal(drop(z_scores), foo[, 7])
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
z_scores <- roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
all.equal(drop(z_scores), foo[, 7])
z_scores <- roll_zscores(response=res_ponse, design=de_sign, look_back=3, step=3)
all.equal(drop(z_scores), foo[, 7])
devtools::document()
rm(list = ls())
devtools::document()
devtools::document()
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
look_back <- 11
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
foo <- HighFreq::calc_lm(response=res_ponse, design=de_sign)
class(res_ponse)
foo <- HighFreq::calc_lm(response=as.numeric(res_ponse), design=de_sign)
foo <- calc_lm(response=res_ponse, design=de_sign)
ls()
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
ls()
foo <- calc_lm(response=res_ponse, design=de_sign)
foo
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
foo <- calc_lm(response=res_ponse, design=de_sign)
library(HighFreq)
library(HighFreq)
foo <- HighFreq::calc_lm(response=res_ponse, design=de_sign)
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
look_back <- 11
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
library(HighFreq)
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
foo <- HighFreq::calc_lm(response=res_ponse, design=de_sign)
foo
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
library(HighFreq)
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
library(HighFreq)
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
random_taq <- function(vol_at=6.5e-5, dri_ft=0.0,
in_dex=seq(from=as.POSIXct(paste(Sys.Date()-3, "09:30:00")),
to=as.POSIXct(paste(Sys.Date()-1, "16:00:00")), by="1 sec"),
bid_offer=0.001, ...) {
len_gth <- NROW(in_dex)
# Create xts of random prices following geometric Brownian motion
ta_q <- xts(exp(cumsum(vol_at*rnorm(len_gth) + dri_ft - vol_at^2/2)),
order.by=in_dex)
# Create vector of random bid-offer spreads
bid_offer <- bid_offer*(1 + runif(len_gth))/2
# Create TAQ data from bid and offer prices
ta_q <- merge(ta_q*(1-bid_offer), ta_q*(1+bid_offer))
# Add traded price to TAQ data
r_unif <- runif(len_gth)
ta_q <- merge(ta_q, r_unif*ta_q[, 1] + (1-r_unif)*ta_q[, 2])
# Add trade volume column
ta_q <- merge(ta_q, sample(x=10*(2:18), size=len_gth, replace=TRUE))
colnames(ta_q) <- c("Bid.Price", "Ask.Price", "Trade.Price", "Volume")
ta_q
}
ta_q <- HighFreq::random_taq()
dygraph(ta_q)
tail(ta_q)
dygraph(ta_q$Trade.Price)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, c("VTI", "XLF")])
all.equal(drop(HighFreq::calc_var(re_turns)),
apply(re_turns, 2, var), check.attributes=FALSE)
all.equal(drop(HighFreq::calc_var(re_turns)),
matrixStats::colVars(re_turns), check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_var(re_turns),
matrixStats=matrixStats::colVars(re_turns),
Rcode=apply(re_turns, 2, var),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(drop(HighFreq::calc_var(re_turns, method="quantile")),
sapply(re_turns, mad), check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::calc_var(re_turns, method="quantile"),
Rcode=sapply(re_turns, mad),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::roll_var(re_turns, look_back=11, method="quantile"),
RcppRoll=RcppRoll::roll_var(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::roll_var(re_turns, look_back=11),
RcppRoll=RcppRoll::roll_var(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=HighFreq::roll_var(re_turns, look_back=11, method="quantile"),
TTR=TTR::runMAD(re_turns, n = 11),
RcppRoll=RcppRoll::roll_var(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
summary(microbenchmark(
Rcpp=HighFreq::roll_var(re_turns, look_back=11, method="quantile"),
TTR=TTR::runMAD(re_turns, n = 11),
RcppRoll=RcppRoll::roll_var(re_turns, n=11),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
HighFreq::calc_endpoints(21, 3)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_endpoints_new(25, 5)
HighFreq::calc_endpoints(25, 5)
HighFreq::calc_endpoints(23, 5)
calc_endpoints_new(23, 5)
HighFreq::calc_endpoints(23, 5, FALSE)
calc_endpoints_new(23, 5, 0)
calc_endpoints_new(23, 5, 1)
calc_endpoints_new(23, 5, 2)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_endpoints_new(23, 5, 1)
calc_endpoints_new(25, 5, 1)
calc_endpoints_new(23, 5, 1)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_endpoints_new(23, 5, 1)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 1))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 1))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 1))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 1))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
foo <- drop(calc_endpoints_new(23, 5, 1))
foo
foo+1
drop(calc_endpoints_new(23, 5, 1))+1
drop(calc_endpoints_new(23, 5, 2))+1
drop(calc_endpoints_new(23, 5, 3))+1
drop(calc_endpoints_new(23, 5, 4))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 3))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 3))+1
drop(calc_endpoints_new(23, 5, 4))+1
drop(calc_endpoints_new(23, 5, 1))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(23, 5, 1))+1
drop(calc_endpoints_new(23, 5, 4))+1
drop(calc_endpoints_new(25, 5, 4))+1
drop(calc_endpoints_new(25, 5, 1))+1
drop(calc_endpoints_new(25, 5, 1))
drop(calc_endpoints_new(25, 5, 2))
drop(calc_endpoints_new(25, 5))
drop(calc_endpoints_new(25, 5))+1
drop(calc_endpoints_new(25, 4))+1
drop(calc_endpoints_new(25, 3))
drop(calc_endpoints_new(25, 1))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 3))
drop(calc_endpoints_new(25, 6))
drop(calc_endpoints_new(25, 6, 3))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 6, 3))+1
drop(calc_endpoints_new(25, 6))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 6))+1
drop(calc_endpoints_new(25, 6, 3))+1
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
drop(calc_endpoints_new(26, 5, 2))+1
drop(calc_endpoints_new(26, 5, 1))+1
drop(calc_endpoints_new(26, 5, 4))+1
drop(calc_endpoints_new(26, 5, 1))+1
drop(calc_endpoints_new(26, 5))+1
drop(calc_endpoints_new(25, 5))+1
drop(calc_endpoints_new(25, 5, 1))+1
drop(calc_endpoints_new(25, 5, 2))+1
drop(calc_endpoints_new(25, 5, 4))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 5, 1))+1
drop(calc_endpoints_new(25, 5, 2))+1
drop(calc_endpoints_new(25, 5, 4))+1
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
drop(calc_endpoints_new(25, 6, 4))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
drop(calc_endpoints_new(25, 6, 4))+1
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
drop(calc_endpoints_new(25, 6, 3))+1
drop(calc_endpoints_new(25, 6, 4))+1
drop(calc_endpoints_new(25, 6, 5))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
drop(calc_endpoints_new(25, 6, 3))+1
drop(calc_endpoints_new(25, 6, 4))+1
drop(calc_endpoints_new(25, 6, 5))+1
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
drop(calc_endpoints_new(25, 6, 1))+1
drop(calc_endpoints_new(25, 6, 2))+1
drop(calc_endpoints_new(25, 6, 3))+1
drop(calc_endpoints_new(25, 6, 4))+1
drop(calc_endpoints_new(25, 6, 5))+1
drop(calc_endpoints_new(25, 6, 6))+1
drop(calc_endpoints_new(25, 6))+1
drop(calc_endpoints_new(25, 4, 1))+1
drop(calc_endpoints_new(25, 4, 2))+1
drop(calc_endpoints_new(25, 4, 3))+1
drop(calc_endpoints_new(25, 4, 4))+1
drop(calc_endpoints_new(25, 4))+1
library(HighFreq)
library(HighFreq)
HighFreq::calc_endpoints(23, 5))
HighFreq::calc_endpoints(23, 5)
HighFreq::calc_endpoints(23, 5, 1)
HighFreq::calc_endpoints(23, 5, 2)
HighFreq::calc_endpoints(23, 5, 4)
HighFreq::calc_endpoints(23, 5, 3)
drop(HighFreq::calc_endpoints(23, 5, 3))+1
drop(HighFreq::calc_endpoints(23, 5, 4))+1
drop(HighFreq::calc_endpoints(23, 5, 5))+1
drop(HighFreq::calc_endpoints(23, 5, 2))+1
drop(HighFreq::calc_endpoints(23, 5, 1))+1
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
drop(HighFreq::calc_endpoints(23, 5, 1))+1
drop(HighFreq::calc_endpoints(20, 5, 1))+1
drop(HighFreq::calc_endpoints(20, 5, 1))
drop(HighFreq::calc_endpoints(20, 5))
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
ls()
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
look_back <- 11
z_scores <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
all.equal(z_scores, foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
z_scores <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
all.equal(z_scores, foo)
for_mula <- XLP ~ VTI
de_sign <- na.omit(rutils::etf_env$re_turns[, c("XLP", "VTI")])
end_p <- xts::endpoints(de_sign, on="months")[-1]
end_p
look_back <- 3
start_p <- c(rep(1, look_back), end_p[1:(NROW(end_p)-look_back)])
head(cbind(end_p, start_p), look_back+2)
beta_s <- sapply(1:NROW(end_p),
FUN=function(ep) {
da_ta <- de_sign[start_p[ep]:end_p[ep], ]
# coef(lm(for_mula, data=da_ta))[2]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
foo <- roll_reg(response=res_ponse, design=de_sign, end_p=(end_p-1), start_p=(start_p-1))
start_p
NROW(end_p)
NROW(start_p)
foo <- HighFreq::roll_reg(response=res_ponse, design=de_sign, step=20, look_back=11)
z_scores <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
look_back <- 11
z_scores <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
foo <- HighFreq::roll_reg(response=res_ponse, design=de_sign, step=2, look_back=11)
foo <- HighFreq::roll_reg(response=res_ponse, design=de_sign, step=12, look_back=11)
foo <- HighFreq::roll_reg(response=res_ponse, design=de_sign, step=20, look_back=11)
bar <- roll_reg(response=res_ponse, design=de_sign, step=20, look_back=11)
all.equal(foo, bar)
for_mula <- XLP ~ VTI
de_sign <- na.omit(rutils::etf_env$re_turns[, c("XLP", "VTI")])
res_ponse <- de_sign[, 1]
look_back <- 3
start_p <- c(rep(1, look_back), end_p[1:(NROW(end_p)-look_back)])
beta_s <- sapply(1:NROW(end_p),
FUN=function(ep) {
da_ta <- de_sign[start_p[ep]:end_p[ep], ]
# coef(lm(for_mula, data=da_ta))[2]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
foo <- roll_reg(response=res_ponse, design=de_sign, end_p=(end_p-1), start_p=(start_p-1))
tail(foo)
tail(de_sign)
tail(foo)
drop(HighFreq::calc_reg(response=res_ponse, design=de_sign))
drop(calc_reg(response=res_ponse, design=de_sign))
dim(de_sign)
foo <- roll_reg(response=de_sign[, 1], design=de_sign[, 2], end_p=(end_p-1), start_p=(start_p-1))
tail(foo)
tail(beta_s)
all.equal(foo, beta_s[, 2])
all.equal(foo, drop(beta_s[, 2]))
all.equal(beta_s, drop(foo[, 2]))
reg_stats <- foo
all.equal(beta_s, drop(reg_stats[, 2]))
z_scores <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
tail(de_sign)
all.equal(z_scores, foo)
look_back
z_scores <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back, step = 21)
foo <- roll_reg(response=res_ponse, design=de_sign, look_back=look_back, step = 21)
all.equal(z_scores, foo)
rm(list = ls())
re_turns <- na.omit(rutils::etf_env$re_turns[, c("XLP", "VTI")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
look_back <- 21
reg_stats <- HighFreq::roll_reg(response=res_ponse, design=de_sign, look_back=look_back)
z_scores <- reg_stats[, 5]
z_scoresr <- sapply(1:NROW(de_sign), function(ro_w) {
if (ro_w == 1) return(0)
start_point <- max(1, ro_w-look_back+1)
sub_response <- res_ponse[start_point:ro_w]
sub_design <- de_sign[start_point:ro_w, ]
reg_model <- lm(sub_response ~ sub_design)
resid_uals <- reg_model$residuals
resid_uals[NROW(resid_uals)]/sd(resid_uals)
})  # end sapply
all.equal(z_scores[-(1:look_back)], z_scoresr[-(1:look_back)],
check.attributes=FALSE)
head(z_scores)
head(z_scoresr)
all.equal(z_scores, z_scoresr, check.attributes=FALSE)
reg_stats <- roll_reg(response=re_turns[, 1], design=re_turns[, 2], end_p=(end_p-1), start_p=(start_p-1))
beta_s <- reg_stats[, 2]
betas_r <- sapply(1:NROW(end_p), FUN=function(ep) {
da_ta <- re_turns[start_p[ep]:end_p[ep], ]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
all.equal(beta_s, betas_r, check.attributes=FALSE)
ls()
re_turns <- na.omit(rutils::etf_env$re_turns[, c("XLP", "VTI")])
end_p <- xts::endpoints(re_turns, on="months")[-1]
look_back <- 12
start_p <- c(rep(1, look_back), end_p[1:(NROW(end_p)-look_back)])
reg_stats <- roll_reg(response=re_turns[, 1], design=re_turns[, 2], end_p=(end_p-1), start_p=(start_p-1))
beta_s <- reg_stats[, 2]
betas_r <- sapply(1:NROW(end_p), FUN=function(ep) {
da_ta <- re_turns[start_p[ep]:end_p[ep], ]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
all.equal(beta_s, betas_r, check.attributes=FALSE)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
reg_stats <- roll_reg(response=re_turns[, 1], design=re_turns[, 2], end_p=(end_p-1), start_p=(start_p-1))
beta_s <- reg_stats[, 2]
betas_r <- sapply(1:NROW(end_p), FUN=function(ep) {
da_ta <- re_turns[start_p[ep]:end_p[ep], ]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
all.equal(beta_s, betas_r, check.attributes=FALSE)
reg_stats <- HighFreq::roll_reg(response=re_turns[, 1], design=re_turns[, 2], end_p=(end_p-1), start_p=(start_p-1))
beta_s <- reg_stats[, 2]
betas_r <- sapply(1:NROW(end_p), FUN=function(ep) {
da_ta <- re_turns[start_p[ep]:end_p[ep], ]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
all.equal(beta_s, betas_r, check.attributes=FALSE)
reg_stats <- HighFreq::roll_reg(response=re_turns[, 1], design=re_turns[, 2], end_p=(end_p-1), start_p=(start_p-1))
beta_s <- reg_stats[, 2]
betas_r <- sapply(1:NROW(end_p), FUN=function(ep) {
da_ta <- re_turns[start_p[ep]:end_p[ep], ]
drop(cov(da_ta[, 1], da_ta[, 2])/var(da_ta[, 2]))
})  # end sapply
all.equal(beta_s, betas_r, check.attributes=FALSE)
