col_or <- rainbow(n_col, start=4/6, end=0/6)
z_col <- cut(lik_mat, n_col)
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
?rainbow
n_col <- 100
col_or <- rainbow(n_col, start=0/6, end=4/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
n_col <- 100
col_or <- rainbow(n_col, start=0/6, end=4/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- rainbow(n_col, start=4/6, end=6/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- rainbow(n_col, start=0/6, end=6/6, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rev(rainbow(n_col, start=0/6, end=6/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rev(rainbow(n_col, start=1/6, end=4/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rev(rainbow(n_col, start=2/6, end=4/6))
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=5/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
rgl::persp3d(alphas, betas, lik_mat, col=col_or,
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- hcl.colors(n_col, alpha=0.5)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
rgl::persp3d(alphas, betas, lik_mat, col=col_or,
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- hcl.colors(n_col, alpha=0.2, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- hcl.colors(n_col, alpha=0.1, rev=TRUE)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.5, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=5/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
setwd("../lecture_slides")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
coord <- which(lik_mat == min(lik_mat), arr.ind=TRUE)
lik_mat[coord]
c(alphas[coord[2]], betas[coord[1]])
likeli_hood(alphas[coord[2]], betas[coord[1]])
coord
min(lik_mat)
likeli_hood(alphas[coord[1]], betas[coord[2]])
likeli_hood <- function(al_pha, be_ta) {
om_ega <- vari_ance*(1 - al_pha - be_ta)
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.5, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
min(lik_mat)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
re_turns <- garch_data[, 1, drop=FALSE]
vari_ance <- var(re_turns)
re_turns <- (re_turns - mean(re_turns))
likeli_hood <- function(al_pha, be_ta) {
om_ega <- vari_ance*(1 - al_pha - be_ta)
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
alphas <- seq(from=0.15, to=0.35, len=50)
betas <- seq(from=0.35, to=0.5, len=50)
lik_mat <- sapply(alphas, function(al_pha) sapply(betas,
function(be_ta) likeli_hood(al_pha, be_ta)))
min(lik_mat)
n_col <- 100
col_or <- rainbow(n_col, start=2/6, end=4/6)
z_col <- cut(lik_mat, n_col)
rgl::persp3d(alphas, betas, lik_mat, col=col_or[z_col],
xlab="alpha", ylab="beta", zlab="likelihood")
rgl::rglwidget(elementId="plot3drgl", width=700, height=700)
coord <- which(lik_mat == min(lik_mat), arr.ind=TRUE)
lik_mat[coord]
c(alphas[coord[2]], betas[coord[1]])
likeli_hood(alphas[coord[2]], betas[coord[1]])
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options("scipen")
options(scipen=10)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options(scipen=5)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options(scipen=1)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
options(scipen=2)  # Use fixed not scientific notation
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(alphas[coord[2]], betas[coord[1]], vari_ance*(1 - sum(alphas[coord[2]], betas[coord[1]]))))
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
likeli_hood <- function(x, re_turns) {
al_pha <- x[1]; be_ta <- x[2]; om_ega <- x[3]
-HighFreq::lik_garch(omega=om_ega, alpha=al_pha, beta=be_ta, returns=re_turns)
}  # end likeli_hood
par_init <- c(alpha=0.2, beta=0.4, omega=vari_ance/0.2)
optim_fit <- optim(par=par_init,
fn=likeli_hood, # Log-likelihood function
method="L-BFGS-B", # Quasi-Newton method
re_turns=re_turns,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100)) # Lower constraint
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(optim_fit$par["alpha"], optim_fit$par["beta"], optim_fit$par["omega"]))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
op_tim$optim$bestmem
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3]))
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
re_turns <- rutils::diff_it(log(quantmod::Cl(rutils::etf_env$VTI)))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim
op_tim$optim
re_turns <- garch_data[, 1, drop=FALSE]
vari_ance <- var(re_turns)
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3]))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
cbind(actual=c(alpha=al_pha, beta=be_ta, omega=om_ega),
optimal=c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3]))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
re_turns <- rutils::diff_it(log(quantmod::Cl(rutils::etf_env$VTI)))
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.35, 0.55, vari_ance), # Upper constraint
lower=c(0.15, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.45, 0.65, vari_ance), # Upper constraint
lower=c(0.25, 0.35, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.4, 0.7, vari_ance), # Upper constraint
lower=c(0.1, 0.4, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
op_tim <- DEoptim::DEoptim(fn=likeli_hood,
upper=c(0.4, 0.9, vari_ance), # Upper constraint
lower=c(0.1, 0.5, vari_ance/100), # Lower constraint
re_turns=re_turns,
control=list(trace=FALSE, itermax=1000, parallelType=1))
# Optimal and actual parameters
c(op_tim$optim$bestmem[1], op_tim$optim$bestmem[2], op_tim$optim$bestmem[3])
var(re_turns)
om_ega/(1-al_pha-be_ta)
op_tim$optim$bestmem[3]/(1-op_tim$optim$bestmem[1]-op_tim$optim$bestmem[2])
op_tim$optim$bestmem[3]/(1-op_tim$optim$bestmem[1]-op_tim$optim$bestmem[2])
drop(var(re_turns))
op_tim$optim$bestmem[1]
par_am <- unname(op_tim$optim$bestmem)
par_am
c(par_am[1], par_am[2], par_am[3])
c(al_pha=par_am[1], be_ta=par_am[2], om_ega=par_am[3])
par_am[3]/(1-par_am[1]-par_am[2])
drop(var(re_turns))
om_ega/(1-al_pha-be_ta)
par_am[3]/(1-par_am[1]-par_am[2])
al_pha <- par_am[1]; be_ta <- par_am[2]; om_ega <- par_am[3]
om_ega/(1-al_pha-be_ta)
par_am[3]/(1-par_am[1]-par_am[2])
garch_data <- HighFreq::sim_garch(omega=om_ega, alpha=al_pha,  beta=be_ta,
innov=re_turns, is_random=FALSE)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
for (i in 2:n_rows) {
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
all.equal(garch_data[, 2], vari_ance, check.attributes=FALSE)
n_rows <- NROW(re_turns)
vari_ance <- numeric(n_rows)
vari_ance[1] <- om_ega/(1-al_pha-be_ta)
for (i in 2:n_rows) {
vari_ance[i] <- om_ega + al_pha*re_turns[i]^2 +
be_ta*vari_ance[i-1]
}  # end for
all.equal(garch_data[, 2], vari_ance, check.attributes=FALSE)
dygraphs::dygraph(xts::xts(sqrt(vari_ance), index(re_turns)),
main="Estimated GARCH Volatility of VTI")
dygraphs::dygraph(xts::xts(sqrt(vari_ance), index(re_turns)),
col="blue", main="Estimated GARCH Volatility of VTI")
args(dygraphs::dygraph)
dygraphs::dygraph(xts::xts(sqrt(vari_ance), index(re_turns)),
main="Estimated GARCH Volatility of VTI") %>%
dyOptions(colors="blue")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
c(al_pha, be_ta, om_ega)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
setwd("../lecture_slides")
library(HighFreq)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
knitr::purl("/Users/jerzy/Develop/lecture_slides/FRE6871_Lecture_3.Rnw", documentation=0, quiet=TRUE)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/FRE6871_Lecture_3.Rnw", bib_engine="biber")
rm(list = ls())
re_turns <- na.omit(rutils::etf_env$re_turns$VTI["2008/2009"])
n_rows <- NROW(re_turns)
portf_value <- numeric(n_rows)
n_rows
bfloor <- 60
portf_value[1] <- 100
re_turns <- na.omit(rutils::etf_env$re_turns$VTI["2008/2009"])
date_s <- index(re_turns)
n_rows <- NROW(re_turns)
re_turns <- drop(zoo::coredata(re_turns))
portf_value <- numeric(n_rows)
portf_value[1] <- 100
bfloor <- 60
co_eff <- 2
stock_value <- numeric(n_rows)
stock_value[1] <- co_eff*(portf_value[1] - bfloor)
for (t in 2:n_rows) {
portf_value[t] <- portf_value[t-1] + stock_value[t-1]*(1+re_turns)
stock_value[t] <- co_eff*(portf_value[t] - bfloor)
}  # end for
re_turns <- na.omit(rutils::etf_env$re_turns$VTI["2008/2009"])
date_s <- index(re_turns)
n_rows <- NROW(re_turns)
re_turns <- drop(zoo::coredata(re_turns))
portf_value <- numeric(n_rows)
portf_value[1] <- 100
bfloor <- 60
co_eff <- 2
stock_value <- numeric(n_rows)
stock_value[1] <- co_eff*(portf_value[1] - bfloor)
for (t in 2:n_rows) {
portf_value[t] <- portf_value[t-1] + stock_value[t-1]*(1+re_turns[t])
stock_value[t] <- co_eff*(portf_value[t] - bfloor)
}  # end for
re_turns <- na.omit(rutils::etf_env$re_turns$VTI["2008/2009"])
date_s <- index(re_turns)
n_rows <- NROW(re_turns)
re_turns <- drop(zoo::coredata(re_turns))
portf_value <- numeric(n_rows)
portf_value[1] <- 100
bfloor <- 60
co_eff <- 2
stock_value <- numeric(n_rows)
stock_value[1] <- co_eff*(portf_value[1] - bfloor)
bond_value <- numeric(n_rows)
bond_value[1] <- (portf_value[1] - stock_value[1])
for (t in 2:n_rows) {
portf_value[t] <- portf_value[t-1] + stock_value[t-1]*(1+re_turns[t])
stock_value[t] <- co_eff*(portf_value[t] - bfloor)
bond_value[t] <- (portf_value[t] - stock_value[t])
}  # end for
plot(bond_value, t="l")
plot(portf_value, t="l")
tail(portf_value, 33)
head(portf_value, 33)
portf_value <- numeric(n_rows)
portf_value[1] <- 100
bfloor <- 60
co_eff <- 2
stock_value <- numeric(n_rows)
stock_value[1] <- co_eff*(portf_value[1] - bfloor)
bond_value <- numeric(n_rows)
bond_value[1] <- (portf_value[1] - stock_value[1])
for (t in 2:n_rows) {
portf_value[t] <- portf_value[t-1] + stock_value[t-1]*re_turns[t]
stock_value[t] <- co_eff*(portf_value[t] - bfloor)
bond_value[t] <- (portf_value[t] - stock_value[t])
}  # end for
plot(portf_value, t="l")
plot(bond_value, t="l")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
bond_value[1]
da_ta <- xts::xts(cbind(stock_value, bond_value), date_s)
colnames(da_ta) <- c("stocks", "bonds")
col_names <- colnames(da_ta)
dygraphs::dygraph(da_ta, main="CPPI strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", strokeWidth=2, col="red") %>%
dySeries(name=col_names[2], axis="y2", strokeWidth=2, col="blue") %>%
dyLegend(show="always", width=500)
da_ta <- xts::xts(cbind(stock_value, bond_value, portf_value), date_s)
dygraphs::dygraph(weal_th, main="CPPI strategy") %>%
dyOptions(colors=c("red", "green","blue"), strokeWidth=2) %>%
dyLegend(show="always", width=200)
da_ta <- xts::xts(cbind(stock_value, bond_value, portf_value), date_s)
dygraphs::dygraph(da_ta, main="CPPI strategy") %>%
dyOptions(colors=c("red", "green","blue"), strokeWidth=2) %>%
dyLegend(show="always", width=200)
foo <- 100*cumprod(1+re_turns)
foo <- 100*cumprod(1+re_turns)
da_ta <- xts::xts(cbind(stock_value, bond_value, portf_value, foo), date_s)
dygraphs::dygraph(da_ta, main="CPPI strategy") %>%
dyOptions(colors=c("red", "green","blue","orange"), strokeWidth=2) %>%
dyLegend(show="always", width=200)
vt_i <- 100*cumprod(1+re_turns)
da_ta <- xts::xts(cbind(stock_value, bond_value, portf_value, vt_i), date_s)
colnames(da_ta) <- c("stocks", "bonds", "CPPI", "VTI")
dygraphs::dygraph(da_ta, main="CPPI strategy") %>%
dyOptions(colors=c("red", "green","blue","orange"), strokeWidth=2) %>%
dyLegend(show="always", width=200)
dygraphs::dygraph(da_ta, main="CPPI strategy") %>%
dyOptions(colors=c("red", "green","blue","orange"), strokeWidth=2) %>%
dyLegend(show="always", width=500)
dygraphs::dygraph(da_ta, main="CPPI strategy") %>%
dyOptions(colors=c("red", "green","blue","orange"), strokeWidth=2) %>%
dyLegend(show="always", width=300)
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/investment_strategies.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/FRE7241_Lecture_3.Rnw", bib_engine="biber")
knitr::purl("/Users/jerzy/Develop/lecture_slides/FRE7241_Lecture_3.Rnw", documentation=0, quiet=TRUE)
rm(list = ls())
clos_e <- log(na.omit(rutils::etf_env$price_s$VTI))
look_back <- 11
medi_an <- roll::roll_median(clos_e, width=look_back)
ma_d <- HighFreq::roll_var(clos_e, look_back=look_back, method="quantile")
z_scores <- (clos_e - medi_an)/ma_d
z_scores[1:look_back, ] <- 0
# Calculate one-sided Hampel z-scores
medi_an <- roll::roll_median(clos_e, width=look_back)
# medi_an <- TTR::runMedian(clos_e, n=look_back)
ma_d <- HighFreq::roll_var(clos_e, look_back=look_back, method="quantile")
# ma_d <- TTR::runMAD(clos_e, n=look_back)
z_scores <- (clos_e - medi_an)/ma_d
z_scores[1:look_back, ] <- 0
# Range of z_scores
range(z_scores)
thresh_old <- sum(abs(range(z_scores)))/4
thresh_old
ls()
class(clos_e)
re_turns <- rutils::diff_it(log(clos_e))
position_s <- rep(NA_integer_, NROW(clos_e))
position_s[1] <- 0
position_s[z_scores < -thresh_old] <- 1
position_s[z_scores > thresh_old] <- (-1)
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- cumsum(re_turns*position_s)
price_s <- cbind(clos_e, pnl_s)
colnames(price_s) <- c("VTI", "Strategy")
col_names <- colnames(price_s)
dygraphs::dygraph(price_s, main="VTI Hampel Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=2, col="blue") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=2, col="red")
thresh_old <- sum(abs(range(z_scores)))/6
position_s <- rep(NA_integer_, NROW(clos_e))
position_s[1] <- 0
position_s[z_scores < -thresh_old] <- 1
position_s[z_scores > thresh_old] <- (-1)
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- cumsum(re_turns*position_s)
price_s <- cbind(clos_e, pnl_s)
colnames(price_s) <- c("VTI", "Strategy")
col_names <- colnames(price_s)
dygraphs::dygraph(price_s, main="VTI Hampel Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=2, col="blue") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=2, col="red")
thresh_old <- sum(abs(range(z_scores)))/8
position_s <- rep(NA_integer_, NROW(clos_e))
position_s[1] <- 0
position_s[z_scores < -thresh_old] <- 1
position_s[z_scores > thresh_old] <- (-1)
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- cumsum(re_turns*position_s)
price_s <- cbind(clos_e, pnl_s)
colnames(price_s) <- c("VTI", "Strategy")
col_names <- colnames(price_s)
dygraphs::dygraph(price_s, main="VTI Hampel Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=2, col="blue") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=2, col="red")
thresh_old
thresh_old <- sum(abs(range(z_scores)))/10
position_s <- rep(NA_integer_, NROW(clos_e))
position_s[1] <- 0
position_s[z_scores < -thresh_old] <- 1
position_s[z_scores > thresh_old] <- (-1)
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- cumsum(re_turns*position_s)
price_s <- cbind(clos_e, pnl_s)
colnames(price_s) <- c("VTI", "Strategy")
col_names <- colnames(price_s)
dygraphs::dygraph(price_s, main="VTI Hampel Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=2, col="blue") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=2, col="red")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/risk_models.Rnw", bib_engine="biber")
re_turns <- rutils::diff_it(clos_e)
position_s <- rep(NA_integer_, NROW(clos_e))
position_s[1] <- 0
position_s[z_scores < -thresh_old] <- 1
position_s[z_scores > thresh_old] <- (-1)
position_s <- zoo::na.locf(position_s)
position_s <- rutils::lag_it(position_s)
pnl_s <- cumsum(re_turns*position_s)
price_s <- cbind(clos_e, pnl_s)
colnames(price_s) <- c("VTI", "Strategy")
col_names <- colnames(price_s)
dygraphs::dygraph(price_s, main="VTI Hampel Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", label=col_names[1], strokeWidth=2, col="blue") %>%
dySeries(name=col_names[2], axis="y2", label=col_names[2], strokeWidth=2, col="red")
knitr::knit2pdf("/Users/jerzy/Develop/lecture_slides/FRE7241_Lecture_3.Rnw", bib_engine="biber")
knitr::purl("/Users/jerzy/Develop/lecture_slides/FRE7241_Lecture_3.Rnw", documentation=0, quiet=TRUE)
options(rgl.useNULL=TRUE)
library(rgl)
