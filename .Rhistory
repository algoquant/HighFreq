foo <- HighFreq::calc_var(re_turns, method="mad")
foo
HighFreq::calc_var(re_turns, method="dad")
library(HighFreq)
library(HighFreq)
HighFreq::calc_var(re_turns, method="dad")
HighFreq::calc_var(re_turns, method="mad")
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[ ,"VTI", drop=FALSE])
calc_skew(re_turns)
HighFreq::calc_skew(re_turns)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
calc_skew(re_turns)
ls()
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
calc_skew(re_turns)
foo <- roll_skew(re_turns)
tail(foo)
head(foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
foo <- roll_skew(re_turns)
head(foo)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_varn.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_varn.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_varn.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_varn.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_varn.cpp")
library(HighFreq)
library(HighFreq)
library(HighFreq)
devtools::document()
getwd()
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
devtools::document()
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, "VTI"])
tail(re_turns)
re_turns <- na.omit(rutils::etf_env$re_turns[, c("VTI", "XLF")])
HighFreq::calc_skew(re_turns)
calc_skew(re_turns)
foo <- roll_skew(re_turns)
head(foo)
tail(foo)
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_skew.cpp")
foo <- roll_skew(re_turns)
tail(foo)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_p <- rutils::calc_endpoints(re_turns, inter_val="months")
end_p <- end_p[end_p>50]
len_gth <- NROW(end_p)
look_back <- 12
start_p <- c(rep_len(1, look_back-1), end_p[1:(len_gth-look_back+1)])
al_pha <- 0.5
max_eigen <- 3
pnl_s <- HighFreq::back_test(ex_cess, re_turns,
start_p-1, end_p-1,
max_eigen = max_eigen,
al_pha = al_pha)
pnl_s <- xts::xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_p <- rutils::calc_endpoints(re_turns, inter_val="months")
end_p <- end_p[end_p>50]
len_gth <- NROW(end_p)
look_back <- 12
start_p <- c(rep_len(1, look_back-1), end_p[1:(len_gth-look_back+1)])
al_pha <- 0.5
max_eigen <- 3
pnl_s <- HighFreq::back_test(ex_cess, re_turns,
start_p-1, end_p-1,
max_eigen = max_eigen,
al_pha = al_pha)
pnl_s <- xts::xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
install.packages("roxygen2")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
devtools::install_github("r-lib/roxygen2")
devtools::install_github("r-lib/roxygen2")
devtools::install_github("r-lib/roxygen2")
install.packages("rlang")
devtools::install_github("r-lib/roxygen2")
devtools::install_github("r-lib/roxygen2")
install.packages("pkgload")
devtools::install_github("r-lib/roxygen2")
devtools::install_github("r-lib/roxygen2")
install.packages("digest")
devtools::install_github("r-lib/roxygen2")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
?HighFreq::roll_var
devtools::document()
devtools::load_all(".")
roxygenize()
library(HighFreq)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, "VTI"])
HighFreq::calc_skew(re_turns)
calc_skewr <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end calc_skewr
all.equal(HighFreq::calc_skew(re_turns),
calc_skewr(re_turns), check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns),
Rcode=calc_skewr(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
HighFreq::calc_skew(re_turns, method = "quantile", al_pha = 0.1)
?HighFreq::calc_skew
library(HighFreq)
end_p <- HighFreq::calc_endpoints(n_rows, 25)
n_rows <- NROW(re_turns)
end_p <- HighFreq::calc_endpoints(n_rows, 25)
end_p
look_back <- 3
HighFreq::calc_startpoints(end_p, look_back)
end_p <- HighFreq::calc_endpoints(n_rows, 25)
ste_p <- 25
end_p <- HighFreq::calc_endpoints(n_rows, ste_p)
look_back <- 3
start_p <- HighFreq::calc_startpoints(end_p, look_back)
head(end_p)
head(start_p)
HighFreq::calc_endpoints(23, 5)
2^12
end_p <- HighFreq::calc_endpoints(n_rows, ste_p) + 1
look_back <- 3
start_p <- HighFreq::calc_startpoints(end_p, look_back)
head(start_p)
foo <- sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
})
skew_ness <- HighFreq::roll_skew(re_turns, ste_p=25, look_back=3)
tail(foo)
tail(drop(skew_ness))
head(drop(skew_ness))
head(foo)
skew_r <- sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
})  # end sapply
all.equal(skew_ness, skew_r)
all.equal(skew_ness, skew_r, check.attributes=FALSE)
all.equal(drop(skew_ness), skew_r, check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_skew(re_turns, ste_p=25, look_back=3),
Rcode=sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
}),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
install.packages("Rcpp")
install.packages("Rcpp")
library(HighFreq)
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
end_p <- 1 + HighFreq::calc_endpoints(NROW(re_turns), ste_p)
start_p <- HighFreq::calc_startpoints(end_p, 3)
skew_ness <- HighFreq::roll_skew(re_turns, ste_p=25, look_back=3)
skew_r <- sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
})  # end sapply
all.equal(drop(skew_ness), skew_r, check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_skew(re_turns, ste_p=25, look_back=3),
Rcode=sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
)
end_p <- 1 + HighFreq::calc_endpoints(NROW(re_turns), ste_p = 25)
start_p <- HighFreq::calc_startpoints(end_p, 3)
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
end_p <- 1 + HighFreq::calc_endpoints(NROW(re_turns), ste_p=25)
start_p <- HighFreq::calc_startpoints(end_p, look_back=3)
skew_ness <- HighFreq::roll_skew(re_turns, ste_p=25, look_back=3)
skew_r <- sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
})  # end sapply
all.equal(drop(skew_ness), skew_r, check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::roll_skew(re_turns, ste_p=25, look_back=3),
Rcode=sapply(1:NROW(end_p), function(it) {
HighFreq::calc_skew(re_turns[start_p[it]:end_p[it], ])
}),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
350*0.035
350*1.035
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
HighFreq::calc_skew(re_turns, method = "quantile", al_pha = 0.1)
calc_skewq <- function(x) {
quantile_s <- quantile(x, c(0.25, 0.5, 0.75), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(drop(HighFreq::calc_skew(re_turns, method = "quantile")),
calc_skewq(re_turns), check.attributes=FALSE)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(HighFreq)
library(HighFreq)
ls()
re_turns <- na.omit(rutils::etf_env$re_turns$VTI)
HighFreq::calc_kurtosis(re_turns)
HighFreq::calc_skew(re_turns)
HighFreq::calc_kurtosis(re_turns, method = "quant_kurt", al_pha = 0.1)
HighFreq::calc_kurtosis(re_turns, method = "quan", al_pha = 0.1)
library(HighFreq)
HighFreq::calc_kurtosis(re_turns)
kurtosis_r <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end kurtosis_r
all.equal(HighFreq::calc_kurtosis(re_turns),
kurtosis_r(re_turns), check.attributes=FALSE)
kurtosis_r(re_turns)
kurtosis_r <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
sum(x^4)/var(x)^2/nr
}  # end kurtosis_r
all.equal(HighFreq::calc_kurtosis(re_turns),
kurtosis_r(re_turns), check.attributes=FALSE)
library(HighFreq)
library(HighFreq)
calc_skewr <- function(x) {
x <- (x-mean(x))
sum(x^3)/var(x)^1.5/NROW(x)
}  # end calc_skewr
all.equal(HighFreq::calc_skew(re_turns),
calc_skewr(re_turns), check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns),
Rcode=calc_skewr(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
calc_skewq <- function(x) {
quantile_s <- quantile(x, c(0.1, 0.5, 0.9), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(drop(HighFreq::calc_skew(re_turns, method = "quantile")),
calc_skewq(re_turns), check.attributes=FALSE)
calc_skewq <- function(x, a = 0.75) {
quantile_s <- quantile(x, c(1-a, 0.5, a), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(drop(HighFreq::calc_skew(re_turns, method = "quantile", level = 0.9)),
calc_skewq(re_turns, a = 0.9), check.attributes=FALSE)
calc_kurtq <- function(x, a = 0.9) {
quantile_s <- quantile(x, c(1-a, 0.25, 0.75, a), type=5)
(quantile_s[4] - quantile_s[1])/(quantile_s[3] - quantile_s[2])
}  # end calc_kurtq
all.equal(drop(HighFreq::calc_kurtosis(re_turns, method = "quantile", level=0.9)),
calc_kurtq(re_turns, a=0.9), check.attributes=FALSE)
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
HighFreq::calc_kurtosis(re_turns)
HighFreq::calc_kurtosis(re_turns[1:4, ])
HighFreq::calc_kurtosis(re_turns[1:2, ])
HighFreq::calc_skew(re_turns[1:2, ])
library(HighFreq)
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
re_turns <- na.omit(rutils::etf_env$re_turns[, c("VTI", "XLF")])
# Compare HighFreq::calc_var() with standard var()
all.equal(drop(HighFreq::calc_var(re_turns)),
apply(re_turns, 2, var), check.attributes=FALSE)
all.equal(drop(HighFreq::calc_var(re_turns, method="quantile")),
sapply(re_turns, mad)/1.4826, check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::calc_var(re_turns, method="quantile"),
Rcode=sapply(re_turns, mad),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
ls()
head(re_turns)
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns$IEF
de_sign <- re_turns[, -1]
head(de_sign)
head(res_ponse)
calc_reg(res_ponse=res_ponse, de_sign=de_sign)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
calc_reg(res_ponse=res_ponse, de_sign=de_sign)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
calc_reg(res_ponse=res_ponse, de_sign=de_sign)
look_back <- 21
foo <- roll_reg(res_ponse=res_ponse, de_sign=de_sign, look_back=look_back)
head(foo)
tail(foo)
x11(width=6, height=5)
hist(foo[, 7])
plot(foo[, 7], t="l")
plot(tail(foo[, 7], 1e2), t="l")
library(HighFreq)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
library(HighFreq)
library(HighFreq)
ls()
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
alpha <- 0.5
rm(alpha)
al_pha <- 0.5
eigen_max <- 3
weight_s <- drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha))
weight_s
drop(HighFreq::calc_var(re_turns))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
drop(HighFreq::calc_var(re_turns, method="quantile"))
library(HighFreq)
ls()
drop(HighFreq::calc_var(re_turns, method="quantile"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
?HighFreq::calc_weights
drop(HighFreq::calc_kurtosis(re_turns, method="quantile"))
drop(HighFreq::calc_kurtosis(re_turns, method="moment"))
drop(HighFreq::calc_kurtosis(re_turns, method="quantile"))
drop(HighFreq::calc_skew(re_turns, method="quantile"))
drop(HighFreq::calc_kurtosis(re_turns, method="quantile", confi_level=0.9))
drop(HighFreq::calc_kurtosis(re_turns, method="moment"))
drop(HighFreq::calc_kurtosis(re_turns, method="quantile", confi_level=0.99))
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
al_pha <- 0.5
eigen_max <- 3
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="blah"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile"))
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="rankrob"))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_switch(re_turns, eigen_max=eigen_max, alpha=al_pha, method="rankrob"))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="rankrob"))
library(HighFreq)
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="rankrob"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe_median"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="min_var"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="min_varpca"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="rankrob"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="rank"))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="quantile", confi_level=0.99))
drop(HighFreq::calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="foo", confi_level=0.99))
risk_free <- 0.03/260
ex_cess <- re_turns - risk_free
end_p <- rutils::calc_endpoints(re_turns, inter_val="months")
end_p <- end_p[end_p>50]
len_gth <- NROW(end_p)
look_back <- 12
start_p <- c(rep_len(1, look_back-1), end_p[1:(len_gth-look_back+1)])
al_pha <- 0.5
eigen_max <- 3
pnl_s <- HighFreq::back_test(ex_cess, re_turns,
start_p-1, end_p-1,
eigen_max = eigen_max,
alpha = al_pha)
pnl_s <- xts::xts(pnl_s, index(re_turns))
colnames(pnl_s) <- "strat_rets"
# Plot dygraph of strategy
dygraphs::dygraph(cumsum(pnl_s),
main="Cumulative Returns of Max Sharpe Portfolio Strategy")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
rm(list = ls())
len_gth <- 100; n_var <- 5
len_gth <- 100; n_var <- 5
de_sign <- matrix(rnorm(n_var*len_gth), nc=n_var)
weight_s <- rnorm(n_var)
res_ponse <- -3 + de_sign %*% weight_s + rnorm(len_gth, sd=0.5)
reg_model <- lm(res_ponse ~ de_sign)
sum_mary <- summary(reg_model)
reg_arma <- calc_lm(res_ponse=res_ponse, de_sign=de_sign)
all.equal(reg_arma$coefficients[, "coeff"], unname(coef(reg_model)))
all.equal(unname(reg_arma$coefficients), unname(sum_mary$coefficients))
all.equal(drop(reg_arma$residuals), unname(reg_model$residuals))
all.equal(unname(reg_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
all.equal(drop(reg_arma$residuals), unname(reg_model$residuals), check.attributes=FALSE)
tail(reg_model$residuals)
tail(drop(reg_arma$residuals))
all.equal(unname(reg_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
rm(list = ls())
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
reg_model <- lm(res_ponse ~ de_sign)
sum_mary <- summary(reg_model)
reg_arma <- calc_lm(res_ponse=res_ponse, de_sign=de_sign)
reg_arma$coefficients
all.equal(reg_arma$coefficients[, "coeff"], unname(coef(reg_model)))
all.equal(unname(reg_arma$coefficients), unname(sum_mary$coefficients))
all.equal(unname(reg_arma$stats), c(sum_mary$r.squared, unname(sum_mary$fstatistic[1])))
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_switch.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, 1:16])
eigen_max <- 3
al_pha <- 0.5
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha))
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe"))
drop(calc_weights(re_turns, eigen_max=eigen_max, alpha=al_pha, method="max_sharpe_median"))
rm(list = ls())
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
re_turns <- na.omit(rutils::etf_env$re_turns[, c("IEF", "VTI", "XLF")])
res_ponse <- re_turns[, 1]
de_sign <- re_turns[, -1]
reg_model <- lm(res_ponse ~ de_sign)
reg_arma <- calc_reg(response=res_ponse, design=de_sign)
reg_arma
coef(reg_model)
sum_mary <- summary(reg_model)
sum_mary$coefficients
reg_arma <- drop(calc_reg(response=res_ponse, design=de_sign))
all.equal(reg_arma$coefficients[, 1:2*(1+NROW(de_sign))],
unname(sum_mary$coefficients[, c("Estimate", "t value")]), check.attributes=FALSE)
sum_mary$coefficients
sum_mary$coefficients[, c("Estimate", "t value")]
all.equal(reg_arma$coefficients[, 1:2*(1+NROW(de_sign))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
all.equal(reg_arma[, 1:2*(1+NROW(de_sign))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
reg_arma[, 1:2*(1+NROW(de_sign))]
1:2*(1+NROW(de_sign))
all.equal(reg_arma[, 1:2*(1+NCOL(de_sign))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
1:2*(1+NCOL(de_sign))
2*(1+NCOL(de_sign))
1:(2*(1+NCOL(de_sign)))
all.equal(reg_arma[, 1:(2*(1+NCOL(de_sign)))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
reg_arma[, 1:(2*(1+NCOL(de_sign)))]
all.equal(reg_arma[1:(2*(1+NCOL(de_sign)))],
sum_mary$coefficients[, c("Estimate", "t value")], check.attributes=FALSE)
reg_arma[1:(2*(1+NCOL(de_sign)))]
sum_mary$coefficients[, c("Estimate", "t value")]
co_eff <- sum_mary$coefficients
co_eff
c(co_eff[, "Estimate"], co_eff[, "t value"])
all.equal(reg_arma[1:(2*(1+NCOL(de_sign)))],
c(co_eff[, "Estimate"], co_eff[, "t value"]), check.attributes=FALSE)
look_back
look_back <- 11
library(microbenchmark)
summary(microbenchmark(
Rcpp=calc_reg(response=res_ponse, design=de_sign),
Rcode=lm(res_ponse ~ de_sign),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
look_back <- 11
z_scores <- HighFreq::roll_zscores(response=res_ponse, design=de_sign, look_back=look_back)
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/roll_reg.cpp")
