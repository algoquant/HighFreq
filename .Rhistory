vr_s
sym_bols
re_turns[1, is.na(re_turns[1, ])] <- 0
re_turns <- zoo::na.locf(re_turns, na.rm=FALSE)
re_turns <- re_turns[, names(vr_s)[1:9]]
sym_bols <- colnames(re_turns)
n_weights <- NROW(sym_bols)
lagg
op_tim <- optim(par=rep(1/n_weights, n_weights),
fn=object_ive,
re_turns=re_turns,
lagg=lagg,
method="L-BFGS-B",
upper=rep(10, n_weights),
lower=rep(-10, n_weights))
weight_s <- op_tim$par
names(weight_s) <- colnames(re_turns)
object_ive(weight_s, re_turns, lagg)
op_tim$value
pnl_s <- cumsum(re_turns %*% weight_s)
pnl_s <- xts::xts(pnl_s, zoo::index(re_turns))
dygraphs::dygraph(pnl_s)
# This is best version
# Calculate Hurst exponent using median of range ratios
calc_hurst_hilo <- function(hi_gh, lo_w, end_p) {
range_ratios <- sapply(seq_along(end_p)[-1], function(it) {
start_point <- end_p[it-1]
end_point <- end_p[it]
hi_gh <- hi_gh[start_point:end_point]
lo_w <- lo_w[start_point:end_point]
log((max(hi_gh) - min(lo_w))/mean(hi_gh - lo_w))/log(end_point-start_point)
})  # end sapply
median(na.omit(range_ratios))
}  # end calc_hurst_hilo
# This is best version
# Calculate Hurst exponent using median of range ratios
calc_hurst_hilo <- function(hi_gh, lo_w, end_p) {
range_ratios <- sapply(seq_along(end_p)[-1], function(it) {
start_point <- end_p[it-1]
end_point <- end_p[it]
hi_gh <- hi_gh[start_point:end_point]
lo_w <- lo_w[start_point:end_point]
log((max(hi_gh) - min(lo_w))/mean(hi_gh - lo_w))/log(end_point-start_point)
})  # end sapply
median(na.omit(range_ratios))
}  # end calc_hurst_hilo
# Calculate Hurst exponent from returns
calc_hurst_rets <- function(rets, end_p) {
cum_sum <- cumsum(rets)
range_ratios <- sapply(seq_along(end_p)[-1], function(it) {
start_point <- end_p[it-1]
end_point <- end_p[it]
rets <- rets[start_point:end_point]
cum_sum <- cum_sum[start_point:end_point]
log((max(cum_sum) - min(cum_sum))/sd(rets))/log(end_point-start_point)
})  # end sapply
median(na.omit(range_ratios))
}  # end calc_hurst_rets
lagg
re_turns <- rutils::etf_env$re_turns
sym_bols <- colnames(re_turns)
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY", "MTUM", "IEF"))]
re_turns <- re_turns[, sym_bols]
vr_s <- sapply(re_turns, function(re_turn) {
re_turn <- na.omit(re_turn)
if (NROW(re_turn) > 100)
calc_var(re_turn, lagg)/calc_var(re_turn)/lagg
else NULL
})  # end sapply
vr_s <- sort(unlist(vr_s), decreasing=TRUE)
sym_bols
# Find ETFs with largest Hurst
hurst_s <- sapply(sym_bols, function(sym_bol) {
oh_lc <- get(sym_bol, rutils::etf_env)
end_p <- rutils::calc_endpoints(oh_lc, 21)
hi_gh <- Hi(oh_lc)
lo_w <- Lo(oh_lc)
calc_hurst_hilo(hi_gh, lo_w, end_p)
})  # end eapply
hurst_s
vr_s
vr_s <- vr_s[sym_bols]
vr_s
hurst_s
x11()
plot(hurst_s, vr_s)
text(x=hurst_s, y=vr_s, labels=names(vr_s))
n_weights
dim(re_turns)
NROW(sym_bols)
n_weights <- NROW(sym_bols)
# Vector of initial portfolio weights
weight_s <- rep(1/n_weights, n_weights)
# object_ive with shrinkage
object_ive <- function(weight_s, re_turns, end_p) {
-calc_hurst_rets(re_turns %*% weight_s, end_p)
}  # end object_ive
str(prcomp)
args(prcomp)
# Portfolio optimization using principal components
# Perform PCA
pc_a <- prcomp(re_turns, center=TRUE, scale=TRUE)
sum(is.na(re_turns))
re_turns[1, is.na(re_turns[1, ])] <- 0
re_turns <- zoo::na.locf(re_turns, na.rm=FALSE)
pc_a <- prcomp(re_turns, center=TRUE, scale=TRUE)
# ei_gen <- eigen(cor(re_turns))
# all.equal(abs(pc_a$rotation), abs(ei_gen$vectors), check.attributes=FALSE)
# Calculate principal component time series
rets_pca <- scale(re_turns) %*% pc_a$rotation
all.equal(pc_a$x, rets_pca, check.attributes=FALSE)
ls()
lagg
oh_lc <- rutils::etf_env$VTI
end_p <- rutils::calc_endpoints(oh_lc, lagg)
hi_gh <- Hi(oh_lc)
lo_w <- Lo(oh_lc)
calc_hurst_hilo(hi_gh, lo_w, end_p)
foo <- hurst_s
hurst_s <- sapply(sym_bols, function(sym_bol) {
oh_lc <- get(sym_bol, rutils::etf_env)
end_p <- rutils::calc_endpoints(oh_lc, lagg)
hi_gh <- Hi(oh_lc)
lo_w <- Lo(oh_lc)
calc_hurst_hilo(hi_gh, lo_w, end_p)
})  # end eapply
cbind(hurst_s, foo)
lagg <- 25
re_turns <- rutils::etf_env$re_turns
sym_bols <- colnames(re_turns)
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY", "MTUM", "IEF"))]
re_turns <- re_turns[, sym_bols]
vr_s <- sapply(re_turns, function(re_turn) {
re_turn <- na.omit(re_turn)
if (NROW(re_turn) > 100)
calc_var(re_turn, lagg)/calc_var(re_turn)/lagg
else NULL
})  # end sapply
vr_s <- sort(unlist(vr_s), decreasing=TRUE)
vr_s
names(vr_s)
sym_bols <- names(vr_s)
lagg <- 25
oh_lc <- rutils::etf_env$VTI
end_p <- rutils::calc_endpoints(oh_lc, lagg)
hi_gh <- Hi(oh_lc)
lo_w <- Lo(oh_lc)
calc_hurst_hilo(hi_gh, lo_w, end_p)
hurst_s <- sapply(sym_bols, function(sym_bol) {
oh_lc <- get(sym_bol, rutils::etf_env)
end_p <- rutils::calc_endpoints(oh_lc, lagg)
hi_gh <- Hi(oh_lc)
lo_w <- Lo(oh_lc)
calc_hurst_hilo(hi_gh, lo_w, end_p)
})  # end eapply
hurst_s
vr_s
plot(hurst_s, vr_s)
text(x=hurst_s, y=vr_s, labels=names(vr_s))
# Vector of initial portfolio weights
weight_s <- rep(1/n_weights, n_weights)
# object_ive with shrinkage
object_ive <- function(weight_s, re_turns, end_p) {
-calc_hurst_rets(re_turns %*% weight_s, end_p)
}  # end object_ive
sum(is.na(re_turns))
re_turns[1, is.na(re_turns[1, ])] <- 0
re_turns <- zoo::na.locf(re_turns, na.rm=FALSE)
# Portfolio optimization using principal components
# Perform PCA
pc_a <- prcomp(re_turns, center=TRUE, scale=TRUE)
rets_pca <- pc_a$x
op_tim <- optim(par=rep(1/n_weights, n_weights),
fn=object_ive,
re_turns=rets_pca,
end_p=end_p,
method="L-BFGS-B",
upper=rep(10, n_weights),
lower=rep(-10, n_weights))
# Optimal parameters
weight_s <- op_tim$par
weight_s
# weight_s <- weight_s*sd(rowMeans(rets_pca))/sd(rets_pca %*% weight_s)
names(weight_s) <- colnames(rets_pca)
weight_s
object_ive(weight_s, rets_pca, end_p)
class(rets_pca)
apply(rets_pca, 2, calc_hurst_rets(re_turns), end_p)
apply(rets_pca, 2, calc_hurst_rets(re_turns), end_p=end_p)
apply(rets_pca, 2, calc_hurst_rets, end_p=end_p)
hurst_pca <- apply(rets_pca, 2, calc_hurst_rets, end_p=end_p)
sort(hurst_pca)
sort(hurst_pca, decreasing=TRUE)
object_ive(weight_s, rets_pca, end_p)
op_tim$value
# library(parallel)
# num_cores <- detectCores()
# clus_ter <- makeCluster(num_cores-1)
# clusterExport(clus_ter, varlist=c("calc_hurst_rets"))
op_tim <- DEoptim::DEoptim(object_ive,
re_turns=rets_pca,
end_p=end_p,
upper=rep(10, n_weights),
lower=rep(-10, n_weights),
# cluster=clus_ter,
# parVar=c("calc_hurst_rets"),
control=list(trace=FALSE, itermax=500, parVar=c("calc_hurst_rets"), parallelType=1))
foo <- weight_s
weight_s <- op_tim$optim$bestmem
names(weight_s) <- colnames(rets_pca)
weight_s
object_ive(weight_s, rets_pca, end_p)
portf_hurst <- drop(rets_pca %*% weight_s)
calc_hurst_rets(portf_hurst, end_p)
portf_hurst <- xts::xts(portf_hurst, index(re_turns))
colnames(portf_hurst) <- "max_hurst_deopt"
weal_th <- cumsum(portf_hurst)
da_ta <- cbind(Cl(rutils::etf_env$VTI)[index(re_turns)], weal_th)
colnames(da_ta)[1] <- "VTI"
col_names <- colnames(da_ta)
dygraphs::dygraph(da_ta, main="Max Hurst vs Max Hurst DEoptim") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue") %>%
dySeries(name=col_names[2], axis="y2", col="red")
cbind(weight_s, -foo)
lagg
da_ta <- cbind(Cl(rutils::etf_env$VEU)[index(re_turns)], weal_th)
colnames(da_ta)[1] <- "VEU"
col_names <- colnames(da_ta)
dygraphs::dygraph(da_ta, main="Max Hurst vs VEU") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue") %>%
dySeries(name=col_names[2], axis="y2", col="red")
returns_lag <- rutils::lag_it(re_turns)
auto_cor <- sapply(colnames(re_turns), function(sym_bol) {
re_turns <- re_turns[, sym_bol]
mean(re_turns*returns_lag[, sym_bol])/var(re_turns)
})  # end sapply
auto_cor <- sort(auto_cor)
auto_cor <- sort(auto_cor, decreasing=TRUE)
auto_cor
n_weights <- NCOL(re_turns)
weight_s <- rep(1/n_weights, n_weights)
object_ive <- function(weight_s, re_turns, returns_lag) {
re_turns <- re_turns %*% weight_s
-drop(mean(re_turns*(returns_lag %*% weight_s))/var(re_turns))
}  # end object_ive
object_ive(weight_s, re_turns, returns_lag)
op_tim <- optim(par=rep(1/n_weights, n_weights),
fn=object_ive,
re_turns=re_turns,
returns_lag=returns_lag,
method="L-BFGS-B",
upper=rep(10, n_weights),
lower=rep(-10, n_weights))
weight_s
weight_s <- op_tim$par
names(weight_s) <- colnames(re_turns)
sort(weight_s, decreasing=TRUE)
pnl_s <- xts::xts(cumsum(re_turns %*% weight_s), zoo::index(re_turns))
dygraphs::dygraph(pnl_s)
object_ive(weight_s, re_turns, returns_lag)
op_tim$value
weight_s <- sort(weight_s, decreasing=TRUE)
weight_s
# DEoptim
op_tim <- DEoptim::DEoptim(object_ive,
re_turns=re_turns,
returns_lag=returns_lag,
upper=rep(10, n_weights),
lower=rep(-10, n_weights),
# cluster=clus_ter,
# parVar=c("calc_hurst_rets"),
control=list(trace=FALSE, itermax=500, parallelType=1))
# Extract optimal parameters into weight_s vector
weight_s <- op_tim$optim$bestmem
# weight_s <- weight_s*sd(rowMeans(rets_pca))/sd(rets_pca %*% weight_s)
names(weight_s) <- colnames(rets_pca)
sort(weight_s, decreasing=TRUE)
# weight_s <- weight_s*sd(rowMeans(rets_pca))/sd(rets_pca %*% weight_s)
names(weight_s) <- colnames(re_turns)
sort(weight_s, decreasing=TRUE)
object_ive(weight_s, rets_pca, end_p)
object_ive(weight_s, re_turns, returns_lag)
pnl_s <- xts::xts(cumsum(re_turns %*% weight_s), zoo::index(re_turns))
dygraphs::dygraph(pnl_s)
pnl_s <- -xts::xts(cumsum(re_turns %*% weight_s), zoo::index(re_turns))
dygraphs::dygraph(pnl_s)
chart_Series(cumsum(pca_rets[, "PC12"]))
chart_Series(cumsum(pca_rets[, "PC2"]))
chart_Series(cumsum(pca_rets[, "PC12"]))
chart_Series(cumsum(pca_rets[, "PC2"]))
chart_Series(cumsum(pca_rets[, "PC18"]))
foo <- pca_rets[, "PC18"]
class(foo)
chart_Series(cumsum(foo*rutils::lag_it(foo)))
chart_Series(-cumsum(foo*rutils::lag_it(foo)))
chart_Series(-cumsum(foo*rutils::lag_it(foo, lagg=2)))
chart_Series(-cumsum(foo*rutils::lag_it(foo, lagg=3)))
chart_Series(-cumsum(foo*rutils::lag_it(foo, lagg=4)))
chart_Series(-cumsum(foo*rutils::lag_it(foo, lagg=5)))
chart_Series(-cumsum(foo*rutils::lag_it(foo, lagg=6)))
chart_Series(-cumsum(foo*rutils::lag_it(foo, lagg=7)))
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3))))
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
chart_Series(-cumsum((foo++rutils::lag_it(foo, lagg=(-1)))*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
chart_Series(-cumsum((foo+rutils::lag_it(foo, lagg=(-1)))*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
chart_Series(-cumsum((foo+rutils::lag_it(foo, lagg=(-1))+rutils::lag_it(foo, lagg=(-2)))*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
foo <- pca_rets[, "PC16"]
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
foo <- pca_rets[, "PC17"]
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1)+rutils::lag_it(foo, lagg=2)+rutils::lag_it(foo, lagg=3)+rutils::lag_it(foo, lagg=4))))
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1))))
foo <- pca_rets[, "PC16"]
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1))))
foo <- pca_rets[, "PC15"]
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1))))
foo <- pca_rets[, "PC9"]
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1))))
foo <- pca_rets[, "PC12"]
chart_Series(-cumsum(foo*(rutils::lag_it(foo, lagg=1))))
runApp('C:/Develop/presentations/app_calc_weights.R')
runApp('C:/Develop/presentations/app_calc_weights.R')
# Rcpp::sourceCpp(file="C:/Develop/lecture_slides/assignments/rcpp_strat.cpp")
# Model and data setup
# source the model function
# source("C:/Develop/lecture_slides/scripts/roll_portf_new.R")
# max_eigen <- 2
load("C:/Develop/lecture_slides/data/sp500_prices.RData")
# re_turns <- returns_100
re_turns <- na.omit(re_turns)
n_weights <- NCOL(re_turns)
n_weights
max_eigen <- 5
weight_s = HighFreq::calc_weights(re_turns, max_eigen=max_eigen);
str(HighFreq::calc_weights)
dim(re_turns)
re_turns
load("C:/Develop/lecture_slides/data/sp500_prices.RData")
ls()
tail(re_turns, 2)
# re_turns <- returns_100
re_turns <- re_turns[, !is.na(re_turns[NROW(re_turns), ])]
re_turns <- na.omit(re_turns)
dim(re_turns)
tail(re_turns, 2)
dim(re_turns)
load("C:/Develop/lecture_slides/data/sp500_prices.RData")
# re_turns <- returns_100
re_turns <- re_turns[, !is.na(re_turns[NROW(re_turns), ])]
re_turns <- re_turns[, !is.na(re_turns[NROW(re_turns)-100, ])]
dim(re_turns)
re_turns <- na.omit(re_turns)
dim(re_turns)
load("C:/Develop/lecture_slides/data/sp500_prices.RData")
# re_turns <- returns_100
re_turns <- re_turns[, !is.na(re_turns[NROW(re_turns), ])]
re_turns <- re_turns[, !is.na(re_turns[NROW(re_turns)-1000, ])]
re_turns <- na.omit(re_turns)
n_weights <- NCOL(re_turns)
n_weights
dim(re_turns)
runApp('C:/Develop/presentations/app_calc_weights.R')
runApp('C:/Develop/presentations/app_roll_portf3.R')
runApp('C:/Develop/presentations/app_portf_optim.R')
runApp('C:/Develop/presentations/app_portf_optim.R')
runApp('C:/Develop/presentations/app_portf_optim.R')
runApp('C:/Develop/presentations/app_roll_trend.R')
runApp('C:/Develop/presentations/app_portf_optim.R')
runApp('C:/Develop/presentations/app_portf_optim.R')
runApp('C:/Develop/presentations/app_portf_optim.R')
dim(re_turns)
re_turns <- rutils::etf_env$re_turns
sym_bols <- colnames(re_turns)
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY", "MTUM", "IEF"))]
re_turns <- re_turns[, sym_bols]
n_weights <- NROW(sym_bols)
re_turns <- rutils::etf_env$re_turns[, sym_bols]
lagg <- 10
vr_s <- sapply(re_turns, function(re_turn) {
re_turn <- na.omit(re_turn)
if (NROW(re_turn) > 100)
calc_var(re_turn, lagg)/calc_var(re_turn)/lagg
else NULL
})  # end sapply
vr_s <- sort(unlist(vr_s), decreasing=TRUE)
sym_bols <- names(vr_s)
n_cols <- 4
name_s <- names(vr_s)[1:n_cols]
re_turns <- re_turns[, name_s]
re_turns <- na.omit(re_turns)
dim(re_turns)
sapply(re_turns, var)
sapply(re_turns, sd)
runApp('C:/Develop/presentations/app_portf_optim.R')
?cor
tre_nd <- mean(pnl_s*rutils::lag_it(pnl_s))/sd(pnl_s)
tre_nd
sd(pnl_s)
mean(pnl_s*rutils::lag_it(pnl_s))/var(pnl_s)
var(pnl_s)
dim(pnl_s)
drop(var(pnl_s))
mean(pnl_s*rutils::lag_it(pnl_s))
mean(pnl_s)
pnl_s <- (pnl_s - mean(pnl_s))
tre_nd <- mean(pnl_s*rutils::lag_it(pnl_s))/drop(var(pnl_s))
tre_nd
drop(var(pnl_s))
mean(pnl_s*rutils::lag_it(pnl_s))
runApp('C:/Develop/presentations/app_portf_optim.R')
weight_s
colnames(re_turns)
name_s
weight_s <- c(1, 0, 0, 0)
pnl_s <- (re_turns %*% weight_s)
pnl_s <- (pnl_s - mean(pnl_s))
tre_nd <- mean(pnl_s*rutils::lag_it(pnl_s))/drop(var(pnl_s))
tre_nd
runApp('C:/Develop/presentations/app_portf_optim.R')
rm(list = ls())
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
re_turns <- rutils::etf_env$re_turns
sym_bols <- colnames(re_turns)
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY", "MTUM", "IEF"))]
re_turns <- re_turns[, sym_bols]
runApp('C:/Develop/presentations/app_portf_optim.R')
re_turns <- rutils::etf_env$re_turns
sym_bols <- colnames(re_turns)
sym_bols <- sym_bols[!(sym_bols %in% c("VXX", "SVXY", "MTUM", "IEF"))]
re_turns <- re_turns[, sym_bols]
n_weights <- NROW(sym_bols)
re_turns <- rutils::etf_env$re_turns[, sym_bols]
vr_s <- sapply(re_turns, function(re_turn) {
re_turn <- na.omit(re_turn)
if (NROW(re_turn) > 100)
calc_var(re_turn, lagg)/calc_var(re_turn)/lagg
else NULL
})  # end sapply
vr_s <- sort(unlist(vr_s), decreasing=TRUE)
sym_bols <- names(vr_s)
lagg <- 5
vr_s <- sapply(re_turns, function(re_turn) {
re_turn <- na.omit(re_turn)
if (NROW(re_turn) > 100)
calc_var(re_turn, lagg)/calc_var(re_turn)/lagg
else NULL
})  # end sapply
vr_s <- sort(unlist(vr_s), decreasing=TRUE)
sym_bols <- names(vr_s)
sym_bols
vr_s
n_cols <- 4
name_s <- names(vr_s)[1:n_cols]
name_s
re_turns <- re_turns[, name_s]
re_turns <- na.omit(re_turns)
lagg
## optim
object_ive <- function(weight_s, re_turns, lagg) {
re_turns <- (re_turns %*% weight_s)
-calc_var(re_turns, lagg)/calc_var(re_turns)/lagg
}  # end object_ive
sym_bols
sym_bols <- colnames(re_turns)
n_weights <- NROW(sym_bols)
op_tim <- optim(par=rep(1/n_weights, n_weights),
fn=object_ive,
re_turns=re_turns,
lagg=lagg,
method="L-BFGS-B",
upper=rep(10, n_weights),
lower=rep(-10, n_weights))
weight_s <- op_tim$par
names(weight_s) <- colnames(re_turns)
weight_s
object_ive(weight_s, re_turns, lagg)
op_tim$value
pnl_s <- cumsum(re_turns %*% weight_s)
pnl_s <- xts::xts(pnl_s, zoo::index(re_turns))
dygraphs::dygraph(pnl_s)
sum(is.na(re_turns))
pc_a <- prcomp(re_turns, scale=TRUE)
pca_rets <- xts(pc_a$x/100, order.by=index(re_turns))
vr_s <- sapply(pca_rets, function(re_turn) {
re_turn <- na.omit(re_turn)
if (NROW(re_turn) > 100)
calc_var(re_turn, lagg)/calc_var(re_turn)/lagg
else NULL
})  # end sapply
vr_s <- sort(unlist(vr_s), decreasing=TRUE)
pca_rets <- pca_rets[, names(vr_s)]
vr_s
chart_Series(cumsum(pca_rets[, "PC2"]))
dygraphs::dygraph(cumsum(pca_rets[, "PC2"]))
dygraphs::dygraph(cumsum(pca_rets[, "PC1"]))
dygraphs::dygraph(cumsum(pca_rets[, "PC4"]))
dygraphs::dygraph(cumsum(pca_rets[, "PC4"]*rutils::lag_it(pca_rets[, "PC4"])))
dygraphs::dygraph(-cumsum(pca_rets[, "PC4"]*rutils::lag_it(pca_rets[, "PC4"])))
dygraphs::dygraph(-cumsum(pca_rets[, "PC1"]*rutils::lag_it(pca_rets[, "PC1"])))
dygraphs::dygraph(-cumsum(rowMeans(pca_rets*rutils::lag_it(pca_rets))))
dygraphs::dygraph(xts::xts(cumsum(rowMeans(pca_rets*rutils::lag_it(pca_rets))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets*rutils::lag_it(pca_rets))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets*rutils::lag_it(pca_rets, 2))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets*rutils::lag_it(pca_rets, 3))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets*rutils::lag_it(pca_rets))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets[, -1]*rutils::lag_it(pca_rets[, -1]))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets[, -(1:2)]*rutils::lag_it(pca_rets[, -(1:2)]))), order.by=index(re_turns)))
dygraphs::dygraph(-xts::xts(cumsum(rowMeans(pca_rets[, -1]*rutils::lag_it(pca_rets[, -1], 2))), order.by=index(re_turns)))
