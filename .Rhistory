plot(quantmod::Vo(oh_lc), main="MSFT Stock")
library(rWRDS)  # load package "rWRDS"
library(rwrds)  # load package "rwrds"
# get documentation for package "rwrds"
packageDescription("rwrds")  # get short description
help(package="rwrds")  # load help page
# Get documentation for package "rwrds"
packageDescription("rwrds")
data(package="rwrds")  # list all datasets in "rwrds"
# sym_bol <- "VTI"
# match(sym_bol, compustat_table$tic)
# Create ETF symbols (tickers)
sym_bols <- c("VTI", "VEU", "EEM")
# rm(compustat_table)
# Read names table from csv file
compustat_table <- read.csv(file="C:/Develop/data/WRDS/compustat_table.csv", stringsAsFactors=FALSE)
# sym_bol <- "VTI"
# match(sym_bol, compustat_table$tic)
# Create ETF symbols (tickers)
sym_bols <- c("VTI", "VEU", "EEM")
in_dex <- match(sym_bols, compustat_table$tic)
names(in_dex) <- sym_bols
etf_cusips <- compustat_table$cusip[in_dex]
names(etf_cusips) <- sym_bols
etf_cusips
in_dex
in_dex
dim(compustat_table)
head(compustat_table)
foo <- read.csv(file="C:/Develop/data/WRDS/CRSP_Compustat_merged.csv", stringsAsFactors=FALSE)
dim(foo)
head(foo)
unique(foo$gvkey)
bar <- unique(foo$gvkey)
NROW(bar)
format_ohlc <- function(oh_lc, environ_ment) {
sym_bol <- oh_lc[1, "tic"]
# Adjustment factor
adj_fact <- drop(oh_lc[, c("ajexdi")])
# Daily total return factor
tr_fact <- drop(oh_lc[, "trfd"])
# Fill NA values
tr_fact <- ifelse(is.na(tr_fact), 1, tr_fact)
# Extract dates index
in_dex <- drop(oh_lc[, "datadate"])
in_dex <- lubridate::ymd(in_dex)
# Select only OHLCV data
oh_lc <- oh_lc[, c("prcod", "prchd", "prcld", "prccd", "cshtrd")]
colnames(oh_lc) <- paste(sym_bol, c("Open", "High", "Low", "Close", "Volume"), sep=".")
# Coerce to xts series
oh_lc <- xts::xts(oh_lc, in_dex)
# Fill NA prices
is_na <- is.na(oh_lc[, 1])
oh_lc[is_na, 1] <- (oh_lc[is_na, 2] + oh_lc[is_na, 3])/2
# Adjust the prices
oh_lc[, 1:4] <- tr_fact*oh_lc[, 1:4]/adj_fact/tr_fact[NROW(tr_fact)]
# Copy the OHLCV data to environ_ment
assign(x=sym_bol, value=oh_lc, envir=environ_ment)
sym_bol
}  # end format_ohlc
# Load OHLC prices from .csv file downloaded from WRDS
etf_prices <- read.csv(file="C:/Develop/data/WRDS/etf_prices_crsp.csv", stringsAsFactors=FALSE)
# Create new data environment
etf_env <- new.env()
# Perform OHLC aggregations by ticker symbol column
process_ed <- lapply(split(etf_prices, etf_prices$tic), format_ohlc, environ_ment=etf_env)
x11()
plot(quantmod::Cl(etf_env$USO))
# Save OHLC prices to .RData file
save(etf_env, file="C:/Develop/lecture_slides/data/etf_data.RData")
ls()
ls(rutils::etf_env)
ls(etf_env)
names(etf_env)
sym_bols <- names(etf_env)
etf_env$sym_bols <- sym_bols
names(etf_env)
ls(etf_env)
price_s <- lapply(as.list(etf_env)[sym_bols], quantmod::Cl)
class(price_s)
price_s <- do.call(cbind, price_s)
class(price_s)
dim(price_s)
head(price_s)
etf_env$price_s <- price_s
re_turns <- lapply(etf_env$price_s, function(x_ts) {
daily_returns <- quantmod::dailyReturn(na.omit(x_ts))
colnames(daily_returns) <- names(x_ts)
daily_returns
})  # end lapply
re_turns <- do.call(cbind, re_turns)
class(re_turns)
dim(re_turns)
etf_env$re_turns <- re_turns
risk_return <- PerformanceAnalytics::table.Stats(etf_env$re_turns)
risk_return
etf_env$risk_return <- risk_return
ls(rutils::etf_env)
ls(etf_env)
sym_bols
foo <- c("VTI", "VEU", "EEM",
"XLY", "XLP", "XLE", "XLF", "XLV",
"XLI", "XLB", "XLK", "XLU", "VYM", "IVW",
"IWB", "IWD", "IWF", "IEF", "TLT", "VNQ",
"DBC", "GLD", "USO", "VXX", "SVXY", "MTUM")
all.equal(sort(sym_bols), sort(foo))
etf_list <- read.csv(file="C:/Develop/lecture_slides/data/etf_list.csv", stringsAsFactors=FALSE)
rownames(etf_list) <- etf_list$Symbol
etf_list <- etf_list[sym_bols, ]
# Select ETF symbols for asset allocation
sym_bols <- c("VTI", "VEU", "EEM",
"XLY", "XLP", "XLE", "XLF", "XLV",
"XLI", "XLB", "XLK", "XLU", "VYM", "IVW",
"IWB", "IWD", "IWF", "IEF", "TLT", "VNQ",
"DBC", "GLD", "USO", "VXX", "SVXY", "MTUM")
# Select from etf_list only those ETF's in sym_bols
etf_list <- etf_list[sym_bols, ]
etf_names <- sapply(etf_list$Name, function(name) {
name_split <- strsplit(name, split=" ")[[1]]
name_split <- name_split[c(-1, -NROW(name_split))]
name_match <- match("Select", name_split)
if (!is.na(name_match))
name_split <- name_split[-name_match]
paste(name_split, collapse=" ")
})  # end sapply
etf_list$Name <- etf_names
etf_list["IEF", "Name"] <- "10 year Treasury Bond Fund"
etf_list["TLT", "Name"] <- "20 plus year Treasury Bond Fund"
etf_list["XLY", "Name"] <- "Consumer Discr. Sector Fund"
etf_list["EEM", "Name"] <- "Emerging Market Stock Fund"
etf_list["MTUM", "Name"] <- "Momentum Factor Fund"
etf_list["SVXY", "Name"] <- "Short VIX Futures"
etf_list["VXX", "Name"] <- "Long VIX Futures"
etf_list["DBC", "Name"] <- "Commodity Futures Fund"
etf_list["USO", "Name"] <- "WTI Oil Futures Fund"
etf_list["GLD", "Name"] <- "Physical Gold Fund"
etf_env$etf_list <- etf_list
save(etf_env, file="C:/Develop/lecture_slides/data/etf_data.RData")
rm(list = ls())
format_ohlc <- function(oh_lc, environ_ment) {
sym_bol <- oh_lc[1, "tic"]
# Adjustment factor
adj_fact <- drop(oh_lc[, c("ajexdi")])
# Daily total return factor
tr_fact <- drop(oh_lc[, "trfd"])
# Fill NA values
tr_fact <- ifelse(is.na(tr_fact), 1, tr_fact)
# Extract dates index
in_dex <- drop(oh_lc[, "datadate"])
in_dex <- lubridate::ymd(in_dex)
# Select only OHLCV data
oh_lc <- oh_lc[, c("prcod", "prchd", "prcld", "prccd", "cshtrd")]
colnames(oh_lc) <- paste(sym_bol, c("Open", "High", "Low", "Close", "Volume"), sep=".")
# Coerce to xts series
oh_lc <- xts::xts(oh_lc, in_dex)
# Fill NA prices
is_na <- is.na(oh_lc[, 1])
oh_lc[is_na, 1] <- (oh_lc[is_na, 2] + oh_lc[is_na, 3])/2
# Adjust the prices
oh_lc[, 1:4] <- tr_fact*oh_lc[, 1:4]/adj_fact/tr_fact[NROW(tr_fact)]
# Copy the OHLCV data to environ_ment
assign(x=sym_bol, value=oh_lc, envir=environ_ment)
sym_bol
}  # end format_ohlc
ls()
load("C:/Develop/lecture_slides/data/etf_data.RData")
load("C:/Develop/lecture_slides/data/etf_data.RData")
price_s <- sapply(as.list(etf_env)[etf_env$sym_bols], function(x) sum(is.na(x)))
price_s
rm(price_s)
rm(etf_env)
ls()
sp500_table <- read.csv(file="C:/Develop/data/WRDS/sp500_constituents.csv", stringsAsFactors=FALSE)
duplicate_s <- table(sp500_table$gvkey)
duplicate_s <- duplicate_s[duplicate_s > 1]
duplicate_s <- sp500_table[match(as.numeric(names(duplicate_s)), sp500_table$gvkey), ]
duplicate_s
class(sp500_table)
rm(list = ls())
sp500_table <- read.csv(file="C:/Develop/data/WRDS/sp500_constituents.csv", stringsAsFactors=FALSE)
sp500_gvkeys <- unique(sp500_table$gvkey)
sp500_cusips <- unique(sp500_table$co_cusip)
# Find the rows corresponding to the sp500_cusips
rows_cusips <- sp500_table[match(sp500_cusips, sp500_table$co_cusip), ]
rows_cusips
duplicate_s <- table(rows_cusips$gvkey)
duplicate_s
duplicate_s <- duplicate_s[duplicate_s > 1]
duplicate_s
duplicate_s <- rows_cusips[rows_cusips$gvkey %in% as.numeric(names(duplicate_s)), ]
duplicate_s
rm(list = ls())
format_ohlc <- function(oh_lc, environ_ment) {
sym_bol <- oh_lc[1, "tic"]
# Adjustment factor
adj_fact <- drop(oh_lc[, c("ajexdi")])
# Daily total return factor
tr_fact <- drop(oh_lc[, "trfd"])
# Fill NA values
tr_fact <- ifelse(is.na(tr_fact), 1, tr_fact)
# Extract dates index
in_dex <- drop(oh_lc[, "datadate"])
in_dex <- lubridate::ymd(in_dex)
# Select only OHLCV data
oh_lc <- oh_lc[, c("prcod", "prchd", "prcld", "prccd", "cshtrd")]
colnames(oh_lc) <- paste(sym_bol, c("Open", "High", "Low", "Close", "Volume"), sep=".")
# Coerce to xts series
oh_lc <- xts::xts(oh_lc, in_dex)
# Fill NA prices
is_na <- is.na(oh_lc[, 1])
oh_lc[is_na, 1] <- (oh_lc[is_na, 2] + oh_lc[is_na, 3])/2
# Adjust the prices
oh_lc[, 1:4] <- tr_fact*oh_lc[, 1:4]/adj_fact/tr_fact[NROW(tr_fact)]
# Copy the OHLCV data to environ_ment
assign(x=sym_bol, value=oh_lc, envir=environ_ment)
sym_bol
}  # end format_ohlc
ls()
# Load OHLC prices from .csv file downloaded from WRDS by gvkey
sp500_prices <- read.csv(file="C:/Develop/data/WRDS/sp500_prices_bygvkey.csv", stringsAsFactors=FALSE)
# Create new data environment
sp500_env <- new.env()
# Perform OHLC aggregations by gvkey column
sp500_prices <- split(sp500_prices, sp500_prices$gvkey)
process_ed <- lapply(sp500_prices, format_ohlc, environ_ment=sp500_env)
foo <- eapply(sp500_env, function(x) sum(is.na(x)))
sum(foo)
sum(unlist(foo))
sum(is.na(sp500_env$MSFT)))
sum(is.na(sp500_env$MSFT))
foo <- unlist(foo)
foo[foo > 0]
names(sp500_prices)
process_ed
sp500_prices <- unlist(sp500_prices)
# Load OHLC prices from .csv file downloaded from WRDS by gvkey
sp500_prices <- read.csv(file="C:/Develop/data/WRDS/sp500_prices_bygvkey.csv", stringsAsFactors=FALSE)
rm(sp500_env)
# Create new data environment
sp500_env <- new.env()
# Perform OHLC aggregations by gvkey column
sp500_prices <- split(sp500_prices, sp500_prices$gvkey)
process_ed <- lapply(sp500_prices, format_ohlc, environ_ment=sp500_env)
process_ed <- unlist(process_ed)
process_ed
unname(process_ed)
foo <- sort(unname(process_ed))
foo
plot(quantmod::Cl(sp500_env$`7559B`))
tail(sp500_env$`7559B`)
head(sp500_env$`7559B`)
process_ed
cat(process_ed, file="C:/Develop/data/WRDS/temp.txt", sep="\n")
write.csv(process_ed, file="C:/Develop/data/WRDS/temp.csv", row.names=FALSE)
write.csv(process_ed, file="C:/Develop/data/WRDS/temp.csv")
bar <- sp500_prices$`10121`
head(bar)
class(bar)
ls()
# rm(compustat_table)
compustat_table <- read.csv(file="C:/Develop/data/WRDS/compustat_table.csv", stringsAsFactors=FALSE)
bar$gvkey
bar$gvkey[1]
match(bar$gvkey[1], compustat_table$gvkey)
compustat_table$tic[match(bar$gvkey[1], compustat_table$gvkey)]
format_ohlc <- function(oh_lc, environ_ment) {
# sym_bol <- oh_lc[1, "tic"]
sym_bol <- compustat_table$tic[match(oh_lc$gvkey[1], compustat_table$gvkey)]
# Adjustment factor
adj_fact <- drop(oh_lc[, c("ajexdi")])
# Daily total return factor
tr_fact <- drop(oh_lc[, "trfd"])
# Fill NA values
tr_fact <- ifelse(is.na(tr_fact), 1, tr_fact)
# Extract dates index
in_dex <- drop(oh_lc[, "datadate"])
in_dex <- lubridate::ymd(in_dex)
# Select only OHLCV data
oh_lc <- oh_lc[, c("prcod", "prchd", "prcld", "prccd", "cshtrd")]
colnames(oh_lc) <- paste(sym_bol, c("Open", "High", "Low", "Close", "Volume"), sep=".")
# Coerce to xts series
oh_lc <- xts::xts(oh_lc, in_dex)
# Fill NA prices
is_na <- is.na(oh_lc[, 1])
oh_lc[is_na, 1] <- (oh_lc[is_na, 2] + oh_lc[is_na, 3])/2
# Adjust the prices
oh_lc[, 1:4] <- tr_fact*oh_lc[, 1:4]/adj_fact/tr_fact[NROW(tr_fact)]
# Copy the OHLCV data to environ_ment
assign(x=sym_bol, value=oh_lc, envir=environ_ment)
sym_bol
}  # end format_ohlc
process_ed <- lapply(sp500_prices, format_ohlc, environ_ment=sp500_env)
rm(sp500_env)
# Create new data environment
sp500_env <- new.env()
process_ed <- lapply(sp500_prices, format_ohlc, environ_ment=sp500_env)
write.csv(process_ed, file="C:/Develop/data/WRDS/temp.csv")
foo <- sort(unname(process_ed))
foo <- unname(process_ed)
foo
foo <- sort(unlist(process_ed))
foo
write.csv(foo, file="C:/Develop/data/WRDS/temp.csv")
plot(quantmod::Cl(sp500_env$MMI.3))
tail(sp500_env$MMI.3)
tail(sp500_env$MSFT)
tail(sp500_env$AGN.2)
tail(sp500_env$AGN)
head(sp500_env$AGN.2)
head(sp500_env$AGN)
head(sp500_env$SUN.1)
tail(sp500_env$SUN.1)
tail(sp500_env$SUNEQ)
plot(quantmod::Cl(sp500_env$SUNEQ))
plot(quantmod::Cl(sp500_env$SUNEQ["2015/"]))
plot(quantmod::Cl(sp500_env$SUNEQ["2015-06/2015-12"]))
tail(sp500_env$SUNEQ["2015-06/2015-12"])
# Save OHLC prices to .RData file
save(sp500_env, file="C:/Develop/lecture_slides/data/sp500.RData")
names_table <- compustat_table
dim(names_table)
Rcpp::sourceCpp('C:/Develop/R/Rcpp/lm_arma.cpp')
# Load packages
library(HighFreq)
library(shiny); runApp('C:/Develop/presentations/app_strategy_mean_revert25.R')
Rcpp::sourceCpp('C:/Develop/R/Rcpp/lm_arma.cpp')
runApp('C:/Develop/presentations/app_strategy_mean_revert25.R')
Rcpp::sourceCpp('C:/Develop/R/Rcpp/lm_arma.cpp')
trade_lag <- 1
look_long <- 12
look_short <- 2
beta_ret <- 0.0
en_ter <- 4.0
ex_it <- 2.0
# Source the strategy functions
source("C:/Develop/R/scripts/calc_strategy.R")
# load recent combined futures data
load(file="C:/Develop/data/combined.RData")
sym_bol <- "ES1"
es_1 <- com_bo[, paste(sym_bol, c("Open", "High", "Low", "Close"), sep=".")]
es_1 <- log(es_1)
runApp('C:/Develop/presentations/app_strategy_mean_revert25.R')
roll_count(c(FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE))
drop(roll_count(c(FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE)))
library(HighFreq)
drop(HighFreq::roll_count(c(FALSE, TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE)))
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
library(rutils)
re_turns <- na.omit(rutils::etf_env$re_turns[ ,"XLF", drop=FALSE])
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_skew(re_turns)
calc_skew(re_turns, typ_e = "quantile", al_pha = 0.1)
calc_skew(re_turns, typ_e = "nonparametric")
(mean(re_turns)-median(re_turns))/sd(re_turns)
all.equal(calc_skew(re_turns, typ_e = "nonparametric"),
(mean(re_turns)-median(re_turns))/sd(re_turns),
check.attributes=FALSE)
all.equal(drop(calc_skew(re_turns, typ_e = "nonparametric")),
(mean(re_turns)-median(re_turns))/sd(re_turns),
check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
rcpp=calc_skew(re_turns, typ_e = "nonparametric"),
Rcode=(mean(re_turns)-median(re_turns))/sd(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
376.75/73.60
calc_skewr <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end calc_skewr
all.equal(calc_skewr(re_turns), calc_skew(re_turns), check.attributes=FALSE)
summary(microbenchmark(
Rcpp=calc_skew(re_turns),
Rcode=calc_skewr(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
quantile(re_turns, 0.5)
median(re_turns)
calc_skewq <- function(x) {
(quantile(x, 0.75) + quantile(x, 0.25) - 2*quantile(x, 0.5))/(quantile(x, 0.75) - quantile(x, 0.25))
}  # end calc_skewq
all.equal(calc_skewq(re_turns), calc_skew(re_turns, typ_e = "q"), check.attributes=FALSE)
all.equal(drop(calc_skewq(re_turns)), calc_skew(re_turns, typ_e = "q"), check.attributes=FALSE)
calc_skew(re_turns, typ_e = "q")
all.equal(calc_skewq(re_turns), drop(calc_skew(re_turns, typ_e = "q")), check.attributes=FALSE)
calc_skewq(re_turns)
calc_skew(re_turns, typ_e = "quantile")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_skew(re_turns, typ_e = "quantile")
?quantile
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_skew(re_turns, typ_e = "quantile")
quantile(re_turns, c(0.25, 0.5, 0.75))
foo <- drop(calc_skew(re_turns, typ_e = "quantile"))
foo
(foo[3] + foo[1] - 2*foo[2])/(foo[3] - foo[1])
foo <- quantile(re_turns, c(0.25, 0.5, 0.75))
(foo[3] + foo[1] - 2*foo[2])/(foo[3] - foo[1])
foo <- quantile(re_turns, c(0.25, 0.5, 0.75), type=5)
(foo[3] + foo[1] - 2*foo[2])/(foo[3] - foo[1])
foo <- drop(calc_skew(re_turns, typ_e = "quantile"))
(foo[3] + foo[1] - 2*foo[2])/(foo[3] - foo[1])
calc_skewq <- function(x) {
quantile_s <- quantile(x, c(0.25, 0.5, 0.75), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(calc_skewq(re_turns),
calc_skew(re_turns), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
Rcpp=calc_skew(re_turns),
Rcode=calc_skewq(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
calc_skewq <- function(x) {
quantile_s <- quantile(x, c(0.25, 0.5, 0.75), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(calc_skewq(re_turns),
drop(calc_skew(re_turns)), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
Rcpp=calc_skew(re_turns),
Rcode=calc_skewq(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
calc_skewq <- function(x) {
quantile_s <- quantile(x, c(0.25, 0.5, 0.75), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(calc_skewq(re_turns),
drop(calc_skew(re_turns, typ_e = "quantile")), check.attributes=FALSE)
# Compare the speed of RcppArmadillo with R code
summary(microbenchmark(
Rcpp=calc_skew(re_turns),
Rcode=calc_skewq(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=calc_skew(re_turns),
Rcode=calc_skewq(re_turns, typ_e = "quantile")),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=calc_skew(re_turns),
Rcode=calc_skewq(re_turns, typ_e = "quantile"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
summary(microbenchmark(
Rcpp=calc_skew(re_turns, typ_e = "quantile"),
Rcode=calc_skewq(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
library(HighFreq)
?mad
all.equal(drop(HighFreq::calc_mad(re_turns)),
mad(re_turns))
library(HighFreq)
getwd()
system("R CMD Rd2pdf C:/Develop/R/HighFreq")
all.equal(drop(HighFreq::calc_mad(re_turns)), mad(re_turns))
# Compare the speed of RcppArmadillo with stats::mad()
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_mad(re_turns),
Rcode=mad(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
drop(HighFreq::calc_mad(re_turns))
mad(re_turns)
median(re_turns-median(re_turns))
median(abs(re_turns-median(re_turns)))
median(abs(re_turns-mean(re_turns)))
all.equal(drop(HighFreq::calc_mad(re_turns)), mad(re_turns)/1.4826)
re_turns <- na.omit(rutils::etf_env$re_turns[ ,c("VTI", "XLF"), drop=FALSE])
HighFreq::calc_skew(re_turns)
HighFreq::calc_skew(re_turns, typ_e = "quantile", al_pha = 0.1)
HighFreq::calc_skew(re_turns, typ_e = "nonparametric")
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[ ,"VTI", drop=FALSE])
HighFreq::calc_skew(re_turns)
calc_skewr <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end calc_skewr
all.equal(drop(HighFreq::calc_skew(re_turns)),
calc_skewr(re_turns), check.attributes=FALSE)
calc_skewr(re_turns)
HighFreq::calc_skew(re_turns)
all.equal(HighFreq::calc_skew(re_turns),
calc_skewr(re_turns), check.attributes=FALSE)
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns),
Rcode=calc_skewr(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
calc_skewq <- function(x) {
quantile_s <- quantile(x, c(0.25, 0.5, 0.75), type=5)
(quantile_s[3] + quantile_s[1] - 2*quantile_s[2])/(quantile_s[3] - quantile_s[1])
}  # end calc_skewq
all.equal(drop(HighFreq::calc_skew(re_turns, typ_e = "quantile")),
calc_skewq(re_turns), check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns, typ_e = "quantile"),
Rcode=calc_skewq(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(drop(HighFreq::calc_skew(re_turns, typ_e = "nonparametric")),
(mean(re_turns)-median(re_turns))/sd(re_turns),
check.attributes=FALSE)
summary(microbenchmark(
Rcpp=HighFreq::calc_skew(re_turns, typ_e = "nonparametric"),
Rcode=(mean(re_turns)-median(re_turns))/sd(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
all.equal(drop(HighFreq::calc_mad(re_turns)),
mad(re_turns)/1.4826)
summary(microbenchmark(
Rcpp=HighFreq::calc_mad(re_turns),
Rcode=mad(re_turns),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
