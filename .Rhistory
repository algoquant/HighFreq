library(Rcpp)
setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
install.packages(pkgs="C:/Develop/capstone/Sumit_Sethi/NPE", repos=NULL, type="source")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
Rcpp::sourceCpp(file="C:/Develop/R/Rcpp/test_temp.cpp")
ls()
re_turns <- na.omit(rutils::etf_env$re_turns[ ,"VTI", drop=FALSE])
calc_skew(re_turns)
HighFreq::calc_skew(re_turns)
calc_skewr <- function(x) {
x <- (x-mean(x)); nr <- NROW(x);
nr*sum(x^3)/(var(x))^1.5/(nr-1)/(nr-2)
}  # end calc_skewr
all.equal(
calc_skew(re_turns),
calc_skewr(re_turns), check.attributes=FALSE)
HighFreq::calc_skew(re_turns, typ_e = "quantile", al_pha = 0.1)
calc_skew(re_turns, typ_e = "quantile", al_pha = 0.1)
setwd("C:/Develop/R/HighFreq")
install.packages(pkgs="C:/Develop/R/HighFreq", repos=NULL, type="source")
setwd("C:/Develop/capstone/Sumit_Sethi/NPE")
detach("package:HighFreq")
search()
detach("package:Rcpp")
search()
setwd("C:/Develop/R/HighFreq")
install.packages(pkgs="C:/Develop/R/HighFreq", repos=NULL, type="source")
search()
q()
library(HighFreq)
re_turns <- na.omit(rutils::etf_env$re_turns[ ,"VTI", drop=FALSE])
HighFreq::calc_skew(re_turns)
HighFreq::calc_skew(re_turns, typ_e = "quantile", al_pha = 0.1)
HighFreq::calc_skew(re_turns, typ_e = "nonparametric")
HighFreq::calc_skew(re_turns, typ_e = "non")
HighFreq::calc_skew(re_turns, typ_e = "n")
HighFreq::calc_skew(re_turns, typ_e = "N")
HighFreq::calc_skew(re_turns, typ_e = "Nonparametric")
q()
