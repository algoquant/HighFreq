pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-7]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-8]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-9]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-10]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-11]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-12]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-13]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-14]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-15]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-16]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-17]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
cat("eigen_max=", eigen_max, "\n")
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
in_sample <- (date_s > week_s[i-21]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
do.call(rbind, pnl_s)
})  # end lapply
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Cumulative Returns of AR Strategies") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
predic_tor <- sapply(1:3, rutils::lag_it, in_put=as.numeric(rates_diff))
tail(predic_tor)
tail(rates_diff)
predic_tor <- lapply(1:3, rutils::lag_it, in_put=as.numeric(rates_diff))
predic_tor <- do.call(cbind, predic_tor)
tail(predic_tor)
predic_tor <- lapply(1:3, rutils::lag_it, in_put=rates_diff)
predic_tor <- do.call(cbind, predic_tor)
tail(predic_tor)
eigen_maxs <- 2:11
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
in_verse <- HighFreq::calc_inv(predic_tor, eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse)
forecast_s <- (predic_tor %*% co_eff)
sign(forecast_s)*re_turns
})
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="In-Sample Returns of Combined Strategies With Shrinkage") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
in_sample <- (date_s < as.Date("2020-01-01"))
out_sample <- (date_s >= as.Date("2020-01-01"))
# Calculate in-sample pnls for different eigen_max values
eigen_maxs <- 2:11
pnl_s <- lapply(eigen_maxs, function(x) {
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=x)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Out-of-Sample Returns of Combined Strategies With Shrinkage") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
month_s <- seq.Date(from=as.Date("2001-05-01"), to=as.Date("2021-04-01"), by="month")
look_back <- 6
eigen_max <- 3
pnl_s <- lapply(12:(NROW(month_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > month_s[i-look_back]) & (date_s < month_s[i])
out_sample <- (date_s > month_s[i]) & (date_s < month_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Monthly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
week_s <- seq.Date(from=as.Date("2001-05-01"), to=as.Date("2021-04-01"), by="weeks")
look_back <- 8
eigen_max <- 4
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
predic_tor <- lapply(1:2, rutils::lag_it, in_put=rates_diff)
predic_tor <- do.call(cbind, predic_tor)
tail(predic_tor)
eigen_maxs <- 2:11
pnl_s <- lapply(eigen_maxs, function(eigen_max) {
in_verse <- HighFreq::calc_inv(predic_tor, eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse)
forecast_s <- (predic_tor %*% co_eff)
sign(forecast_s)*re_turns
})
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="In-Sample Returns of Combined Strategies With Shrinkage") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
in_sample <- (date_s < as.Date("2020-01-01"))
out_sample <- (date_s >= as.Date("2020-01-01"))
eigen_maxs <- 2:11
pnl_s <- lapply(eigen_maxs, function(x) {
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=x)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})
pnl_s <- do.call(cbind, pnl_s)
colnames(pnl_s) <- paste0("eigen", eigen_maxs)
col_ors <- colorRampPalette(c("blue", "red"))(NCOL(pnl_s))
dygraphs::dygraph(cumsum(pnl_s), main="Out-of-Sample Returns of Combined Strategies With Shrinkage") %>%
dyOptions(colors=col_ors, strokeWidth=1) %>%
dyLegend(show="always", width=500)
eigen_max <- 9
look_back <- 6
pnl_s <- lapply(12:(NROW(month_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > month_s[i-look_back]) & (date_s < month_s[i])
out_sample <- (date_s > month_s[i]) & (date_s < month_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Monthly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
eigen_max
eigen_max <- 4
look_back
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
look_back <- 4
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
look_back <- 11
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
look_back <- 9
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
look_back <- 13
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
look_back <- 15
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
eigen_max
eigen_max <- 9
look_back <- 15
pnl_s <- lapply(51:(NROW(week_s)-1), function(i) {
# Define in-sample and out-of-sample intervals
in_sample <- (date_s > week_s[i-look_back]) & (date_s < week_s[i])
out_sample <- (date_s > week_s[i]) & (date_s < week_s[i+1])
# Calculate forecasts and pnls out-of-sample
in_verse <- HighFreq::calc_inv(predic_tor[in_sample, ], eigen_max=eigen_max)
co_eff <- drop(in_verse %*% res_ponse[in_sample, ])
forecast_s <- (predic_tor[out_sample, ] %*% co_eff)
sign(forecast_s)*re_turns[out_sample, ]
})  # end lapply
pnl_s <- do.call(rbind, pnl_s)
vt_i <- rutils::diff_it(clos_e[zoo::index(pnl_s),])
weal_th <- cbind(vt_i, pnl_s)
colnames(weal_th) <- c("VTI", "Strategy")
col_names <- colnames(weal_th)
dygraphs::dygraph(cumsum(weal_th), main="Rolling Weekly Shrinkage YC Strategy") %>%
dyAxis("y", label=col_names[1], independentTicks=TRUE) %>%
dyAxis("y2", label=col_names[2], independentTicks=TRUE) %>%
dySeries(name=col_names[1], axis="y", col="blue", strokeWidth=2) %>%
dySeries(name=col_names[2], axis="y2", col="red", strokeWidth=2) %>%
dyLegend(show="always", width=500)
