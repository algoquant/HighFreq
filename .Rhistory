tickna <- unname(unlist(tickna))
sp500old <- sp500old[!(sp500old$co_tic %in% tickna), ]
dim(sp500old)
tickold <- unique(sp500old$co_tic)
NROW(tickold)
sp500table <- read.csv(file="/Users/jerzy/Develop/lecture_slides/data/spyholdings.csv")
tickers <- sp500table$Ticker
tickold <- tickold[!(tickold %in% tickers)]
sp500old <- sp500old[sp500old$co_tic %in% tickold, c("co_conm","co_tic")]
colnames(sp500old) <- c("Name", "Ticker")
sp500old$Name <- stringr::str_to_title(sp500old$Name)
sp500old$Identifier <- rep_len(NA, NROW(sp500old))
sp500old$SEDOL <- rep_len(NA, NROW(sp500old))
sp500table <- rbind(sp500table[, 1:4], sp500old)
sp500table <- sp500table[, c("Ticker", "Name", "Identifier", "SEDOL")]
gsub("BRK.B", "[.]", "-")
gsub("[.]", "-", "BRK.B")
sp500old <- read.csv(file="/Users/jerzy/Develop/lecture_slides/data/sp500_constituents_2020.csv")
sp500old <- sp500old[!(sp500old$co_tic == ""), ]
sp500old$co_tic <- gsub("[.]", "-", sp500old$co_tic)
tickna <- read.csv(file="/Users/jerzy/Develop/lecture_slides/data/tickna.csv")
tickna <- unname(unlist(tickna))
tickna
sp500table <- read.csv(file="/Users/jerzy/Develop/lecture_slides/data/spyholdings.csv")
sp500table$Ticker <- gsub("[.]", "-", sp500table$Ticker)
tickers <- sp500table$Ticker
sp500old <- read.csv(file="/Users/jerzy/Develop/lecture_slides/data/sp500_constituents_2020.csv")
sp500old <- sp500old[!(sp500old$co_tic == ""), ]
sp500old$co_tic <- gsub("[.]", "-", sp500old$co_tic)
tickold <- unique(sp500old$co_tic)
ls()
head(sp500env$`BRK-B`)
head(sp500env$LOW)
strsplit(colnames(sp500env$LOW), split="[.]")
do.call(cbind, strsplit(colnames(sp500env$LOW), split="[.]"))
do.call(cbind, strsplit(colnames(sp500env$LOW), split="[.]"))[2, ]
rutils::get_name(colnames(sp500env$LOW), field=2)
namesv <- rutils::get_name(colnames(sp500env$LOW), field=2)
namesv
colnames(sp500env$LOW) <- paste("LO_WES", namesv, sep=".")
sp500env$LOWES <- sp500env$LOW
rm(LOW, envir=sp500env)
head(sp500env$LOWES)
sp500env$BRKB <- sp500env$`BRK-B`
rm(`BRK-B`, envir=sp500env)
head(sp500env$BRKB)
colnames(sp500env$BRKB)
gsub("BRK-B", "BRKB", colnames(sp500env$BRKB))
colnames(sp500env$BRKB) <- gsub("BRK-B", "BRKB", colnames(sp500env$BRKB))
colnames(sp500env$BRKB)
namesv
colnames(sp500env$"BF-B") <- paste("BFB", namesv, sep=".")
sp500env$BFB <- sp500env$"BF-B"
rm("BF-B", envir=sp500env)
save(sp500env, file="/Users/jerzy/Develop/lecture_slides/data/sp500.RData")
ls()
tail(sp500env$BRKB)
head(sp500env$BRKB)
etfenv <- new.env()
symbolv <- c("VTI", "VEU", "EEM", "XLY", "XLP", "XLE", "XLF",
"XLV", "XLI", "XLB", "XLK", "XLU", "VYM", "IVW", "IWB", "IWD",
"IWF", "IEF", "TLT", "VNQ", "DBC", "GLD", "USO", "VXX", "SVXY",
"MTUM", "IVE", "VLUE", "QUAL", "VTV", "USMV")
# Initialize Boolean vector of the symbols that were already downloaded
isdownloaded <- symbolv %in% ls(etfenv)
nattempts <- 0  # Number of download attempts
while (((sum(!isdownloaded)) > 0) & (nattempts<2)) {
# Download data and copy it into environment
nattempts <- nattempts + 1
cat("Download attempt = ", nattempts, "\n")
for (symbol in symbolv[!isdownloaded]) {
cat("processing: ", symbol, "\n")
tryCatch(  # With error handler
quantmod::getSymbols(symbol, src="tiingo", adjust=TRUE, auto.assign=TRUE,
from="1990-01-01", env=etfenv, api.key="d84fc2a9c5bde2d68e33034f65a838092c6b9f10"),
# Error handler captures error condition
error=function(error_cond) {
print(paste("error handler: ", error_cond))
},  # end error handler
finally=print(paste("symbol=", symbol))
)  # end tryCatch
}  # end for
# Update vector of symbols already downloaded
isdownloaded <- symbolv %in% ls(etfenv)
Sys.sleep(2)  # Wait 2 seconds until next attempt
}  # end while
save(etfenv, file="/Users/jerzy/Develop/lecture_slides/data/etf_data.RData")
head(sp500env$BRKB)
tail(sp500env$BRKB)
tail(etfenv$VTI)
head(etfenv$VTI)
library(shiny); runApp('~/Develop/Presentations/app_highcharts.R')
library(rutils)
# Load ETF returns
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
# Response equals XLF returns
response <- returns[, 1]
# Predictor matrix equals VTI and IEF returns
predictor <- returns[, -1]
lambdav <- 0.9
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
library(rutils)
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
response <- returns[, 1]
predictor <- returns[, -1]
lambdav <- 0.9
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
?HighFreq::run_reg
args(HighFreq::run_reg)
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lamb_da)
lambda
library(rutils)
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
response <- returns[, 1]
predictor <- returns[, -1]
lambdav <- 0.9
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
library(HighFreq)
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
# Response equals XLF returns
response <- returns[, 1]
# Predictor matrix equals VTI and IEF returns
predictor <- returns[, -1]
# Calculate the rolling regressions
lambdav <- 0.9
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
library(HighFreq)
# Load ETF returns
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
# Response equals XLF returns
response <- returns[, 1]
# Predictor matrix equals VTI and IEF returns
predictor <- returns[, -1]
# Calculate the rolling regressions
lambdav <- 0.9
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
tail(response)
tail(returns)
ls()
load("/Users/jerzy/Develop/lecture_slides/data/etf_data.RData")
ls()
prices <- eapply(etfenv, quantmod::Cl)
prices <- do.call(cbind, prices)
colnames(prices) <- do.call(rbind, strsplit(colnames(prices), split="[.]"))[, 1]
returns <- xts::diff.xts(log(prices))
etfenv$prices <- prices
etfenv$returns <- returns
symbolv
ls(load("/Users/jerzy/Develop/lecture_slides/data/etf_data.RData")
)
ls(etfenv)
symbolv <- c("VTI", "VEU", "EEM", "XLY", "XLP", "XLE", "XLF",
"XLV", "XLI", "XLB", "XLK", "XLU", "VYM", "IVW", "IWB", "IWD",
"IWF", "IEF", "TLT", "VNQ", "DBC", "GLD", "USO", "VXX", "SVXY",
"MTUM", "IVE", "VLUE", "QUAL", "VTV", "USMV")
etfenv$prices <- prices
etfenv$returns <- returns
etfenv$symbolv <- symbolv
ls(etfenv)
riskstats <- PerformanceAnalytics::table.Stats(returns)
riskstats <- as.data.frame(t(riskstats))
riskstats$Name <- rownames(riskstats)
etfenv$riskstats <- riskstats
capmstats <- PerformanceAnalytics::table.CAPM(Ra=returns[, symbolv],
Rb=returns[, "VTI"], scale=252)
colnamev <- strsplit(colnames(capmstats), split=" ")
colnamev <- do.call(cbind, colnamev)[1, ]
colnames(capmstats) <- colnamev
capmstats <- t(capmstats)
capmstats <- capmstats[, -1]
colnamev <- colnames(capmstats)
whichv <- match(c("Annualized Alpha", "Information Ratio", "Treynor Ratio"), colnamev)
colnamev[whichv] <- c("Alpha", "Information", "Treynor")
colnames(capmstats) <- colnamev
capmstats <- capmstats[order(capmstats[, "Alpha"], decreasing=TRUE), ]
# Copy capmstats into etfenv
etfenv$capmstats <- capmstats
save(etfenv, file="/Users/jerzy/Develop/lecture_slides/data/etf_data.RData")
library(HighFreq)
# Load ETF returns
returns <- na.omit(rutils::etfenv$returns[, c("XLF", "VTI", "IEF")])
# Response equals XLF returns
response <- returns[, 1]
# Predictor matrix equals VTI and IEF returns
predictor <- returns[, -1]
# Calculate the rolling regressions
lambdav <- 0.9
regs <- HighFreq::run_reg(response=response, predictor=predictor, lambda=lambdav)
datav <- cbind(cumsum(response), regs[, 2])
colnames(datav) <- c("XLF", "alphas")
colnamev <- colnames(datav)
dygraphs::dygraph(datav, main="Alphas of XLF Versus VTI and IEF") %>%
dyAxis("y", label=colnamev[1], independentTicks=TRUE) %>%
dyAxis("y2", label=colnamev[2], independentTicks=TRUE) %>%
dySeries(name=colnamev[1], axis="y", label=colnamev[1], strokeWidth=1, col="blue") %>%
dySeries(name=colnamev[2], axis="y2", label=colnamev[2], strokeWidth=1, col="red")
?z_scores
?means
library(shiny); runApp('~/Develop/Presentations/app_ewma_strat.R')
runApp('~/Develop/Presentations/app_runreg_minutes_strat.R')
runApp('~/Develop/Presentations/app_highcharts.R')
?weights
file_names <- Sys.glob("/Users/jerzy/Develop/lecture_slides/*.Rnw")
file_names <- file_names[-grep("FRE", file_names)]
sapply(file_names, knitr::purl, documentation=0, quiet=TRUE)
sapply(file_names, knitr::purl, documentation=0, quiet=TRUE)
getwd()
setwd("/Users/jerzy/Develop/HighFreq")
getwd()
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
?window
pwd
getwd()
?install.packages
getOption("repos")
library(shiny); runApp('~/Develop/Presentations/app_highcharts.R')
runApp('~/Develop/Presentations/app_highcharts.R')
?titlePanel
runApp('~/Develop/Presentations/app_highcharts.R')
install.packages(c("quantmod", "shiny", "shinythemes", "highcharter"))
find.package("xts")
find.package("HighFreq")
find.package("xts")
.libPaths()
usethis::edit_r_profile()
Sys.getenv("R_ENVIRON_USER")
paste0(Sys.getenv("R_ENVIRON_USER"), ".d")
R.home()
.libPaths()
R.version()
R.Version()
sessionInfo()
Sys.getenv("R_HOME")
library(HighFreq)
init_price <- 0.0; eq_price <- 1.0;
sigmav <- 0.02; thetav <- 0.01; nrows <- 1000
coeff <- matrix(c(0.1, 0.39, 0.5))
# Initialize the data
innov <- rnorm(nrows)
returns <- numeric(nrows)
prices <- numeric(nrows)
# Simulate Dickey-Fuller process using recursive loop in R
returns[1] <- sigmav*innov[1]
prices[1] <- init_price
returns[2] <- thetav*(eq_price - prices[1]) + coeff[1]*returns[1] + sigmav*innov[2]
prices[2] <- prices[1] + returns[2]
returns[3] <- thetav*(eq_price - prices[2]) + coeff[1]*returns[2] + coeff[2]*returns[1] + sigmav*innov[3]
prices[3] <- prices[2] + returns[3]
for (it in 4:nrows) {
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + sigmav*innov[it]
prices[it] <- prices[it-1] + returns[it]
}  # end for
# Simulate Dickey-Fuller process in Rcpp
returns <- HighFreq::sim_df(eq_price=eq_price, volat=sigmav, theta=thetav, coeff, innov=matrix(innov))
all.equal(prices, cumsum(drop(returns)))
args(HighFreq::sim_df)
returns <- HighFreq::sim_df(init_price=init_price, eq_price=eq_price, volat=sigmav, theta=thetav, coeff, innov=matrix(innov))
all.equal(prices, cumsum(drop(returns)))
foo <- cumsum(drop(returns))
tail(foo)
tail(prices)
head(foo)
head(prices)
foo <- drop(returns)
foo[1] <- 0
foo <- cumsum(foo)
all.equal(prices, foo)
head(prices)
head(foo)
all.equal(prices, cumsum(init_price+drop(returns)))
returns <- drop(returns)
returns <- drop(returns)
all.equal(prices, cumsum(init_price-returns[1]+returns))
all.equal(prices, init_price-returns[1]+cumsum(returns))
rm(list = ls())
coeff <- c(0.1, 0.39, 0.5)
nrows <- 1e2
set.seed(1121); innov <- rnorm(nrows)
arimav <- numeric(nrows)
arimav[1] <- innov[1]
arimav[2] <- coeff[1]*arimav[1] + innov[2]
arimav[3] <- coeff[1]*arimav[2] + coeff[2]*arimav[1] + innov[3]
for (it in 4:NROW(arimav)) {
arimav[it] <- arimav[(it-1):(it-3)] %*% coeff + innov[it]
}  # end for
arima_faster <- filter(x=innov, filter=coeff, method="recursive")
class(arima_faster)
all.equal(arimav, as.numeric(arima_faster))
arima_fastest <- .Call(stats:::C_rfilter, innov, coeff,
double(NROW(coeff) + NROW(innov)))[-(1:3)]
all.equal(arimav, arima_fastest)
init_price <- 0.0; eq_price <- 1.0;
sigmav <- 0.02; thetav <- 0.01; nrows <- 1000
coeff <- matrix(c(0.1, 0.39, 0.5))
innov <- rnorm(nrows)
returns <- numeric(nrows)
prices <- numeric(nrows)
returns[1] <- sigmav*innov[1]
prices[1] <- init_price
returns[2] <- thetav*(eq_price - prices[1]) + coeff[1]*returns[1] + sigmav*innov[2]
prices[2] <- prices[1] + returns[2]
returns[3] <- thetav*(eq_price - prices[2]) + coeff[1]*returns[2] + coeff[2]*returns[1] + sigmav*innov[3]
prices[3] <- prices[2] + returns[3]
it <- 4
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + sigmav*innov[it]
prices[it] <- prices[it-1] + returns[it]
returns[(it-1):(it-3)] %*% coeff
sum(returns[(it-1):(it-3)] * coeff)
for (it in 4:nrows) {
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + sigmav*innov[it]
prices[it] <- prices[it-1] + returns[it]
}  # end for
foo <- HighFreq::sim_ar(coeff=coeff, innov=innov)
foo <- HighFreq::sim_ar(coeff=coeff, innov=matrix(innov))
rm(list = ls())
coeff <- c(0.1, 0.39, 0.5)
nrows <- 1e2
set.seed(1121); innov <- rnorm(nrows)
# Simulate AR process using recursive loop in R
arimav <- numeric(nrows)
arimav[1] <- innov[1]
arimav[2] <- coeff[1]*arimav[1] + innov[2]
arimav[3] <- coeff[1]*arimav[2] + coeff[2]*arimav[1] + innov[3]
for (it in 4:NROW(arimav)) {
arimav[it] <- arimav[(it-1):(it-3)] %*% coeff + innov[it]
}  # end for
# Simulate AR process using filter()
arima_faster <- filter(x=innov, filter=coeff, method="recursive")
class(arima_faster)
all.equal(arimav, as.numeric(arima_faster))
matrix(c(0.2, 0.2))
coeff
filtered <- filter(innov, filter=coeff, method="recursive")
returns <- HighFreq::sim_ar(coeff, innov)
returns <- HighFreq::sim_ar(coeff, matrix(innov))
returns <- HighFreq::sim_ar(matrix(coeff), matrix(innov))
all.equal(as.numeric(returns), as.numeric(filtered))
coeff <- matrix(c(0.2, 0.2))
innov <- matrix(rnorm(1e4, sd=0.01))
filtered <- filter(innov, filter=coeff, method="recursive")
returns <- HighFreq::sim_ar(coeff, innov)
all.equal(as.numeric(returns), as.numeric(filtered))
coeff <- matrix(c(0.1, 0.39, 0.5))
coeff
innov <- matrix(rnorm(1e4, sd=0.01))
filtered <- filter(innov, filter=coeff, method="recursive")
returns <- HighFreq::sim_ar(coeff, innov)
all.equal(as.numeric(returns), as.numeric(filtered))
rev(coeff)
returns <- HighFreq::sim_ar(matrix(rev(coeff)), innov)
all.equal(as.numeric(returns), as.numeric(filtered))
coeff <- c(0.1, 0.39, 0.5)
nrows <- 1e2
set.seed(1121); innov <- rnorm(nrows)
arimav <- numeric(nrows)
arimav[1] <- innov[1]
arimav[2] <- coeff[1]*arimav[1] + innov[2]
arimav[3] <- coeff[1]*arimav[2] + coeff[2]*arimav[1] + innov[3]
for (it in 4:NROW(arimav)) {
arimav[it] <- arimav[(it-1):(it-3)] %*% coeff + innov[it]
}  # end for
arima_faster <- filter(x=innov, filter=coeff, method="recursive")
class(arima_faster)
all.equal(arimav, as.numeric(arima_faster))
coeff <- matrix(c(0.1, 0.39, 0.5))
innov <- matrix(rnorm(1e4, sd=0.01))
filtered <- filter(innov, filter=coeff, method="recursive")
returns <- HighFreq::sim_ar(coeff, innov)
all.equal(as.numeric(returns), as.numeric(filtered))
returns <- as.numeric(returns)
filtered <- as.numeric(filtered)
head(filtered)
head(returns)
library(HighFreq)
coeff <- matrix(c(0.1, 0.5))
innov <- matrix(rnorm(1e4, sd=0.01))
filtered <- filter(innov, filter=coeff, method="recursive")
returns <- HighFreq::sim_ar(coeff, innov)
all.equal(as.numeric(returns), as.numeric(filtered))
coeff <- matrix(c(0.1, 0.39, 0.5))
innov <- matrix(rnorm(1e4, sd=0.01))
filtered <- filter(innov, filter=coeff, method="recursive")
returns <- HighFreq::sim_ar(coeff, innov)
all.equal(as.numeric(returns), as.numeric(filtered))
returns <- as.numeric(returns)
filtered <- as.numeric(filtered)
head(filtered)
head(returns)
coeff
library(HighFreq)
returns <- HighFreq::sim_ar(coeff, innov)
all.equal(as.numeric(returns), as.numeric(filtered))
library(microbenchmark)
summary(microbenchmark(
Rcpp=HighFreq::sim_ar(coeff, innov),
Rcode=filter(innov, filter=coeff, method="recursive"),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
rnorm(5, sd=0.01)
library(HighFreq)
rm(list = ls())
init_price <- 1.0
eq_price <- 1.0
thetav <- 0.01
coeff <- matrix(c(0.1, 0.3, 0.5))
innov <- matrix(rnorm(1e3, sd=0.01))
returns <- HighFreq::sim_df(init_price=init_price, eq_price=eq_price, theta=thetav, coeff, innov=innov)
rm(list = ls())
init_price <- 0.0;  eq_price <- 1.0
thetav <- 0.01;  nrows <- 1000
coeff <- matrix(c(0.1, 0.39, 0.5))
innov <- rnorm(nrows, sd=0.01)
returns <- numeric(nrows)
prices <- numeric(nrows)
returns[1] <- sigmav*innov[1]
prices[1] <- init_price
returns[2] <- thetav*(eq_price - prices[1]) + coeff[1]*returns[1] + sigmav*innov[2]
prices[2] <- prices[1] + returns[2]
returns[3] <- thetav*(eq_price - prices[2]) + coeff[1]*returns[2] + coeff[2]*returns[1] + sigmav*innov[3]
prices[3] <- prices[2] + returns[3]
for (it in 4:nrows) {
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + sigmav*innov[it]
prices[it] <- prices[it-1] + returns[it]
}  # end for
innov <- rnorm(nrows, sd=0.01)
returns <- numeric(nrows)
prices <- numeric(nrows)
# Simulate Dickey-Fuller process using recursive loop in R
returns[1] <- sigmav*innov[1]
prices[1] <- init_price
returns[2] <- thetav*(eq_price - prices[1]) + coeff[1]*returns[1] + innov[2]
prices[2] <- prices[1] + returns[2]
returns[3] <- thetav*(eq_price - prices[2]) + coeff[1]*returns[2] + coeff[2]*returns[1] + innov[3]
prices[3] <- prices[2] + returns[3]
for (it in 4:nrows) {
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + innov[it]
prices[it] <- prices[it-1] + returns[it]
}  # end for
innov <- rnorm(nrows, sd=0.01)
returns <- numeric(nrows)
prices <- numeric(nrows)
# Simulate Dickey-Fuller process using recursive loop in R
returns[1] <- innov[1]
prices[1] <- init_price
returns[2] <- thetav*(eq_price - prices[1]) + coeff[1]*returns[1] + innov[2]
prices[2] <- prices[1] + returns[2]
returns[3] <- thetav*(eq_price - prices[2]) + coeff[1]*returns[2] + coeff[2]*returns[1] + innov[3]
prices[3] <- prices[2] + returns[3]
for (it in 4:nrows) {
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + innov[it]
prices[it] <- prices[it-1] + returns[it]
}  # end for
returns <- HighFreq::sim_df(init_price=init_price, eq_price=eq_price, theta=thetav, coeff, innov=matrix(innov))
returns <- drop(returns)
all.equal(prices, init_price-returns[1]+cumsum(returns))
library(microbenchmark)
summary(microbenchmark(
Rcode={for (it in 4:nrows) {
returns[it] <- thetav*(eq_price - prices[it-1]) + returns[(it-1):(it-3)] %*% coeff + innov[it]
prices[it] <- prices[it-1] + returns[it]
}},
Rcpp=HighFreq::sim_df(init_price=init_price, eq_price=eq_price, theta=thetav, coeff, innov=matrix(innov)),
times=10))[, c(1, 4, 5)]  # end microbenchmark summary
pricescpp <- init_price - returns[1] + cumsum(returns)
all.equal(prices, pricescpp)
library(HighFreq)
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
pwd
getwd()
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
capabilities()
xfun::session_info('rmarkdown')
tinytex::tinytex_root()
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
tinytex::tinytex_root()
tinytex:::is_tinytex()
tinytex::tlmgr_path()
devtools::build_manual()
getwd()
tools::texi2pdf()
tinytex::tinytex_root()
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
devtools::install_github("yihui/tinytex")
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
tinytex::install_tinytex()
tinytex::tlmgr_install("beamer")
tinytex::tlmgr_install("mathtools")
tinytex::tlmgr_install("bbm")
tinytex::tlmgr_install("bbm-macros")
tinytex::tlmgr_install("fancybox")
tinytex::tlmgr_install("biblatex")
tinytex::tlmgr_install("hyperref")
tinytex::tlmgr_install("amsmath")
tinytex::tlmgr_install("amssymb")
tinytex::tlmgr_install("amsfonts")
tinytex::tlmgr_install("listings")
tinytex::tlmgr_install("xcolor")
tinytex::tlmgr_install("multirow")
system("R CMD Rd2pdf /Users/jerzy/Develop/HighFreq")
library(HighFreq)
tinytex::tlmgr_path()
tinytex::tinytex_root()
